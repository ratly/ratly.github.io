<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[耗子的]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://haozi.de/"/>
  <updated>2014-12-17T19:01:00.399Z</updated>
  <id>http://haozi.de/</id>
  
  <author>
    <name><![CDATA[耗子]]></name>
    <email><![CDATA[i@haozi.de]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[检测页面全局变量脚本]]></title>
    <link href="http://haozi.de/post/%E6%A3%80%E6%B5%8B%E9%A1%B5%E9%9D%A2%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E8%84%9A%E6%9C%AC/"/>
    <id>http://haozi.de/post/检测页面全局变量脚本/</id>
    <published>2014-10-25T04:40:40.000Z</published>
    <updated>2014-10-25T06:52:25.000Z</updated>
    <content type="html"><![CDATA[<p>上次说到严格模式也不能完全保证不会意外跑出全局变量，所以最好还有一种更方便的检测方法。</p>
<h2 id="jshint">jshint</h2>
<h2 id="亡羊补牢，后知后觉">亡羊补牢，后知后觉</h2>
<p>由于不同的流量器宿主全局方法并不一样，但同一个浏览器的不内window实例一定是一样的，所以我们可以构建一个临时的iframe，里面的window对象是干净无污染的，只要拿topwindow和这个iframeWindow中的变量进行对比，就行。如果是用户不小心抛出去的全局变量，一定是可写可读的，不可能是用Object.Object.defineProperty搞出来的只读的常量。于是便有了以下代码: 可将此链接直接拖到收藏夹栏使用<a href="javascript:eval(decodeURIComponent('(function(e%2Ct%2Cn%2Cr)%7Bn%3Dt.createElement(%22script%22)%2Cr%3Dt.body%2Cn.onload%3Dn.onerror%3Dfunction()%7Br.removeChild(n)%7D%2Cn.setAttribute(%22charset%22%2C%22utf-8%22)%2Cn.src%3D%22http%3A%2F%2Fhaozi.de%2Fdemo%2FcheckGlobalVar%2FcheckGlobalVar.js%3F%3D%22%2B(new%20Date%2F864e5).toFixed()%2Cr.appendChild(n)%7D)(top%2Cdocument)'))" target="_blank" rel="external">检测全局变量</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">function</span><span class="list">(<span class="title">topWindow</span>, document)</span>{</span></div><div class="line">    var iframeWindow<span class="comment">;</span></div><div class="line">    var whiteList = [/<span class="variable">*'jQuery', '$', ...*</span>/]<span class="comment">;</span></div><div class="line">    var ret = []<span class="comment">;</span></div><div class="line">    function checkGlobalVar<span class="list">()</span> {</div><div class="line">        var iframe = document.createElement<span class="list">(<span class="quoted">'iframe</span>')</span>, i, originValue<span class="comment">;</span></div><div class="line">        document.body.appendChild<span class="list">(<span class="title">iframe</span>)</span><span class="comment">;</span></div><div class="line">        iframeWindow = iframe.contentWindow<span class="comment">;</span></div><div class="line">        for<span class="list">(<span class="title">i</span> in topWindow)</span> {</div><div class="line">            if<span class="list">(!<span class="list">(<span class="title">i</span> in iframeWindow)</span> <span class="keyword">&&</span> !~whiteList.indexOf<span class="list">(<span class="title">i</span>)</span>)</span> {</div><div class="line">                originValue = topWindow[i]<span class="comment">;</span></div><div class="line">                topWindow[i] = '耗子么么哒'<span class="comment">; // 写一个不可能是系统预设的值</span></div><div class="line">                if<span class="list">(<span class="title">topWindow</span>[i] === '耗子么么哒')</span> {</div><div class="line">                    iframeWindow.console.info<span class="list">(<span class="title">i</span>)</span><span class="comment">; // 防止重写了topWindow的console</span></div><div class="line">                    ret.push<span class="list">(<span class="title">i</span>)</span><span class="comment">;</span></div><div class="line">                }</div><div class="line">                topWindow[i] = originValue<span class="comment">;</span></div><div class="line">            }</div><div class="line">        }</div><div class="line">        iframeWindow.console.warn<span class="list">('共找到'  + ret.length + '个全局变量<span class="comment">;');</span></span></div><div class="line">        document.body.removeChild<span class="list">(<span class="title">iframe</span>)</span><span class="comment">; // 干完坏事会死灭迹</span></div><div class="line">        iframeWindow = null<span class="comment">;</span></div><div class="line">    }</div><div class="line">    setTimeout<span class="list">(<span class="title">function</span><span class="list">()</span>{</span></div><div class="line">        if<span class="list">(!document.body)</span> {</div><div class="line">            alert<span class="list">('页面还没加载完！')</span><span class="comment">;</span></div><div class="line">            return<span class="comment">;</span></div><div class="line">        }</div><div class="line">        checkGlobalVar<span class="list">()</span><span class="comment">;</span></div><div class="line">    }, <span class="number">1000</span>)</div><div class="line">})<span class="list">(<span class="title">top</span>, document)</span><span class="comment">;</span></div></pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[严格模式下arguments的限制]]></title>
    <link href="http://haozi.de/post/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E4%B8%8Barguments%E7%9A%84%E9%99%90%E5%88%B6/"/>
    <id>http://haozi.de/post/严格模式下arguments的限制/</id>
    <published>2014-07-12T13:06:06.000Z</published>
    <updated>2014-10-25T04:37:26.000Z</updated>
    <content type="html"><![CDATA[<p>使用’use strict’可以很简单地开启严格模式<br>严格模式下有以下特征与普通模式不一样，需要注意</p>
<h2 id="一、不可以隐式声明变量">一、不可以隐式声明变量</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line">a = <span class="number">1</span>; <span class="comment">// ReferenceError : a</span></div></pre></td></tr></table></figure>

<p>但是严格模式的检测是在执行期的，所以：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不报错</span></div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"><span class="pi">    'use strict'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        a = <span class="number">1</span>;</div><div class="line">    }</div><div class="line">})();</div><div class="line"><span class="comment">// 只发生了函数声明</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 赋给一个变量，再执行</span></div><div class="line">  <span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"><span class="pi">    'use strict'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        a = <span class="number">1</span>;</div><div class="line">    }</div><div class="line">})();</div><div class="line">b = <span class="number">1</span>; <span class="comment">// b声明成功</span></div><div class="line">foo(); <span class="comment">// ReferenceError: a</span></div><div class="line"><span class="comment">// 此时foo是闭包，执行的时候会查找闭包的作用域，发现启用了严格模式，所以报错</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//直接调用，报错 ReferenceError: a</span></div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"><span class="pi">    'use strict'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        a = <span class="number">1</span>;</div><div class="line">    }</div><div class="line">})()();</div></pre></td></tr></table></figure>

<p>一个script标签里的严格声明，并不能影响另一个script里的代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"><span class="pi"></span></span></div><div class="line">    'use strict';</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    a = <span class="number">1</span>;<span class="comment">// 不报错</span></div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>‘use strict’并需放在一个 作用域、语句块的开头，可以有空格，但不能有其它声明；</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a和b都能声明成功，a为局部变量，b为全局变量</span></div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    a = <span class="number">1</span>;</div><div class="line">    <span class="string">'use strict'</span>;</div><div class="line">    <span class="keyword">var</span> a;</div><div class="line">    b = <span class="number">2</span>;</div><div class="line">})();</div></pre></td></tr></table></figure>

<h2 id="二、不可以使用with,_不赘述">二、不可以使用with, 不赘述</h2>
<h2 id="三、this不指向window,_不赘述">三、this不指向window, 不赘述</h2>
<h2 id="四、创建eval作用域">四、创建eval作用域</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'globalVar'</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"><span class="pi">    'use strict'</span>;</div><div class="line">    <span class="keyword">var</span> a = <span class="string">'localVar'</span>;</div><div class="line">    <span class="built_in">eval</span>(<span class="string">'var a = "evalVar"; console.log(a)'</span>); <span class="comment">// "evalVar"</span></div><div class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 'localVar'</span></div><div class="line">})();</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// "globalVar"</span></div></pre></td></tr></table></figure>

<h2 id="四arguments">四arguments</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">(a)</span> </span>{</div><div class="line"><span class="pi">    'use strict'</span>;</div><div class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="string">'changeA'</span>;</div><div class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 严格模式为1 ,普通模式为 changeA</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.caller)<span class="comment">// Uncaught TypeError: 'caller', 'callee', and 'arguments' properties ...</span></div><div class="line">}</div><div class="line">foo(a);</div></pre></td></tr></table></figure>

<p>所以建议不要直接操作arguments,还是使用Array.prototype.slice.call(arguments)转成真数组才使用。<br>如果必须在函数内部调用自身进行递归，请给函数具名。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="reserved">function</span> <span class="keyword">loop</span>() {</div><div class="line">    <span class="built_in">console</span>.clear();</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> Date());</div><div class="line">    setTimeout(<span class="keyword">loop</span>, <span class="number">1000</span>);</div><div class="line">}, <span class="number">1000</span>);</div><div class="line"><span class="keyword">loop</span> <span class="regexp">//</span> <span class="keyword">loop</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div></pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[404状态码的坑]]></title>
    <link href="http://haozi.de/post/404%E7%8A%B6%E6%80%81%E7%A0%81%E7%9A%84%E5%9D%91/"/>
    <id>http://haozi.de/post/404状态码的坑/</id>
    <published>2014-07-10T15:23:06.000Z</published>
    <updated>2014-10-10T15:51:46.000Z</updated>
    <content type="html"><![CDATA[<p>网站中不存在的网址应该返回404状态，并给用户展示一个友好的404页面。这是搜索引擎给我们的建议，关于404页面的设计甚至成为<a href="http://www.hongkiat.com/blog/60-really-cool-and-creative-error-404-pages/" target="_blank" rel="external">一门艺术</a></p>
<p>然而不幸的是如果直接http状态码返回404，在我大天朝是要吃亏的，下面这是用户网页被劫持的情况：<br><img src="http://p7.qhimg.com/t01b64bad258e2efb4b.png" alt=""></p>
<p>无良的运营商和各种工具条，还有一些浏览器，都会对网站超时和404状态做处理。这种劫持的404页面不仅样貌丑陋，还可能让用户无法再回到你的主站。</p>
<p>通过试验，404状态会稳定劫持，301和302状态不会，200也不会。200状态会被搜索引擎判为内容重复；301状态永久重定向也会被搜索引擎收录，另外301状态会被浏览器缓存，不请求服务器会丢统计日志；302状态是一种临时重定向，不会被服务器缓存，语义上也说得过去。综上所述，如果想告知用户页面不存在，又不想被劫持，请使用302重定向到error.html页面。 目前京东、淘宝、百度都是这么做的。</p>
<p>在nginx中配置302转向非常简单，只需要改一行代码：<br>把</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">error_page</span>  <span class="number">404</span>  /<span class="number">404</span>.html;</div></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">error_page</span>  <span class="number">404</span>  <span class="url">http://haozi.de/404.html</span>;</div></pre></td></tr></table></figure>

<p>改成绝对路径，nginx就会自动把404变成302重定向了。</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[use git in local]]></title>
    <link href="http://haozi.de/post/use-git-in-local/"/>
    <id>http://haozi.de/post/use-git-in-local/</id>
    <published>2014-03-27T12:55:16.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p>提到git，很多人可能想到的是github。其实自己一个人本地也可以用git来管理自己的代码。</p>
<p>公司用的代码管理工具是svn。平时在开发中经常会遇到这样的问题：</p>
<ol>
<li>要完成a和b两个需求，两个需求都要改c.js。现在要求上线a需求，b需求还不能上线。</li>
<li>正在开发一个需求，改了好多文件。这时突然线上出现一个紧急bug需求马上改。</li>
</ol>
<p>svn在这一方面做得很差，咨询过别的同事，出现第一种情况一般是把b需求的代码注释掉。出现第二种情况是将线上代码分支拉下来，改完还要把代码在本地代码库上再改一变。<br>对于代码的branch和merge用git就太简单了。可以直接在你的本地svn代码文件夹里再开一个git</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> ~/yourCode</div><div class="line">git init</div><div class="line"><span class="keyword">vi</span> .gitignore</div><div class="line">把.svn文件夹忽略掉</div></pre></td></tr></table></figure>

<p>为了防止把.git文件夹传到svn上，我们还要改下svn的忽略目录:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi .subversion/config</div><div class="line">找到global-ignores 所在行，把行首的注释符去掉</div><div class="line">在行末加上 .svn （和前面有一个空格）</div><div class="line">global-ignores = <span class="keyword">*</span>.o <span class="keyword">*</span>.lo <span class="keyword">*</span>.la <span class="keyword">*</span>.al .libs <span class="keyword">*</span>.so <span class="keyword">*</span>.so.[0-9]<span class="keyword">*</span> <span class="keyword">*</span>.a <span class="keyword">*</span>.pyc <span class="keyword">*</span>.pyo .git<span class="keyword">*</span></div></pre></td></tr></table></figure>

<p>这样两者就不相互干扰了</p>
<h2 id="把svn代码都灌入git仓库:">把svn代码都灌入git仓库:</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">add</span> .</div><div class="line">git commit -<span class="operator">a</span> -m <span class="string">"init"</span></div></pre></td></tr></table></figure>

<h2 id="根据需求新拉一个分支，不建意在master分支下开发">根据需求新拉一个分支，不建意在master分支下开发</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> branch hotfix</div></pre></td></tr></table></figure>

<h2 id="切换到hotfix分支">切换到hotfix分支</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> checkout hotfix</div></pre></td></tr></table></figure>

<h2 id="修复代码，修完bug，完成测试。">修复代码，修完bug，完成测试。</h2>
<h2 id="合并代码到master分支">合并代码到master分支</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git <span class="operator"><span class="keyword">merge</span> hotfix</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="other" scheme="http://haozi.de/tags/other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unable to get image data from canvas because the canvas has been tainted by cross-origin data问题产生原因及解决办法]]></title>
    <link href="http://haozi.de/post/unable-to-get-image-data-from-canvas-because-the-canvas-has-been-tainted-by-cross-origin-data%E9%97%AE%E9%A2%98%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://haozi.de/post/unable-to-get-image-data-from-canvas-because-the-canvas-has-been-tainted-by-cross-origin-data问题产生原因及解决办法/</id>
    <published>2014-03-22T20:03:46.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="出错原因">出错原因</h2>
<p>新版的chrome中如果如果canvas渲染得是一张第三方域的图片的话，这个canvas会被标记为tainted，将不能使用getImageData方法。</p>
<h2 id="解决方法">解决方法</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/CORS_Enabled_Image?redirectlocale=en-US&amp;redirectslug=CORS_Enabled_Image" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/CORS_Enabled_Image?redirectlocale=en-US&amp;redirectslug=CORS_Enabled_Image</a></p>
]]></content>
    
    
      <category term="canvas" scheme="http://haozi.de/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[客户端存储]]></title>
    <link href="http://haozi.de/post/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8/"/>
    <id>http://haozi.de/post/客户端存储/</id>
    <published>2014-03-21T17:43:09.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="cookie_和_cookie_的局限">cookie 和 cookie 的局限</h2>
<p>我们知道HTTP 本身是一种无状态、无连接的协议，用户在浏览器上请求一个动作时，服务器不会知道用户上次动作做了什么，因此如果要存储诸如登录与否、已录入文本等状态信息是非常麻烦的，对于开发交互式的程序来说这很致命，而cookie技术的发明则满足了大部分的状态存储的需求。 从根本上来讲，cookie 其实就是一段存储在客户端（浏览器）的文本，我们既可以在服务器响应返回时设置cookie的值，也可以在前端通过 js 进行修改。</p>
<p>我们考虑一个最简单的登录场景来说明 cookie 是如何实现状态存储的，当你向百度服务器发送了你的用户名密码并且验证过你的身份之后，服务器端会在响应客户端时的 HTTP 包的包头中的加上一个cookie字段，这个字段则可能是类似 BAIDUID=XXX 的值，是服务器分配给你的唯一标识符，这段文本将存储在你的计算机磁盘中，当你继续浏览百度的其他页面时，每次http请求都会带上cookie这个字段，这样服务器端就可以确认这个请求依然来自于登录后的你，从而从某种意义上来说“保存”了登录状态，这时读者可能要问了，不同网站登录时都会发送吗？那岂不是谷歌就可以知道我百度的账号了？当然不是，cookie的使用是有限制的，这个限制便来自于域，不同域间的cookie是不会影响也不可访问。（注：域限制是Cookie安全的基础，这个话题有很多值得深入讨论的点，比如跨父域子域进行ajax访问，多个域名时如何跨域进行身份验证等）<br><a id="more"></a><br>从上面的例子很容易理解，BAIDUID是一个cookie的名称(name)，用于唯一标识一个具体的cookie，但cookie的名称是不区分大小写的，例如BAIDUID和baiduid标识了同一个cookie；而XXX则是该cookie的值(value)，除了名值外，cookie还包含域、路径、失效时间等信息，所有这些信息都可以通过前端或后端两个途径进行设置，下面讨论浏览器端的cookie操作（服务器端如何设置cookie不是我们的重点）。</p>
<p>在浏览器上我们通过对document.cookie属性的存取来操作cookie。随便打开一个网页，在chrome控制台中键入document.cookie后回车即可以看到此页面下可用的完整的cookie内容，会是个如下形式的值：</p>
<p>“uid=abc; LM=1394675994”类似<br>cookie以;号分割的字符串;如果要设置一个cookie，我们可以这样做：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"foo=bar"</span></div></pre></td></tr></table></figure>

<p>这时我们创建了名为foo，值为bar的cookie，document.cookie并不仅仅是一个普通的字符串，这个属性有着很奇怪的特性，虽然上面的语句看起来是赋值语句，但却不会覆盖cookie原来的值，而是会将新cookie添加到后面，创建完毕后的document.cookie会是这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"uid=abc; LM=1394675994;foo=bar"</span></div></pre></td></tr></table></figure>

<p>可以看到新创建的cookie添加到后面了，但由于直接访问document.cookie只能获取到完整的字符串，要进一步获取具体的键值对就必须得手工操作这个字符串，为了方便地操作cookie，我们可以封装名两个函数，名为getCookie和setCookie：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span><span class="params">(name)</span> </span>{</div><div class="line">    <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span>,</div><div class="line">        cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName),</div><div class="line">        cookieValue = <span class="literal">null</span>,</div><div class="line">        cookieEnd;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(cookieStart &gt; -<span class="number">1</span>) {</div><div class="line">        cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>, cookieStart)</div><div class="line">        <span class="keyword">if</span>(cookieEnd == -<span class="number">1</span>) {</div><div class="line">            cookieEnd = <span class="built_in">document</span>.cookie.length;</div><div class="line">        }</div><div class="line">        cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> cookieValue;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span><span class="params">(name, value, opt_expires, opt_path, opt_domain, opt_secure)</span> </span>{</div><div class="line">    <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(opt_expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) {</div><div class="line">        cookieText += <span class="string">"; expires="</span> + opt_expires.toGMTString();</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(opt_path) {</div><div class="line">        cookieText += <span class="string">"; path="</span> + opt_path;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(opt_domain) {</div><div class="line">        cookieText += <span class="string">"; domain="</span> + opt_domain;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(opt_secure) { <span class="comment">// 安全标志，指定该标志后只有在使用 SSL 连接时才会发送cookie（即发送到https://开头的域）</span></div><div class="line">        cookieText += <span class="string">"; secure"</span>;</div><div class="line">    }</div><div class="line">    <span class="built_in">document</span>.cookie = cookieText;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>代码完整展示了如何存取一个具体的cookie，之所以在每个过程都使用encodeURIComponent和decodeURIComponent对名值对儿进行编解码是为了确保cookie能被正确发送到服务器，setCookie函数中只有key和value是必须的，domain等参数可选且不会发送到服务器，比如现在要想获取名uid的cookie值，并在后面加上4，我们可以这样做：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span>Cookie(<span class="string">'uid'</span>, getCookie(<span class="string">'uid'</span>) + <span class="number">4</span>)</div></pre></td></tr></table></figure>

<p>如果要删除一个cookie，我们只需要将key的值设置为空字符串，并将它的过期时间设置为过去的时间即可，由此可以得到下面这个unsetCookie 函数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unsetCookie</span><span class="params">(name, path, domain, secure)</span> </span>{</div><div class="line">    setCookie(name, <span class="string">""</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>), path, domain, secure);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如此一来这个蹩脚的接口已经变得很方便开发人员操作了。</p>
<p>除了前面提到的域限制以外，Cookie还有一些其他的限制，其中比较重要的便是大小和数量限制。不同浏览器在实现cookie时，采用了不同的限制策略。常见浏览器在cookie数量上的限制如下：</p>
<ul>
<li>IE6 及更低版本每个域最多20个cookie。</li>
<li>IE7 及更高版本每个域最多50个cookie。</li>
<li>Firefox 每个域最多50个cookie。</li>
<li>Opera 为每个域30个cookie。</li>
<li>Webkit内核（chrome &amp;safari）没有对cookie数量做明确限制，但是如果cookie太大以至于超过了HTTP头部大小限制时，服务器将无法正确处理。<br>为了突破cookie个数限制，可以采用一种名为子cookie的技术，其基本原理是在一个cookie内存储多个名值对,比如将value再以|号分割。</li>
</ul>
<p>除了数量限制，浏览器对cookie的尺寸也做了限制，大多数浏览器都将cookie的尺寸限制在 4096B 左右 。</p>
<p>虽然cookie会存在用户磁盘里，但严格地说cookie并不能算是本地存储技术。因为每次请求站点的所有cookie都会被发送到服务器，如果将太多数据存放在cookie当中会严重降低传输性能，加上cookie本身还有大小和数量限制，所以cookie并不适合在客户端存储数据。如果要在本地存储大量数据，还得另寻其他方式。而 HTML5 规范中的 Web Storage 便是专门为大量本地数据的存储设计的。</p>
<h2 id="localStorage_&amp;_sessionStorage">localStorage &amp; sessionStorage</h2>
<p>Storage在浏览器中被实现为一个类型，但开发者是不被允许实例化Storage对象的，浏览器已经内置有两个已经实例化好的对象，一个是sessionStorage，另一个是localStorage，其中sessionStorage中存储的数据只在单个页面的会话期间有效，sessionStorage更类似于一个页面上的全局变量，而localStorage的数据则会被持久化到客户端，而且永远不会过期（cookie是可以设置过期时间的），并且其容量也不像cookie那样受限，因此localStorage成为了我们存储本地数据的不二之选。来看一个简单的例子以了解其基本使用方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">window</span>.localStorage) { <span class="comment">// 检测浏览器是否支持 localStorage</span></div><div class="line">    <span class="comment">// 存</span></div><div class="line">    localStorage.name = <span class="string">'haozi'</span></div><div class="line">    localStorage.setItem(<span class="string">'sex'</span>, <span class="string">'male'</span>)</div><div class="line">    <span class="comment">// 取</span></div><div class="line">    console.<span class="keyword">log</span>(localStorage.name) <span class="comment">// haozi</span></div><div class="line">    console.<span class="keyword">log</span>(localStorage.sex) <span class="comment">// male</span></div><div class="line">    <span class="comment">// 删</span></div><div class="line">    <span class="keyword">delete</span> localStorage.name</div><div class="line">    console.<span class="keyword">log</span>(localStorage.name) <span class="comment">// undefined</span></div><div class="line">    localStorage.removeItem(<span class="string">'sex'</span>)</div><div class="line">    console.<span class="keyword">log</span>(localStorage.getItem(<span class="string">'sex'</span>)) <span class="comment">// null</span></div><div class="line">    localStorage.<span class="keyword">clear</span>() <span class="comment">// 清空所有数据</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>可以看到使用localStorage读写数据很方便，既可以像操作普通对象那样去存取，也可以使用setItem、getItem和removeItem方法来存、取和删除 key。要注意的是，localStorage和普通对象不同在于只能存储字符串，如果你试图存储其他类型的数据，将会被强制转换成字符串，下面的例子最后会在控制台打印出 [object Object]：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">localStorage<span class="built_in">.</span><span class="built_in">data</span> <span class="subst">=</span> {</div><div class="line">    <span class="string">'name'</span>: <span class="string">'haozi'</span></div><div class="line">}</div><div class="line">console<span class="built_in">.</span><span class="keyword">log</span>(localStorage<span class="built_in">.</span><span class="built_in">data</span>) <span class="comment">// [object Object]</span></div><div class="line"></div><div class="line">localStorage<span class="built_in">.</span>haozi <span class="subst">=</span> window<span class="built_in">.</span>haozi</div><div class="line">localStorage<span class="built_in">.</span>haozi <span class="comment">// "undefined"</span></div></pre></td></tr></table></figure>

<p>如果要存储对象，则可以先使用window.JSON对象提供的 stringify 和 parse 方法对JSON数据进行序列化和反序列化：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">localStorage.data = <span class="built_in">JSON</span>.stringify({</div><div class="line">    <span class="string">'name'</span>: <span class="string">'haozi'</span></div><div class="line">})</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(localStorage.data).name) <span class="comment">// haozi</span></div></pre></td></tr></table></figure>

<p>localStorage对象的关键便在于持久化数据，当我们关闭浏览器再打开网站，依然可以访问到这个域存储的数据。</p>
<p>由于localStorage与sessionStorage都是Storage的实例，你可以完全使用和localStorage相同的方式去使用sessionStorage，它们共享Storage接口提供的一组方法和属性：</p>
<ul>
<li>setItem(key, value) 设置一个key</li>
<li>getItem(key) 获取一个key</li>
<li>removeItem(key) 移除一个key</li>
<li>length 类似数组length属性，用于访问Storage对象中item的数量</li>
<li>key(n) 用于访问第 n 个 key 的名称，如 name</li>
<li>clear() 清除当前域下的所有localStorage内容。</li>
</ul>
<p>而sessionStorage和localStorage不同之处在于存取数据生命周期不一样，只要一直在这个域内连续访问，存储在sessionStorage的数据会一直存在，而一旦关闭页面或者浏览器后所有存储的内容便消失了（这意味着sessionStorage不会将数据存入磁盘）。</p>
<p>对Storage对象进行的所有修改都会触发文档上的storage事件。 其中事件对象会有以下属性：</p>
<ul>
<li>domain：发生变化的域名。</li>
<li>key: 发生修改的键。</li>
<li>oldValue: 修改前的值。</li>
<li>newValue: 修改后的值（如果是删除一个键，则为null）<br>下面的代码展示了如何监听该事件：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">document.addEventListener(<span class="string">"storage"</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> {</span></div><div class="line">    // 截止到目前为止，尚无浏览器完整实现这些事件属性</div><div class="line">    // console.<span class="built_in">log</span>(<span class="string">"Storage changed. Name '"</span> + <span class="keyword">e</span>.key + <span class="string">"' changed from '"</span> + <span class="keyword">e</span>.oldValue + <span class="string">"' to '"</span> + <span class="keyword">e</span>.newValue + <span class="string">"'"</span>)</div><div class="line">})</div></pre></td></tr></table></figure>

<p>sessionStorage和localStorage都会触发此事件，但无法区分究竟是谁触发的事件。 而且这个事件现目前尚有兼容性问题，所以不建议使用此事件。<br><a href="http://www.cnblogs.com/shihao/archive/2011/12/23/2298854.html" target="_blank" rel="external">http://www.cnblogs.com/shihao/archive/2011/12/23/2298854.html</a></p>
<p>要注意，IE8中的Web Storage有10MB 的存储容量限制，而Firefox、Google Chrome 和 Opera中每个域名可以存储5MB的数据，不过对于大多数的应用来说5MB已经足够了。另外，IE提供了一个非标准的remainingSpace 属性用于查看剩余多少可用空间（单位是字节），下面这个函数可以获取剩余容量的百分比：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRemainingSpacePercent</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">if</span>(localStorage.remainingSpace) {</div><div class="line">        <span class="keyword">return</span> localStorage.remainingSpace / <span class="number">5000000</span> * <span class="number">100</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你想实现一些需要在本地存储数据的功能，比如记住用户偏好或个性化设置、恢复页面上次打开状态等等，Web Storage 会是一个绝佳的选择。下面我们来实现一个页面访问计数器练练手：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">本次访问已经查看过该页面 <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"count1"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span> 次</div><div class="line">历史上你已经查看过该页面 <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"count2"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span> 次</div><div class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"btn"</span>&gt;</span>清零<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateCounter</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"count1"</span>).innerHTML = sessionStorage.pageLoadCount || <span class="number">0</span>;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"count2"</span>).innerHTML = localStorage.pageLoadCount || <span class="number">0</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(localStorage.getItem(<span class="string">"pageLoadCount"</span>) === <span class="literal">null</span> ) {</div><div class="line">        localStorage.setItem(<span class="string">"pageLoadCount"</span>, <span class="number">0</span>)</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(sessionStorage.getItem(<span class="string">"pageLoadCount"</span>) === <span class="literal">null</span> ) {</div><div class="line">        sessionStorage.setItem(<span class="string">"pageLoadCount"</span>, <span class="number">0</span>)</div><div class="line">    }</div><div class="line">    localStorage.pageLoadCount = <span class="built_in">parseInt</span>(localStorage.getItem(<span class="string">"pageLoadCount"</span>)) + <span class="number">1</span></div><div class="line">    sessionStorage.pageLoadCount = <span class="built_in">parseInt</span>(sessionStorage.getItem(<span class="string">"pageLoadCount"</span>)) + <span class="number">1</span></div><div class="line">    updateCounter()</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">        localStorage.clear()</div><div class="line">        sessionStorage.clear()</div><div class="line">        updateCounter()</div><div class="line">    }</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>本次访问已经查看过该页面 <span id="count1"></span> 次<br><br>历史上你已经查看过该页面 <span id="count2"></span> 次<br></p>
<script>
    (function(){
        function updateCounter () {
            document.getElementById("count1").innerHTML = sessionStorage.pageLoadCount || 0;
            document.getElementById("count2").innerHTML = localStorage.pageLoadCount || 0;
        }
        if(localStorage.getItem("pageLoadCount") === null ) {
            localStorage.setItem("pageLoadCount", 0)
        }
        if(sessionStorage.getItem("pageLoadCount") === null ) {
            sessionStorage.setItem("pageLoadCount", 0)
        }
        localStorage.pageLoadCount = parseInt(localStorage.getItem("pageLoadCount")) + 1
        sessionStorage.pageLoadCount = parseInt(sessionStorage.getItem("pageLoadCount")) + 1
        updateCounter()

    })();
</script>

<p>Web Storage在桌面和移动设备的浏览器中都有很好的支持，除了Opera Mini 和IE8以下版本的浏览器外，基本上其他浏览器都可以完美支持。</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="cookie_和_cookie_的局限">cookie 和 cookie 的局限</h2>
<p>我们知道HTTP 本身是一种无状态、无连接的协议，用户在浏览器上请求一个动作时，服务器不会知道用户上次动作做了什么，因此如果要存储诸如登录与否、已录入文本等状态信息是非常麻烦的，对于开发交互式的程序来说这很致命，而cookie技术的发明则满足了大部分的状态存储的需求。 从根本上来讲，cookie 其实就是一段存储在客户端（浏览器）的文本，我们既可以在服务器响应返回时设置cookie的值，也可以在前端通过 js 进行修改。</p>
<p>我们考虑一个最简单的登录场景来说明 cookie 是如何实现状态存储的，当你向百度服务器发送了你的用户名密码并且验证过你的身份之后，服务器端会在响应客户端时的 HTTP 包的包头中的加上一个cookie字段，这个字段则可能是类似 BAIDUID=XXX 的值，是服务器分配给你的唯一标识符，这段文本将存储在你的计算机磁盘中，当你继续浏览百度的其他页面时，每次http请求都会带上cookie这个字段，这样服务器端就可以确认这个请求依然来自于登录后的你，从而从某种意义上来说“保存”了登录状态，这时读者可能要问了，不同网站登录时都会发送吗？那岂不是谷歌就可以知道我百度的账号了？当然不是，cookie的使用是有限制的，这个限制便来自于域，不同域间的cookie是不会影响也不可访问。（注：域限制是Cookie安全的基础，这个话题有很多值得深入讨论的点，比如跨父域子域进行ajax访问，多个域名时如何跨域进行身份验证等）<br>]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu开机出现waiting for network configuration的解决方法]]></title>
    <link href="http://haozi.de/post/waiting%20for%20network%20configuration/"/>
    <id>http://haozi.de/post/waiting for network configuration/</id>
    <published>2013-07-12T01:43:14.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p>昨天把机器带到朋友家上网,朋友家用的是宽带拨号,于是便用pppoeconf命令拨号</p>
<p>今天把机器带回公司,发现怎么也找不到wifi了,开机时出现waiting fo network configuration的提示,一分多种进入后状态栏的网络小图标也不见了.</p>
<p>上网找了下解决方法:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> vi /etc/network/interfaces</div></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">auto <span class="keyword">lo</span></div><div class="line">iface <span class="keyword">lo</span> inet loopback</div></pre></td></tr></table></figure>

<p>以外的所有字段,保存,退出,重启,o了</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[【共学】《编写可维护的javascript》05-避免使用全局变量]]></title>
    <link href="http://haozi.de/post/05-%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://haozi.de/post/05-避免使用全局变量/</id>
    <published>2013-07-08T17:58:33.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p><strong>耗子</strong></p>
<p>今天我们讲的第6章比较简单</p>
<p>避免使用全局变量</p>
<p>这个大家有没有  概念呢</p>
<p><strong>耗子</strong></p>
<p>@小妹 要不说一下js中产生全局变量的方法吧</p>
<p><strong>小妹</strong></p>
<p>好</p>
<a id="more"></a>

<p><strong>小妹</strong></p>
<p>例如 不加var的变量声明</p>
<p>就会变成全局变量</p>
<p><strong>小白</strong></p>
<p>var变量=xxx</p>
<p><strong>小妹</strong></p>
<p>a=123;</p>
<p><strong>雪花</strong></p>
<p>我找不到乌龟书，在张继霞那里，她开会去了。</p>
<p><strong>耗子</strong></p>
<p>没事<br>我基本不按书上的套路出牌</p>
<p><strong>耗子</strong></p>
<p>嗯<br>@小妹 和@小白 分别讲到了js中两种声明变量的方法</p>
<p><strong>耗子</strong></p>
<p>a=123;<br>这叫隐式声明<br>var a = 123; 加了一个var，这是显示声明</p>
<p><strong>耗子</strong></p>
<p>隐式声明是极度被诟病的一种方式<br>在任何情况下我们都不应该这样声明变量</p>
<p><strong>耗子</strong></p>
<p>在php中，变量都是无需声明的<br>与js中的这种情况是有差别的</p>
<p><strong>耗子</strong></p>
<p>不过这两种方式都不是声明全局变量的正式方法哦</p>
<p><strong>雪花</strong></p>
<p>我认真旁听哈</p>
<p><strong>耗子</strong></p>
<p>@小妹 你说正确的应该怎样?</p>
<p><strong>小妹</strong></p>
<p>声明全局变量的方法 我一般是用window.xxx=123</p>
<p><strong>耗子</strong></p>
<p>嗯<br>这种方式在客户端js中没有什么问题</p>
<p><strong>耗子</strong></p>
<p>不过如果你开始写node的话<br>在服务器端是没有window宿主对象的</p>
<p><strong>小妹</strong></p>
<p>嗯 那样的话怎么定义全局变量呢</p>
<p><strong>耗子</strong></p>
<p>node中有global对象</p>
<p><strong>小妹</strong></p>
<p>嗯</p>
<p><strong>耗子</strong></p>
<p>js中一个特性<br>就是this的指针</p>
<p><strong>小妹</strong></p>
<p>global.xxx=123?</p>
<p><strong>耗子</strong></p>
<p>this指针一般指向哪儿呢？</p>
<p><strong>小妹</strong></p>
<p>嗯 如果在函数里</p>
<p><strong>小妹</strong></p>
<p>this指针一般指调用这个函数的对象</p>
<p><strong>小妹</strong></p>
<p>如果是全局调用的话 例如: func();this指window</p>
<p><strong>小妹</strong></p>
<p>因为就像window.func();</p>
<p><strong>耗子</strong></p>
<p>嗯,不过不能这么说，this指到哪和如何调用它有关</p>
<p><strong>耗子</strong></p>
<p>this调用比较复杂</p>
<p><strong>小妹</strong></p>
<p>en</p>
<p><strong>耗子</strong></p>
<p>我先把一种较好的声明全局变量的方法先说一下吧</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">function</span><span class="list">(<span class="title">global</span>)</span>{</span></div><div class="line">    global.xxx = <span class="number">123</span><span class="comment">;</span></div><div class="line">})<span class="list">(<span class="title">this</span>)</span><span class="comment">;</span></div></pre></td></tr></table></figure>

<p>这种方法在严格模式下会有问题，但我会一般不会在全局作用域下开启严格模式</p>
<p><strong>小妹</strong></p>
<p>这种在服务器端的js也是可行的是吗？</p>
<p><strong>小妹</strong></p>
<p>嗯，这时候的this就是服务端的global吗？</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p>但服务器上其实能实现0全局变量的</p>
<p><strong>小妹</strong></p>
<p>哦</p>
<p><strong>耗子</strong></p>
<p>之后我们讲一下客户端实现0全局变量的方式</p>
<p><strong>耗子</strong></p>
<p>好，我先说下this的五种调用方法吧，这五种方法下this的指针是不一样的</p>
<p><strong>耗子</strong></p>
<p>1、 全局范围内调用</p>
<p>this指向全局对象</p>
<p>在浏览器宿主里<br>this === window</p>
<p><strong>小妹</strong></p>
<p>嗯 明白了</p>
<p><strong>耗子</strong></p>
<p>2、函数调用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span></span>{</div><div class="line">    <span class="comment">//this 这里指向的也是window</span></div><div class="line">}</div><div class="line">hello();</div></pre></td></tr></table></figure>

<p><strong>耗子</strong></p>
<p>3、方法调用</p>
<p><strong>耗子</strong></p>
<p>呃，谁说下函数和方法有什么区别</p>
<p><strong>小妹</strong></p>
<p>方法是不是对象里的成员函数？</p>
<p>如果说错了 可以忽略</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p>对的，不过函数和方法没有本质差别</p>
<p>其实全局函数都是window对象的成员方法</p>
<p><strong>耗子</strong></p>
<p>var obj = {<br>     hello: function(){<br>        //这里的this指向的是哪儿呢？<br>    }<br>}<br>obj.hello();</p>
<p><strong>小妹</strong></p>
<p>obj</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p><strong>Disappear</strong></p>
<p>js的继承是不是通过复用对象来继承的？</p>
<p><strong>耗子</strong></p>
<p>@Disappear 嗯，js中的继承可以用多种方式来实现</p>
<p><strong>Disappear</strong></p>
<p>感觉这个非常迷惑</p>
<p><strong>耗子</strong></p>
<p>比如假设一下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span> = {</div><div class="line">     hello: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">         <span class="comment">// this指向的就是window</span></div><div class="line">    }</div><div class="line">};</div><div class="line"><span class="built_in">window</span>.hello();</div></pre></td></tr></table></figure>

<p><strong>耗子</strong></p>
<p>所以函数调用和方法调用没有本质的区别</p>
<p><strong>小妹</strong></p>
<p>嗯</p>
<p><strong>耗子</strong></p>
<p>好<br>再一个比较坑爹的</p>
<p>var obj = {<br>    hello: function(){<br>        function foo(){<br>            // 这里的this指向哪<br>        };<br>        foo();<br>    }<br>};<br>obj.hello();</p>
<p>这种在面对对象编程里肯定会遇到的问题</p>
<p><strong>小妹</strong></p>
<p>== 啊 我分析下</p>
<p>好像是window诶</p>
<p>是吗</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p><strong>小妹</strong></p>
<p>我理解就是一点 什么调用函数，this就指向谁</p>
<p><strong>耗子</strong></p>
<p>因为this的指向不是静态的<br>而是在运行时，看谁在调用它</p>
<p><strong>耗子</strong></p>
<p>4、构造函数中的this调用</p>
<p><strong>耗子</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span> <span class="params">()</span></span>{</div><div class="line">    <span class="comment">//this</span></div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">new</span> Foo();</div></pre></td></tr></table></figure>

<p><strong>耗子</strong></p>
<p>这时候的Foo 如果带了new调用和不带new调用，this指向是不一样的</p>
<p><strong>小妹</strong></p>
<p>嗯</p>
<p>不带的时候是window</p>
<p><strong>雪花</strong></p>
<p>怎么不一样啊</p>
<p><strong>耗子</strong></p>
<p>如果用new调用函数</p>
<p>this指向生成的新对象</p>
<p>如果不用new调用，this指向window</p>
<p><strong>耗子</strong></p>
<p>js里其实任何函数都可以用new调用<br>所以首字母大写是非常重要的约定</p>
<p><strong>小妹</strong></p>
<p>就是作为构造函数的时候是吧？</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p><strong>小妹</strong></p>
<p>嗯 了解了</p>
<p><strong>耗子</strong></p>
<p>5、最后一种，显式的this调用<br>这种es3中有apply和call两种方法 es5中有bind方法,可以显示地指定this，让在合适的时候调用</p>
<p><strong>耗子</strong></p>
<p>var haozi = {};<br>function foo(){<br>    //this<br>};</p>
<p>foo.call(haozi)// 这时候this指向haozi</p>
<p>而不是window</p>
<p>这在面向对象的编程中很重要</p>
<p><strong>小妹</strong></p>
<p>比如apply(obj,func1,func2)，是把func1，function2里的上下文指向obj，</p>
<p>就是this</p>
<p>是吗</p>
<p><strong>耗子</strong></p>
<p>不对</p>
<p><strong>小妹</strong></p>
<p>请说</p>
<p><strong>耗子</strong></p>
<p>apply是Function.prototype原型链上的方法<br>不是全局函数</p>
<p><strong>小妹</strong></p>
<p>嗯 是的</p>
<p><strong>耗子</strong></p>
<p>func.call<br>func.apply</p>
<p><strong>小妹</strong></p>
<p>哦</p>
<p><strong>小妹</strong></p>
<p>而且apply只接受两个参数，第一个是this指针，第二个是参数数组</p>
<p>foo.apply(bar, [1, 2, 3]);<br>foo.call(bar, 1, 2, 3);</p>
<p><strong>耗子</strong><br>嗯<br>我们再回到前面<br>为什么</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">function</span><span class="list">( global )</span>{</span></div><div class="line"></div><div class="line">})<span class="list">(<span class="title">this</span>)</span><span class="comment">;</span></div></pre></td></tr></table></figure>

<p>这里明白了吧<br>在非严格模式下全局作用域下的this指向global<br><strong>耗子</strong></p>
<p>花了不少的篇幅说如何声明全局变量<br>现在要被我毁掉了<br>因为全局变量是一个很不好的特性</p>
<p><strong>Disappear</strong></p>
<p>让我猜猜吧，是不是不容易控制吧，到处都可以改？</p>
<p><strong>耗子</strong></p>
<p>嗯<br>是的</p>
<p><strong>耗子</strong></p>
<p>另外也会造成命名冲突、代码压缩时不能变成短命名等</p>
<p>短小优雅的名字大家都容易想到</p>
<p><strong>耗子</strong></p>
<p>所以经典的解决方法是引入命名空间</p>
<p>js中没有原生的namespace</p>
<p>但是有很强大的对象</p>
<p><strong>耗子</strong></p>
<p>就是在window下建一个对象，将函数变成对象的方法</p>
<p><strong>Disappear</strong></p>
<p>用对象当命名空间，解决变量和函数的名字冲突，这样理解对吗？</p>
<p><strong>耗子</strong></p>
<p>这个在yui2和ext中很常见,jq的$.xxx方法也属于对象的成员方法</p>
<p>这种模式也叫单体模式</p>
<p><strong>耗子</strong></p>
<p>一个庞大的程序，最多只需要一个全局变量就足够了</p>
<p>这就是一个程序能争取到的全部地盘</p>
<p><strong>Disappear</strong></p>
<p>singleton？</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p><strong>Disappear</strong></p>
<p>我感觉理解js的类，对象比较困难，似乎和java，c++不太一样</p>
<p><strong>耗子</strong></p>
<p>嗯，和静态语言有很多差别</p>
<p><strong>耗子</strong></p>
<p>最后说一下0全局变量</p>
<p><strong>耗子</strong></p>
<p>这种是最理想的方法</p>
<p>比如</p>
<p>(function(){<br>    // 代码块里不使用window.xxx = xxx; 这样的方式去声明全局函数<br>})();</p>
<p><strong>耗子</strong></p>
<p>这样就不会产生全局变量</p>
<p><strong>耗子</strong></p>
<p>不过问题是在这个作用域外是无法访问到它的内部变量的</p>
<p><strong>耗子</strong></p>
<p>适合一些简单的小脚本开发</p>
<p><strong>耗子</strong></p>
<p>如果需要模块化开发<br>我们需要另一种方式去管理代码<br>这在服务端nodejs中尤为常见</p>
<p><strong>耗子</strong></p>
<p>那么它又是如何实现0全局变量的呢？</p>
<p>这种无污染的0全局变量的方式又是如何工作在客户端的呢？</p>
<p><strong>耗子</strong></p>
<p>不知道大家有没有兴趣听了</p>
<p><strong>小白</strong></p>
<p>有</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p><strong>耗子</strong></p>
<p>这就是现在流行的amd和cmd模块了</p>
<p><strong>耗子</strong></p>
<p>两者理论上都能消灭客户端的全局变量依赖</p>
<p><strong>耗子</strong></p>
<p>时间不早了<br>今天大家貌似都比较忙，就不展开讲amd和cmd了，下次做为一个章节来讲吧</p>
<p>诸位晚安</p>
]]></content>
    <summary type="html"><![CDATA[<p><strong>耗子</strong></p>
<p>今天我们讲的第6章比较简单</p>
<p>避免使用全局变量</p>
<p>这个大家有没有  概念呢</p>
<p><strong>耗子</strong></p>
<p>@小妹 要不说一下js中产生全局变量的方法吧</p>
<p><strong>小妹</strong></p>
<p>好</p>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[【共学】《编写可维护的javascript》04-UI层的松耦合]]></title>
    <link href="http://haozi.de/post/04-UI%E5%B1%82%E7%9A%84%E6%9D%BE%E8%80%A6%E5%90%88/"/>
    <id>http://haozi.de/post/04-UI层的松耦合/</id>
    <published>2013-07-04T13:38:33.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p><strong>耗子</strong></p>
<p>今晚讲解耦</p>
<p><strong>张继霞</strong></p>
<p>弱弱的问一句是第五章吗？</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p><strong>张继霞</strong></p>
<p>好，我临时抱会儿佛脚预习去</p>
<p><a id="more"></a><br><strong>贤敬</strong></p>
<p>跟着张师兄，我也看看去。呵呵</p>
<p><strong>耗子</strong></p>
<p>你们有谁玩过nodejs没？</p>
<p><strong>耗子</strong></p>
<p>今天我们讲的东西基本上不在书本上</p>
<p><strong>雪花</strong></p>
<p>。。。我好不容易看看书</p>
<p><strong>小妹</strong></p>
<p>估计雪花他们已经预习了</p>
<p><strong>耗子</strong></p>
<p>不过也得有个标题吧<br>那还是遵守乌龟书吧，就叫《UI的松耦合》</p>
<p><strong>耗子</strong></p>
<p>把它当成一个命题吧</p>
<p><strong>小妹</strong></p>
<p>嗯</p>
<p><strong>耗子</strong></p>
<p>大家从自己的开发过程经验中谈谈</p>
<p><strong>耗子</strong></p>
<p>雪花好像没写过代码</p>
<p>张继霞还是写过不少的吧</p>
<p><strong>雪花</strong></p>
<p>我没开发经验</p>
<p><strong>张继霞</strong></p>
<p>写过不多</p>
<p><strong>耗子</strong></p>
<p>首先我们弄明白什么叫耦合吧</p>
<p><strong>耗子</strong></p>
<p>解耦基本上是所有程序猿一辈子在奋斗的事<br>各种设计模式的目的都是为了解耦</p>
<p><strong>雪花</strong></p>
<p>不存在无耦合，无偶不成书啊</p>
<p><strong>耗子</strong></p>
<p>哈哈</p>
<p><strong>贤敬</strong></p>
<p>耦合就是指两个或两个以上的实体相互依赖于对方的一个量度。（百度百科）</p>
<p><strong>耗子</strong></p>
<p>嗯<br>耦合的坏处呢？</p>
<p><strong>雪花</strong></p>
<p>一处修改，处处修改</p>
<p><strong>路小平</strong></p>
<p>维护是噩梦</p>
<p><strong>雪花</strong></p>
<p>带来大的工作量</p>
<p><strong>耗子</strong></p>
<p>嗯<br>对</p>
<p><strong>贤敬</strong></p>
<p>所以就提倡松耦合了，对么？</p>
<p><strong>耗子</strong></p>
<p>而且不利于leader划分工作，让不同的码农分开发不同的代码</p>
<p><strong>耗子</strong></p>
<p>以后我们讲设计模式的时候还是要和解耦打交到</p>
<p><strong>耗子</strong></p>
<p>今天主要讨论的是ui层的松耦合</p>
<p><strong>耗子</strong></p>
<p>这个大家在切图的时候应该都会遇到过吧？</p>
<p><strong>耗子</strong></p>
<p>你们平时如果切图的话<br>会是一个什么流程呢</p>
<p><strong>张继霞</strong></p>
<p>恩，经常遇到</p>
<p><strong>张继霞</strong></p>
<p>师父文集就犯了这个错误</p>
<p><strong>张继霞</strong></p>
<p>在css中用了js表达式</p>
<p><strong>耗子</strong></p>
<p>是按区块去切</p>
<p>还是照着设计图一行行地码</p>
<p><strong>龙泉寺 - 小白</strong></p>
<p>先看设计稿的布局。然后分成几个大块，也就是大的div。然后再具体到细节</p>
<p><strong>耗子</strong></p>
<p>嗯<br>css里写表达式是非常不好的作风</p>
<p><strong>龙泉寺 - 小白</strong></p>
<p>精确到设计稿的1px</p>
<p><strong>耗子</strong></p>
<p>除了为了ie6的dirty hack<br>我们没有理由再用到它</p>
<p><strong>张继霞</strong></p>
<p>按区块</p>
<p><strong>龙泉寺 - 小白</strong></p>
<p>如果是项目页面 考虑到哪些是公用的样式。哪些是单独的。然后CSS文件做个区分</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p><strong>龙泉寺 - 小白</strong></p>
<p>兼容的话。我工作这边 基本要兼容包括IE6的十个浏览器吧。。</p>
<p><strong>张继霞</strong></p>
<p>10个浏览器？</p>
<p><strong>路小平</strong></p>
<p>我们是用less封装了一些公用方法</p>
<p><strong>耗子</strong></p>
<p>css中有些是和布局相关的<br>比如两栏式布局，这要定义一些css属性</p>
<p>它们你们是写在模块的id上呢<br>还是独立地写个layout呢</p>
<p><strong>耗子</strong></p>
<p>小路说的用less写一些共公的基础方法<br>这能减少一些犯错误的机会<br>但还不是解耦</p>
<p><strong>路小平</strong></p>
<p>后者，布局和功能分开</p>
<p><strong>龙泉寺 - 小白</strong></p>
<p>独立的一个layout 或者Global</p>
<p><strong>张继霞</strong></p>
<p>两种方式都干过，独立的layout更合适</p>
<p><strong>耗子</strong></p>
<p>嗯<br>一般layout怎么写呢</p>
<p><strong>耗子</strong></p>
<p>layout里的功能模块又怎么写</p>
<p><strong>龙泉寺 - 小白</strong></p>
<p>解耦 是什么</p>
<p><strong>耗子</strong></p>
<p>css命名有什么样的习惯或者规范呢？</p>
<p><strong>龙泉寺 - 小白</strong></p>
<p>每个前端都有自己的一个命名习惯。但如果一起开发一个项目 或者公司的话。会有自己的一套命名规则</p>
<p><strong>耗子</strong></p>
<p>每个前端都有，而不是公司遵守一套么</p>
<p><strong>耗子</strong></p>
<p>那好<br>我就说下我平时写css的习惯吧</p>
<p><strong>龙泉寺 - 小白</strong></p>
<p>比如 顶部导航。有的人喜欢 NavTop  有的人喜欢nav_top</p>
<p><strong>耗子</strong></p>
<p>我会把页面按功能，而不是ui分</p>
<p><strong>耗子</strong></p>
<p>比如一个主导航<br>这个我会独立写一个css文件，一段html</p>
<p><strong>耗子</strong></p>
<p>它的类名以m-main-nav开头，我不会取名叫navtop</p>
<p>因为它不一定就会永远呆在top上啊</p>
<p>否则哪天它不在页面顶部，我会有强迫症的</p>
<p><strong>小强</strong></p>
<p>按功能分也会有问题</p>
<p><strong>耗子</strong></p>
<p>另一个为什么我会以m-开头呢</p>
<p>这是我的一个习惯，表示它是一个通用的module</p>
<p><strong>耗子</strong></p>
<p>小强可以说说哪些问题，我们一起探讨</p>
<p><strong>耗子</strong></p>
<p>这样一个module它可能出现在整个网站的任何地方<br>它本身呈现出来的样子应该是个宽度100%自适应的block元素形式</p>
<p>它不应该含有float、margin、position等影响周围邻居的不和谐行为</p>
<p><strong>耗子</strong></p>
<p>然后再是layout</p>
<p>layout不涉及具体业务<br>只搭一个脚手架</p>
<p>然后将自适应的module填进去</p>
<p>为什么我们在页面布局时喜欢div?</p>
<p>因为它默认是个没有margin，没有position float的块状盒子</p>
<p><strong>小强</strong></p>
<p>模块不外挂定位是一个很好的做法</p>
<p><strong>张继霞</strong></p>
<p>layout不涉及具体业务→那宽度、浮动这些放哪呢？</p>
<p><strong>耗子</strong></p>
<p>会写一些共公的类<br>如<br>.-clearfix<br>.-fl<br>.-fr<br>.-m-t-5<br>.-m-r-5<br>.-m-r-10</p>
<p><strong>耗子</strong></p>
<p>以-开头也是我的一个习惯<br>表示是css框架提供的方法</p>
<p><strong>耗子</strong></p>
<p>bootstrap中也定义了一套脚手架</p>
<p>如 .row<br>.span1<br>.span2<br>….<br>.span12</p>
<p><strong>张继霞</strong></p>
<p> 后面的数值有具体的意义吗？</p>
<p><strong>耗子</strong><br>嗯<br>比如 .m-t-5<br>我用来表示margin-top:5px</p>
<p><strong>张继霞</strong></p>
<p>耦合了吧？</p>
<p><strong>路小平</strong></p>
<p>这样有问题，哪天不mr5了，还要改html</p>
<p><strong>小强</strong></p>
<p>定位的东西用这些公共属性</p>
<p><strong>耗子</strong></p>
<p>嗯，但我将耦合的部分都抽出来了，这样与布局相关的东西都在layout里了</p>
<p><strong>耗子</strong></p>
<p>而不会出现在module里</p>
<p><strong>耗子</strong></p>
<p>如果从两栏变三栏<br>我们要改的就是layout.css<br>和html脚手架</p>
<p><strong>耗子</strong></p>
<p>由于里面的module都是自适应宽的<br>所以很容易适应</p>
<p>可能这种布局对追求极限语义的人来说可能接受不了</p>
<p>但是在工作过程中我觉得它是最能快速迭代的方式</p>
<p><strong>耗子</strong></p>
<p>另外还有一种耦合<br>可能大家没有考虑到，或者拿它没辙</p>
<p>我们经常会使用一些css spirit技术 将很多小图片拼合成一张大图</p>
<p><strong>耗子</strong></p>
<p>而这里面有些小ico<br>随着业务变更不需要了<br>这时候我们不敢删了</p>
<p>因为删了，别的ico都要重新定位</p>
<p>还有css</p>
<p>比如首页某个公告模块领导说不要了</p>
<p>然后我们就把那块html注释了</p>
<p>但与之相关的图片和css却根本记不清在哪儿的哪一段</p>
<p>不敢删或者懒得删</p>
<p>这也是耦合</p>
<p><strong>小强</strong></p>
<p>关于这个我有一个方案</p>
<p>就是按方格子来放</p>
<p>这里还附带了一个全局配置sprite定位的东西</p>
<p><strong>耗子</strong></p>
<p>方格子也无法解决一个模块下架后把与它相关的图标也下架</p>
<p><strong>小强</strong></p>
<p>之前做过一个实践，将所有sprite的图标用一个css单独存放</p>
<p><strong>小强</strong></p>
<p>如果项目大的话可以一个sprite放一个css</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p>这是一种方案<br>适合全站通用的ico，<br>bootstrap也有个专门的sprites.less来解决全部的图标</p>
<p>但这种方法应该被淘汰</p>
<p><strong>小强</strong></p>
<p>你要删掉一个图标</p>
<p>只要收索有没有相关的css样式被引用</p>
<p>就可以干净的删除了</p>
<p><strong>路小平</strong></p>
<p>icon按16<em>16 32</em>32这样的规格存放</p>
<p><strong>小强</strong></p>
<p>sprite中留出来地方还可以放新加的图标</p>
<p><strong>耗子</strong></p>
<p>其实我想说sprites技术是我们造成前端耦合的一个常见问题</p>
<p><strong>耗子</strong></p>
<p>全站搜索，全靠人肉么？</p>
<p><strong>耗子</strong></p>
<p>我的原则就是不使用sprites雪碧图技术！</p>
<p><strong>耗子</strong><br>所有与模块相关的图片都放在模块自己的文件夹里，包括它要用到的小ico</p>
<p>要删的时候把这个文件夹删了</p>
<p><strong>小强</strong></p>
<p>高内聚！</p>
<p><strong>耗子</strong></p>
<p>关于怎么在线上环境中合成拼图<br>可以用一些工具去自动化做这种事<br>而不是人去做</p>
<p><strong>耗子</strong></p>
<p>好了<br>刚讲到css与html的解耦</p>
<p>接下来我们聊一聊js与html的解耦吧</p>
<p>谁来说说呢</p>
<p><strong>小妹</strong></p>
<p>我来说说吧</p>
<p>我一般的基础的做法是 html里面一般不加onclick onchange等的事件</p>
<p>然后js放到js文件里面</p>
<p>js代码也不放到html页面上</p>
<p><strong>耗子</strong></p>
<p>对<br>这是一方面</p>
<p>在dom里写onclick这样的属性</p>
<p>将函数名与事件耦合了</p>
<p>onclick = xxx<br>xxx必须是一个全局函数或者一个暴露在window下的对象</p>
<p>并且必须是具名的</p>
<p><strong>小强</strong></p>
<p>我也说一点，用css的钩子</p>
<p><strong>小强</strong></p>
<p>就是一个class是j-<em>*</em></p>
<p><strong>耗子</strong></p>
<p>嗯，小强说下什么是css钩子吧</p>
<p><strong>路小平</strong></p>
<p>嗯我们也是</p>
<p><strong>小强</strong></p>
<p>然后在一个地方通过选择器去绑定</p>
<p><strong>耗子</strong></p>
<p>呵呵<br>这是个还不错的方法,豆瓣很多地方在用</p>
<p><strong>小强</strong></p>
<p>其实这和onclick没有本质的区别</p>
<p><strong>小强</strong></p>
<p>从解耦的角度来说</p>
<p><strong>耗子</strong></p>
<p>不过有个原则<br>j-开头的css不要在上面作用样式</p>
<p><strong>小强</strong></p>
<p>嗯</p>
<p><strong>小强</strong></p>
<p>还有类似的data-**</p>
<p><strong>耗子</strong></p>
<p>样式与行为用不同的class进行标示</p>
<p><strong>耗子</strong></p>
<p>我一般用 data-做事件钩子，这更符合规范</p>
<p><strong>刘林</strong></p>
<p>讨论得好深了</p>
<p><strong>耗子</strong></p>
<p>并且一个dom节点上你是无法保证只有一个classname的<br>你只能使用removeClass addClass这样的jq提供的方式操作其中一个class<br>如果全删了，可能样式就挂了</p>
<p><strong>小强</strong></p>
<p>事件的钩子我们用event-**是不是更好一点</p>
<p><strong>耗子</strong></p>
<p>data- 是规范的方式</p>
<p><strong>小强</strong></p>
<p>data我习惯放数据</p>
<p><strong>小强</strong></p>
<p>呵呵，event是我突然想到的。。。</p>
<p><strong>耗子</strong></p>
<p>其实这个没有特定的<br>google  的angularjs框架就是用的ng-前缀</p>
<p><strong>耗子</strong></p>
<p>不冲突不大众就好，比如用项目或者公司的名字缩写</p>
<p><strong>耗子</strong></p>
<p>jq绑定事件大家是不是喜欢</p>
<p>$(xxx).click(function(){….})</p>
<p>你们这样用的？</p>
<p><strong>小妹</strong></p>
<p>是啊 不存在事件委托的话 是这样绑定的</p>
<p><strong>耗子</strong></p>
<p>嗯<br>是有这个问题</p>
<p><strong>耗子</strong></p>
<p>这在需要动态生成的页面上就不好使了</p>
<p><strong>耗子</strong></p>
<p>内联的 onclick反而没有这个问题</p>
<p><strong>云涛</strong></p>
<p>耗子 backbone.js 有接触吗</p>
<p><strong>耗子</strong></p>
<p>呵呵，是吧？</p>
<p><strong>小妹</strong></p>
<p>嗯 是的</p>
<p><strong>耗子</strong></p>
<p>但是还是不推荐在dom里写onclick</p>
<p><strong>小妹</strong></p>
<p>一般确定没有动态生成div的时候 是习惯直接用。click</p>
<p><strong>小强</strong></p>
<p>动态生成的用on</p>
<p><strong>小妹</strong></p>
<p>嗯</p>
<p><strong>小强</strong></p>
<p>jq1.9已经把live飞废弃了</p>
<p><strong>小妹</strong></p>
<p>bind 或者delegate底层都是用on</p>
<p><strong>耗子</strong></p>
<p>呵呵</p>
<p><strong>耗子</strong></p>
<p>jq的一些方法以后可以专门讨论一下</p>
<p><strong>小妹</strong></p>
<p>是不是我有说的不对的地方？</p>
<p><strong>耗子</strong></p>
<p>其实对于单页面应用jq的这种方式已经很不方便了</p>
<p><strong>小强</strong></p>
<p>哦，有什么好的解决方案</p>
<p><strong>耗子</strong></p>
<p>没<br>小妹说得很对</p>
<p><strong>云涛</strong></p>
<p>单页面 应用选jquery 作为主框框，估计还是难度较高哦</p>
<p><strong>耗子</strong></p>
<p>这个云涛说的backbone.js里有解决方案</p>
<p><strong>耗子</strong></p>
<p>jq可以与backbone共用<br>不过已经沦落成dom操作工具了</p>
<p><strong>云涛</strong></p>
<p>jquery 的dom 选择工具被独立出来，作为一个项目</p>
<p><strong>耗子</strong></p>
<p>总结一下今天的内容吧</p>
<p>1、不在css里用表达式，除了解决一些ie6的dirty hack<br>2、将布局样式与模块样式分离<br>3、开发中不使用雪碧图，这个交给集成工具<br>3、不在dom中内联script<br>3、呃我不会数数了</p>
<p><strong>耗子</strong></p>
<p>今天时间刚刚好<br>我没有拖堂</p>
]]></content>
    <summary type="html"><![CDATA[<p><strong>耗子</strong></p>
<p>今晚讲解耦</p>
<p><strong>张继霞</strong></p>
<p>弱弱的问一句是第五章吗？</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p><strong>张继霞</strong></p>
<p>好，我临时抱会儿佛脚预习去</p>
<p>]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[【共学】《编写可维护的javascript》03-变量、函数和运算符]]></title>
    <link href="http://haozi.de/post/03-%E5%8F%98%E9%87%8F%E3%80%81%E5%87%BD%E6%95%B0%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://haozi.de/post/03-变量、函数和运算符/</id>
    <published>2013-06-26T17:58:33.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p><strong>耗子</strong></p>
<p>今天我们一起学习的是第四章<br>变量、函数和操作符</p>
<p><strong>耗子</strong></p>
<p>先大家从变量和函数的声明开始吧</p>
<p><strong>耗子</strong></p>
<p>前几章中我们也或多或少地提到了js中变量和函数声明的一些坑</p>
<p><strong>耗子</strong></p>
<p>那么大家谁能来回忆总结下呢<br><a id="more"></a></p>
<p><strong>刘林</strong></p>
<p>var 貌似 后面的会自动成为全局变量</p>
<p><strong>耗子</strong></p>
<p>嗯,不过说得不对哦</p>
<p><strong>雪花</strong></p>
<p>var 语句可以放在脚本的任何地方</p>
<p><strong>耗子</strong></p>
<p>对，@雪花 说得对,但是建议大家把var 放在脚本的任意位置</p>
<p><strong>黄朋全</strong></p>
<p>for in</p>
<p><strong>小妹</strong></p>
<p>我来说一点哈</p>
<p><strong>耗子</strong></p>
<p>嗯 @小妹 来说说</p>
<p><strong>小妹</strong></p>
<p>var a=b=10;<br>b就被全局变量了</p>
<p><strong>耗子</strong></p>
<p>嗯，@小妹 说得对</p>
<p><strong>雪花</strong></p>
<p>var 语句被置顶</p>
<p><strong>耗子</strong></p>
<p>雪花的记性很好</p>
<p><strong>小妹</strong></p>
<p>对</p>
<p><strong>耗子</strong></p>
<p>一个作用域中<br>js引擎会把所有的var声明和具名函数的声音都提前</p>
<p><strong>小妹</strong></p>
<p>嗯 var funcA = function(){}这样的就是解释到这行才执行</p>
<p><strong>小妹</strong></p>
<p>是匿名函数</p>
<p><strong>小妹</strong></p>
<p>耗子 是吗？</p>
<p><strong>耗子</strong></p>
<p>对</p>
<p><strong>耗子</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a();</div><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'a'</span>)}</div></pre></td></tr></table></figure>

<p>这样的代码中，是会报错的，</p>
<p>但是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">b();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">()</span></span>{alert(<span class="string">'b'</span>)};</div></pre></td></tr></table></figure>

<p>这段代码却是能正常跑的</p>
<p><strong>小妹</strong></p>
<p>嗯</p>
<p><strong>小妹</strong></p>
<p>报a是undefined的错？</p>
<p><strong>耗子</strong></p>
<p>a是undefined，undefined不是函数，不能使用()运算符</p>
<p><strong>小妹</strong></p>
<p>是的</p>
<p><strong>耗子</strong></p>
<p>@黄朋全，java里这么写b能跑么？</p>
<p><strong>黄朋全</strong></p>
<p>编译都通不过</p>
<p><strong>耗子</strong></p>
<p>哦，明了</p>
<p><strong>黄朋全</strong></p>
<p>必须先声明，不声明怎么用？</p>
<p><strong>耗子</strong></p>
<p>将流程代码写在开头，大量的小方法写在后面，这会让代码看上去易读，但不提倡，js里有其他的方式可以实现这种风格。</p>
<p><strong>牛牛</strong></p>
<p>在类域里面 和函数域里面 还有区别。在类范围里面 书写前后没关系 不过在方法里面必须先声明才能用了</p>
<p><strong>小妹</strong></p>
<p>js 具名函数的声明不一定要放在调用前面</p>
<p><strong>耗子</strong></p>
<p><strong>耗子</strong></p>
<p>嗯<br>@牛牛 这点js也有类似的，虽然目前的js里并没有真正的类的概念，但是可以模拟出经典的类<br>就是对象的成员方法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    init: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="comment">// TODO</span></div><div class="line">        <span class="keyword">this</span>.a();</div><div class="line">        <span class="comment">// TODO</span></div><div class="line">        <span class="keyword">this</span>.b();</div><div class="line">    },</div><div class="line">    a: func...,</div><div class="line">    b: func...</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这种风格可见于jq的源码中，是一种推荐的方式，会让代码易读</p>
<p><strong>黄朋全</strong></p>
<p>java开发的风格不是都这样吗</p>
<p><strong>黄朋全</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function doSomething() {</div><div class="line">    <span class="keyword">var</span> <span class="literal">result</span>;</div><div class="line">    <span class="keyword">var</span> value;</div><div class="line">    <span class="literal">result</span> = <span class="number">10</span> + value;</div><div class="line">    value = <span class="number">10</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>像这个方法的执行结果是什么？</p>
<p><strong>黄朋全</strong></p>
<p>为什么没有赋值，就可以运算？</p>
<p><strong>耗子</strong></p>
<p>NaN,</p>
<p>@黄朋全 这种写法是不推荐的,代码可以正常运行，但结果可能不是你期待的</p>
<p><strong>小妹</strong></p>
<p>@黄朋全 那个函数执行的结果一个是NaN</p>
<p><strong>黄朋全</strong></p>
<p>java里是直接报错的。编译都通不过</p>
<p><strong>耗子</strong></p>
<p>不会报错，但极不推荐先使用后声明</p>
<p><strong>黄朋全</strong></p>
<p>局部变量必须先赋值。<br>类变量才会有默认值。</p>
<p><strong>耗子</strong></p>
<p>只声明，不赋值就会有默认值了</p>
<p><strong>小妹</strong></p>
<p>对 默认值是undefined</p>
<p><strong>黄朋全</strong></p>
<p>任何地方声明都有默认值吗<br>所有的默认值都是undefined吗</p>
<p><strong>小妹</strong></p>
<p>是的，所有的声明但不赋值，都会有默认值undefined，undefined与自然数相加，结果就是NaN</p>
<p><strong>耗子</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span>;</div><div class="line">function <span class="func"><span class="keyword">func</span></span> () {</div><div class="line">    alert(a);</div><div class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">};</div><div class="line"><span class="func"><span class="keyword">func</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>

<p>你们觉得会弹出啥?</p>
<p><strong>黄朋全</strong></p>
<p>1</p>
<p><strong>小妹</strong></p>
<p>是2</p>
<p><strong>耗子</strong></p>
<p>都不对<br>是undefined</p>
<p><strong>小妹</strong></p>
<p>啊 是undefined</p>
<p>我错了</p>
<p><strong>黄朋全</strong></p>
<p>不明白</p>
<p><strong>小妹</strong></p>
<p>又是个坑</p>
<p><strong>耗子</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">function <span class="func"><span class="keyword">func</span><span class="params">()</span></span>{</div><div class="line">   alert(a);</div><div class="line">   <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">};</div><div class="line"><span class="func"><span class="keyword">func</span><span class="params">()</span></span>;</div><div class="line">alert(a);</div></pre></td></tr></table></figure>

<p>这两次会弹出啥呢</p>
<p><strong>小妹</strong></p>
<p>undefined 和 1吧</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p><strong>牛牛</strong></p>
<p>我觉得和之前一样</p>
<p><strong>耗子</strong></p>
<p>这么写js都不会出现脚本错误，但这些都会造成坑，所以要和大家说js里怎么写才是正确的</p>
<p><strong>小妹</strong></p>
<p>如果程序复杂点，查坑就不容易了</p>
<p><strong>小妹</strong></p>
<p>@耗子</p>
<p><strong>小妹</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    alert(a);</div><div class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这个是不会先解释 var a=2；这一句的？</p>
<p><strong>耗子</strong></p>
<p>同一个作用域中所有的变量和函数的声明都会前置，但是变量的值都是undefined,声明和赋值是两个过程，变量声明和具名函数会前置，但变量赋值却是按上下文来的</p>
<p><strong>黄朋全</strong></p>
<p>牢记变量的作用域，声明赋值提前，使用在后。</p>
<p><strong>牛牛</strong></p>
<p>function func(){<br>   a=2;<br>   alert(a);<br>   var a;<br>};<br>等价于</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> a;</div><div class="line">    a = <span class="number">2</span>;</div><div class="line">    alert(a);</div><div class="line">};</div></pre></td></tr></table></figure>

<p>是么?</p>
<p><strong>耗子</strong></p>
<p>嗯，@牛牛 说对了，而且这个a是局部变量，不会变成全局变量</p>
<p><strong>刘林</strong></p>
<p>是啊，迷惑人啊</p>
<p>讲讲正确的东西该怎么做呗</p>
<p>错误的方法太多了</p>
<p><strong>耗子</strong></p>
<p>正确的作法是在一个function的第一行开始把这个function里用到的所有变量、具名函数都写在最前面。</p>
<p>推荐写先变量声明&amp;&amp;赋值，再写具名函数</p>
<p>一类相关的函数建议包装在一个对象中。</p>
<p>记住这些话就好了，糟粕的东西没必要多说。</p>
<p><strong>耗子</strong></p>
<p>同一个作用域里，<br>同一个变量如果被var 了多次，是不会了错的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) {</div><div class="line">   var a = <span class="number">1</span>;</div><div class="line">} <span class="keyword">else</span> {</div><div class="line">   var a = <span class="number">2</span>;</div><div class="line">}</div><div class="line">// 或者</div><div class="line"><span class="keyword">while</span> (condition) {</div><div class="line">    var a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>但这种在条件和循环中声明变量都是不对的</p>
<p><strong>黄朋全</strong></p>
<p>为什么</p>
<p><strong>牛牛</strong></p>
<p>条件语句的括号没有单独的作用域？</p>
<p><strong>牛牛</strong></p>
<p>有点变态</p>
<p><strong>黄朋全</strong></p>
<p>{}不是作用域吗</p>
<p><strong>小妹</strong></p>
<p>不是，因为js没有块作用域</p>
<p><strong>耗子</strong></p>
<p>js里只有函数有作用域和全局作用域</p>
<p><strong>小妹</strong></p>
<p>但是函数会在调用结束后 把局部变量销毁 但是也有特殊情况</p>
<p><strong>小妹</strong></p>
<p>闭包。。。我是不是扯远了</p>
<p><strong>牛牛</strong></p>
<p>没有块作用域 有点变态</p>
<p><strong>黄朋全</strong></p>
<p>闭包我知道。学过。哈哈</p>
<p><strong>耗子</strong></p>
<p>哈<br>闭包更绕了<br>改天进阶的时候再说吧</p>
<p><strong>黄朋全</strong></p>
<p>当年给讲了两个小时才明白。</p>
<p><strong>牛牛</strong></p>
<p>闭包？</p>
<p><strong>小妹</strong></p>
<p>下一个话题 。。。</p>
<p><strong>耗子</strong></p>
<p>闭包是js非常有用的一个特性，不过别的语言可能很少用到，非常绕，今天就不展开了。</p>
<p><strong>小妹</strong></p>
<p>今天的重点华丽的绕过闭包<br>嘿嘿</p>
<p><strong>牛牛</strong></p>
<p>好把</p>
<p><strong>立即调用函数</strong></p>
<p><strong>耗子</strong></p>
<p>下一个讲立即调用函数</p>
<p><strong>耗子</strong></p>
<p>@小妹 你来说说吧</p>
<p><strong>小妹</strong></p>
<p>好 我试试</p>
<p><strong>小妹</strong></p>
<p>立即调用函数就是形如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"></div><div class="line">})()；</div></pre></td></tr></table></figure>

<p>用一对括号把function包起来，然后又一对括号让它立即运行</p>
<p>嘿嘿</p>
<p><strong>牛牛</strong></p>
<p>立即调用函数的作用是什么？</p>
<p><strong>耗子</strong></p>
<p>嗯<br>基本上所有的开源的库都有类似的结构<br>比如jq<br>整个代码都包在<br>(function(window, undefined){</p>
<p>})(window);<br>里</p>
<p>为什么要这么写呢？</p>
<p><strong>小妹</strong></p>
<p>我的理解是减少命名冲突，保护私有变量</p>
<p><strong>耗子</strong></p>
<p>嗯</p>
<p><strong>牛牛</strong></p>
<p>其他的用途呢</p>
<p><strong>耗子</strong></p>
<p>就是创建一个作用域，减少和外部代码的冲突</p>
<p>另外大部分局部变量会在运行后销毁，节省内存</p>
<p><strong>耗子</strong></p>
<p>(function(window, undefined){<br>})(window);<br>说下jq的这个结构吧</p>
<p>这相当于声明了一个function，并立即把window当成参数传给了形参window，运行掉了</p>
<p><strong>小妹</strong></p>
<p>嗯</p>
<p><strong>耗子</strong></p>
<p>@小妹<br>为什么jq要这么写呢</p>
<p><strong>耗子</strong></p>
<p>直接调用全局的window不行么</p>
<p><strong>小妹</strong></p>
<p>哦 这个不太明白</p>
<p><strong>小妹</strong></p>
<p>防止冲突？</p>
<p>使window唯一？</p>
<p>？</p>
<p><strong>小妹</strong></p>
<p>还是说函数执行了 挂在window下的全局变量也 就消失了？</p>
<p><strong>耗子</strong></p>
<p>不是</p>
<p>只是为了代码压缩时能省一些字节</p>
<p>压缩后局部变量可以简化</p>
<p>最后变成 (function(a){})(window);</p>
<p><strong>小妹</strong></p>
<p>哦 原来是这样</p>
<p>学了一个知识点。。</p>
<p><strong>耗子</strong></p>
<p>如果是全局变量或者对象的成员方法，<br>压缩工具担心别的地方会被调用</p>
<p>就不敢乱改变量名</p>
<p><strong>小妹</strong></p>
<p>哦</p>
<p><strong>小妹</strong></p>
<p>那这样的话 全局变量怎么压缩呢</p>
<p><strong>耗子</strong></p>
<p>不能压缩，不过也有极限的压缩工具分析全站代码后敢压，但这可能不够安全。</p>
<p><strong>小妹</strong></p>
<p>这种是把立即执行函数里的window压缩成a了？</p>
<p><strong>耗子</strong></p>
<p>嗯<br>是的，形参都是局部变量，可以放心地压。</p>
<p>如果你代码里要多次使用window变量就能省出不少字节了</p>
<p><strong>小妹</strong></p>
<p>哦 说个题外话 有关js压缩的问题</p>
<p><strong>小妹</strong></p>
<p>我发现压缩后的js 函数名都没有给压缩 原来是因为函数名要被调用的</p>
<p><strong>耗子</strong></p>
<p>其实除了用括号包住function让函数自运行外</p>
<p>还有一些变态的写法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">+ <span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">{</span></span></div><div class="line"></div><div class="line">}<span class="params">()</span>;</div><div class="line"></div><div class="line">-<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">{</span></span></div><div class="line"></div><div class="line">}<span class="params">()</span>;</div><div class="line"></div><div class="line">~ <span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">{</span></span></div><div class="line"></div><div class="line">}<span class="params">()</span>;</div><div class="line"></div><div class="line">void <span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">{</span></span></div><div class="line"></div><div class="line">}<span class="params">()</span>;</div><div class="line">...</div></pre></td></tr></table></figure>

<p>也能立即运行,但不推荐，bootstrap的脚本库里这么写的，我认为属于歪招，会影响返回值</p>
<p><strong>小妹</strong></p>
<p>哦 这样也可以啊</p>
<p>这种算规范的写法吗</p>
<p>还是属于奇技淫巧？</p>
<p>发现好多奇葩的技巧 在js里面</p>
<p>但不知道算不算规范 用的都不安心</p>
<p><strong>耗子</strong></p>
<p>好<br>总结下立即调用函数吧</p>
<p><strong>它是js里最常见的一种写法，能保护作用域减少冲突</strong></p>
<p><strong>黄朋全</strong></p>
<p>最简单最安心</p>
<p><strong>小妹</strong></p>
<p>嗯 是的 我现在一般开始写个js 都乣这样写：<br>;(function($){<br>})(window.jQuery)</p>
<p><strong>耗子</strong></p>
<p>小妹这是个好习惯，不过现在amd和cmd的规范里有更好的方法，理论上可以0全局变量。你前面那个分号是为了防止上一个js文件合并时和上一句有冲突，不过现在的压缩工具都聪明了，呵呵。</p>
<p><strong>小妹</strong></p>
<p>嘿嘿 是老大给逼出来的</p>
<p><strong>相等比较</strong></p>
<p><strong>耗子</strong></p>
<p>下一个说相等比较<br>js里有 ==和===</p>
<p>一句话<br>永远不要用 == 而要用===,<br>它另一对兄弟也是 ，永远使用 !== 不使用!=</p>
<p><strong>黄朋全</strong></p>
<p>php也有===</p>
<p><strong>小妹</strong></p>
<p>哦 记住了 耗子老大 这个非常重要</p>
<p><strong>耗子</strong></p>
<p>嗯弱类型语言</p>
<p><strong>黄朋全</strong></p>
<p>java就没有</p>
<p><strong>小妹</strong></p>
<p>我也要改改我那经常用==的坏毛病了</p>
<p><strong>黄朋全</strong></p>
<p>=是赋值，==是比较</p>
<p><strong>耗子</strong></p>
<p>嗯<br>所有写java的程序员可能会带上这样的习惯<br>但在js里这是不好的习惯</p>
<p><strong>小妹</strong></p>
<p>但是好像不推荐用===和undefined来比较啊</p>
<p><strong>小妹</strong></p>
<p>@耗子</p>
<p><strong>耗子</strong></p>
<p>为什么不推荐</p>
<p><strong>小妹</strong></p>
<p>我没太看仔细 是乌龟书上说的 好像可以用！来代替</p>
<p><strong>小妹</strong></p>
<p>对了</p>
<p><strong>耗子</strong></p>
<p>这种情况其实我觉得蛮好<br>不过有点臃肿，看具体情况吧，用!可能0和’’也能case到，但不一定是你期待的</p>
<p><strong>小妹</strong></p>
<p>记起来了</p>
<p><strong>耗子</strong></p>
<p>大部分情况下我们不用区分undfined和null<br>所以减少些代码<br>可以</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="variable">a =</span>== undefined || <span class="variable">a =</span>== <span class="constant">null</span>)</div></pre></td></tr></table></figure>

<p>会被简写成</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="variable">a =</span>= <span class="constant">null</span>)</div></pre></td></tr></table></figure>

<p>甚至</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!! <span class="operator">a</span>)</div></pre></td></tr></table></figure>

<p>不过这有时候是有问题的<br>如果a是0或者flase或者’’，也是能通过的</p>
<p><strong>耗子</strong></p>
<p>jq里只在比较null的情况下会使用==否则都是===</p>
<p><strong>小妹</strong></p>
<p>哦 记住了</p>
<p><strong>耗子</strong></p>
<p>好</p>
<p>再说下一个</p>
<p><strong>eval</strong></p>
<p><strong>耗子</strong></p>
<p>乌龟书和道格拉斯爷爷的建议都是永远不使用eval</p>
<p><strong>小妹</strong></p>
<p>有例外</p>
<p><strong>小妹</strong></p>
<p>处理ajax json字符串返回值的时候</p>
<p><strong>小妹</strong></p>
<p>可以用</p>
<p><strong>耗子</strong></p>
<p>这个可以用JSON.parse</p>
<p><strong>牛牛</strong></p>
<p>袄</p>
<p><strong>小妹</strong></p>
<p>低端浏览器</p>
<p><strong>小妹</strong></p>
<p>不支持JSON.</p>
<p><strong>周娜</strong></p>
<p>这种情况，我也是一直用eval呢</p>
<p><strong>耗子</strong></p>
<p>你可以封一个方法<br>把eval放在这个方法里</p>
<p>然后别的地方不再使用eval</p>
<p><strong>小妹</strong></p>
<p>这个怎么封</p>
<p><strong>耗子</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="built_in">window</span>.JSON === <span class="string">'undefined'</span> && (<span class="built_in">window</span>.JSON = {</div><div class="line">    parse: <span class="function"><span class="keyword">function</span><span class="params">(jsonString)</span></span>{</div><div class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>( <span class="string">'('</span> + jsonString + <span class="string">')'</span>);</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>当然，这会有一些安全风险</p>
<p><strong>小妹</strong></p>
<p>哦哦</p>
<p><strong>耗子</strong></p>
<p>这样只会在一个很小的范围内使用eval<br>而不会滥用,</p>
<p><strong>小妹</strong></p>
<p>嗯 好方法</p>
<p><strong>周娜</strong></p>
<p>能说说为什么不能直接用eval吗？</p>
<p><strong>小妹</strong></p>
<p>性能吧</p>
<p><strong>耗子</strong></p>
<p>嗯<br>1是性能， 2是安全， 3是作用域</p>
<p><strong>黄朋全</strong></p>
<p>eval是干嘛的</p>
<p><strong>牛牛</strong></p>
<p>在js里面执行另一段js代码</p>
<p><strong>小妹</strong></p>
<p>eval参数是字符串 可以立即执行参数里的代码</p>
<p><strong>黄朋全</strong></p>
<p>哦</p>
<p><strong>耗子</strong></p>
<p>eval可以运行一段字符串，js引擎不能预先知道结果，无法进行编译期优化</p>
<p><strong>牛牛</strong></p>
<p>我感觉倒不是安全问题</p>
<p><strong>黄朋全</strong></p>
<p>提供给别人攻击用的吗</p>
<p><strong>黄朋全</strong></p>
<p>主要还是安全问题吧</p>
<p><strong>小妹</strong></p>
<p>我感觉主要是性能问题</p>
<p><strong>牛牛</strong></p>
<p>这个只是一方面吧 主要是被放在字符串里的代码我觉得相对来说比较难调试</p>
<p><strong>牛牛</strong></p>
<p>而且那些 作用域 等问题</p>
<p><strong>牛牛</strong></p>
<p>可能更难控制</p>
<p><strong>耗子</strong></p>
<p>另一个问题是作用域</p>
<p>eval 函数会在当前作用域中执行一段 JavaScript 代码字符串。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">function <span class="func"><span class="keyword">func</span><span class="params">()</span></span> {</div><div class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">    eval('a = <span class="number">3</span>');</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">}</div><div class="line"><span class="func"><span class="keyword">func</span><span class="params">()</span></span>; <span class="comment">// 3</span></div><div class="line">a; <span class="comment">// 1</span></div></pre></td></tr></table></figure>

<p>但是 eval 只在被直接调用并且调用函数就是 eval 本身时，才在当前作用域中执行。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">function <span class="func"><span class="keyword">func</span><span class="params">()</span></span> {</div><div class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">    <span class="keyword">var</span> b = eval;</div><div class="line">    b('a = <span class="number">3</span>');</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">}</div><div class="line"><span class="func"><span class="keyword">func</span><span class="params">()</span></span>; <span class="comment">// 2</span></div><div class="line">a; <span class="comment">// 3</span></div></pre></td></tr></table></figure>

<p>我觉得是给别人注入式攻击提供了接口。</p>
<p><strong>耗子</strong></p>
<p>如果eval要解析的是一个不信任的源的时候就很危险了<br>另外eval还有几种其它的形式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="string">'string'</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">(<span class="string">'...'</span>)</span></span>;</div></pre></td></tr></table></figure>

<p>setTimeout和setInterval中这个’string’字符串总是在全局作用域中执行，因此 eval 在这种情况下没有被直接调用<br>这两种也都是不推荐使用的<br>另外像@牛牛 说的，查bug的行数也会出问题</p>
<p><strong>小妹</strong></p>
<p>嗯 耗子说的对</p>
<p><strong>牛牛</strong></p>
<p>不过这个提供了很强的动态特性</p>
<p><strong>耗子</strong></p>
<p>是的<br>eval的代码的动态性使得js引擎无法对它进行运行前优化，所以性能会损失</p>
<p><strong>简说下原始值和包装类型</strong></p>
<p><strong>耗子</strong></p>
<p>好<br>最后一个了<br>简说下原始值和包装类型</p>
<p><strong>耗子</strong></p>
<p>js里声明一个数组<br>可以这样<br>var arr = new Array();<br>arr[0] = 0,<br>arr[1] = 1;</p>
<p><strong>耗子</strong></p>
<p>任何时候不推荐这种写法</p>
<p><strong>耗子</strong></p>
<p>因为写成  var arr = [0, 1];<br>更易读</p>
<p><strong>耗子</strong></p>
<p>另外new Array还有一种不明确性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">比如 <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>) ; <span class="comment">// 得到的是 [undefined, undefined, undefined]而不是[3]</span></div><div class="line">但 <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>,<span class="number">4</span>); <span class="comment">// 得到的却是 [3, 4];</span></div></pre></td></tr></table></figure>

<p><strong>小妹</strong></p>
<p>嗯</p>
<p><strong>耗子</strong></p>
<p>同样的<br>也不建议使用<br>new Number();<br>new Object();<br>new String();</p>
<p><strong>耗子</strong></p>
<p>主要问题一是代码变得臃肿，二是用typeof运算得到的全是’object’,<br>毫无意义的结果.js中可以动态地将原始值转化成包装类型<br>如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">'haozi'.<span class="built_in">toString</span>();</div><div class="line">['haozi'].pop();</div><div class="line">{name: 'haozi'}.valueOf();</div><div class="line"></div><div class="line"><span class="comment">// 数字有个bug，直接</span></div><div class="line"><span class="number">5</span>.<span class="built_in">toString</span>(); <span class="comment">//会报语法错误，</span></div><div class="line">但是可以</div><div class="line">(<span class="number">5</span>).<span class="built_in">toString</span>();</div><div class="line"><span class="number">5</span>..<span class="built_in">toString</span>();</div><div class="line"><span class="number">5.0</span>.<span class="built_in">toString</span>();</div></pre></td></tr></table></figure>

<p>所以说他们也都是对象，<br>js里只有null和undefined不是对象</p>
<p><strong>小妹</strong></p>
<p>嗯<br><strong>开启严格模式</strong></p>
<p><strong>耗子</strong></p>
<p>另外，推荐大家在代码里开启strict严格模式，能帮你发现很多问题，<br>只要在代码里写入<br>‘use strict’; 这么个字符串就可以了，这个不细讲了，大家用一用就知道了</p>
<p><strong>小妹</strong></p>
<p>感觉咱们越到后面js讨论越深入了<br>感谢耗子的慷慨分享<br>让我复习并学到了很多东西</p>
<p><strong>耗子</strong></p>
<p>好了<br>今天就到这里了<br>感恩大家一起来共学</p>
]]></content>
    <summary type="html"><![CDATA[<p><strong>耗子</strong></p>
<p>今天我们一起学习的是第四章<br>变量、函数和操作符</p>
<p><strong>耗子</strong></p>
<p>先大家从变量和函数的声明开始吧</p>
<p><strong>耗子</strong></p>
<p>前几章中我们也或多或少地提到了js中变量和函数声明的一些坑</p>
<p><strong>耗子</strong></p>
<p>那么大家谁能来回忆总结下呢<br>]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[node中实现sleep]]></title>
    <link href="http://haozi.de/post/node%E4%B8%AD%E5%AE%9E%E7%8E%B0sleep/"/>
    <id>http://haozi.de/post/node中实现sleep/</id>
    <published>2013-06-21T10:27:45.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p>由于nodejs中都是异步编程，node中没有类似php的sleep函数，如果想实现同步的hold，可以自己写个函数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span><span class="params">(milliSeconds)</span></span>{</div><div class="line">   <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">   <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &lt; startTime + milliSeconds);</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[解决NodeJS+Express模块的跨域访问控制问题：Access-Control-Allow-Origin]]></title>
    <link href="http://haozi.de/post/nodejs%E4%B8%AD%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://haozi.de/post/nodejs中的跨域问题/</id>
    <published>2013-06-20T01:37:52.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p>昨晚在chrome下测试<a href="https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS?redirectlocale=en-US&amp;redirectslug=HTTP_access_control" target="_blank" rel="external">cors</a>，虽然把header中设了Access-COntrol_allow-Origin为*，但仍然报</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XMLHttpRequest cannot <span class="built_in">load</span> <span class="keyword">http</span>://localhost:<span class="number">3000</span>/auth/xxx/xxx. Origin <span class="keyword">http</span>://localhost is <span class="operator">not</span> allowed <span class="keyword">by</span> Access-Control-Allow-Origin.</div></pre></td></tr></table></figure>

<p>的错。</p>
<p>折腾了半天，查了好多资料终于搞定:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> express <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="built_in">var</span> app <span class="subst">=</span> express();</div><div class="line"><span class="comment">//设置跨域访问</span></div><div class="line">app<span class="built_in">.</span><span class="literal">all</span>(<span class="string">'*'</span>, function(req, res, next) {</div><div class="line">    res<span class="built_in">.</span><span class="keyword">header</span>(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</div><div class="line">    res<span class="built_in">.</span><span class="keyword">header</span>(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"X-Requested-With"</span>);</div><div class="line">    res<span class="built_in">.</span><span class="keyword">header</span>(<span class="string">"Access-Control-Allow-Methods"</span>,<span class="string">"PUT,POST,GET,DELETE,OPTIONS"</span>);</div><div class="line">    res<span class="built_in">.</span><span class="keyword">header</span>(<span class="string">"X-Powered-By"</span>,<span class="string">' 3.2.1'</span>)</div><div class="line">    res<span class="built_in">.</span><span class="keyword">header</span>(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf-8"</span>);</div><div class="line">    next();</div><div class="line">});</div><div class="line"></div><div class="line">app<span class="built_in">.</span>get(<span class="string">'/auth/:id/:password'</span>, function(req, res) {</div><div class="line">    res<span class="built_in">.</span>send({id:req<span class="built_in">.</span><span class="keyword">params</span><span class="built_in">.</span>id, name: req<span class="built_in">.</span><span class="keyword">params</span><span class="built_in">.</span>password});</div><div class="line">});</div><div class="line"></div><div class="line">app<span class="built_in">.</span>listen(<span class="number">3000</span>);</div><div class="line">console<span class="built_in">.</span><span class="keyword">log</span>(<span class="string">'Listening on port 3000...'</span>);</div></pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[【共学】《编写可维护的javascript》02-注释 && 语句和表达式]]></title>
    <link href="http://haozi.de/post/02-%E6%B3%A8%E9%87%8A%20&&%20%E8%AF%AD%E5%8F%A5%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://haozi.de/post/02-注释 && 语句和表达式/</id>
    <published>2013-06-18T15:53:07.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p><strong>耗子 20:21:16</strong></p>
<p>今天准备和大家共修的是乌龟书的第二章和第三章</p>
<p><strong>耗子 20:21:34</strong></p>
<p>第二章主要讲的是注释怎么写</p>
<p><strong>耗子 20:21:54</strong></p>
<p>坑爹啊<br>谁不会写注释呢</p>
<a id="more"></a>

<p><strong>耗子 20:22:46</strong></p>
<p>一般在什么时候会写注释？</p>
<p><strong>朱雪花 20:22:51</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div></pre></td></tr></table></figure>

<p><strong>刘林 20:22:54</strong></p>
<p>不怎么写注释</p>
<p><strong>小妹 20:23:13</strong></p>
<p>我一般会在可能让看的人看不懂的地方注释</p>
<p><strong>黄朋全 20:23:18</strong></p>
<p>我现在写注释也少了。</p>
<p><strong>小妹 20:23:29</strong></p>
<p>还有就是//TODO</p>
<p><strong>黄朋全 20:23:31</strong></p>
<p>刚毕业的时候写代码行行注释</p>
<p><strong>耗子 20:24:29</strong></p>
<p>js里的注释是//行注释和/**/块注释</p>
<p><strong>刘林 20:24:57</strong></p>
<p>恩，更提倡哪种注释呢？</p>
<p><strong>耗子 20:25:20</strong></p>
<p>html里是<!-- -->注释，和xml一致<br>特别注意的是前后都是两个—(像一双小眼睛有木有)</p>
<p><strong>小妹 20:25:34</strong></p>
<p>哈哈 这个可以有</p>
<p><strong>耗子 20:26:02</strong></p>
<p>虽然浏览器大部分情况下能识别<br>&lt;!—— —-&gt; 这种不对称的情况</p>
<p><strong>耗子 20:26:27</strong></p>
<p>css里只能使用/**/块注释</p>
<p><strong>小妹 20:26:56</strong></p>
<p>嗯</p>
<p><strong>小妹 20:26:58</strong></p>
<p>是的</p>
<p><strong>黄朋全 20:27:33</strong></p>
<p>刘林，连接在此，自己下吧。</p>
<p><strong>耗子 20:27:47</strong></p>
<p>/*注释有个问题大家知道不</p>
<p><strong>黄朋全 20:28:28</strong></p>
<p>这个注释可以在html里面用吗</p>
<p><strong>耗子 20:28:40</strong></p>
<p>不可以</p>
<p><strong>耗子 20:29:50</strong></p>
<p>/**/块注释有时候会和正则冲突<br>导致不对闭合</p>
<p><strong>耗子 20:30:20</strong></p>
<p>道格拉斯爷爷是提倡全部使用单行注释的</p>
<p><strong>刘林 20:31:47</strong></p>
<p>为什么单行注释</p>
<p><strong>黄朋全 20:32:53</strong></p>
<p>什么情况下会这样？</p>
<p><strong>耗子 20:33:17</strong></p>
<p>道格拉斯爷爷觉得多行注释有时候会有嵌套问题<br>能用//一种方式就能解决就不引入两种方式<br>这是他的哲学</p>
<p><strong>黄朋全 20:33:50</strong></p>
<p>恩。</p>
<p><strong>耗子 20:34:05</strong></p>
<p>乌龟书上是两种注释都提倡使用的</p>
<p><strong>耗子 20:34:46</strong></p>
<p>块注释一般出现在方法的前面<br>或者在function的第二行，每一行空行</p>
<p><strong>黄朋全 20:35:53</strong></p>
<p>子豪的习惯呢</p>
<p><strong>黄朋全 20:35:54</strong></p>
<p>？</p>
<p><strong>耗子 20:36:17</strong></p>
<p>我一般是在function的上面使用多行注释</p>
<p><strong>牛牛 20:36:21</strong></p>
<p>现在是按注释先行得方法</p>
<p><strong>黄朋全 20:36:53</strong></p>
<p>大家一般的习惯是什么？</p>
<p><strong>牛牛 20:36:56</strong></p>
<p>嗯 方法 类 用多行 语句用单行</p>
<p><strong>耗子 20:37:22</strong></p>
<p>在一些不容易理解的赋值之后加上单行注释<br>如<br>var flag = true; // 为false是表示xx，为true时表示yy</p>
<p><strong>黄朋全 20:37:28</strong></p>
<p>我现在一般写doc注释比较多，一般注释不怎么写。</p>
<p><strong>牛牛 20:37:39</strong></p>
<p>现在都是先自动生成 然后填充一下</p>
<p><strong>刘林 20:37:42</strong></p>
<p>js 有类似于 doxygen 的工具么？</p>
<p><strong>刘林 20:37:56</strong></p>
<p>自动把注释生成文档的工具</p>
<p><strong>耗子 20:37:57</strong></p>
<p>嗯<br>今天主要想和大家一起学习的就是doc注释</p>
<p><strong>耗子 20:38:15</strong></p>
<p>朋全平时怎么使用doc的注释的呢</p>
<p><strong>黄朋全 20:38:47</strong></p>
<p>为了生成api文档而写。</p>
<p><strong>黄朋全 20:39:04</strong></p>
<p>如果不是api的话，一般不写。</p>
<p><strong>牛牛 20:39:24</strong></p>
<p>我都木有怎么用javadoc就是用它自动添加 而已</p>
<p><strong>黄朋全 20:39:24</strong></p>
<p>大多是通过命名和逻辑进行自解释。</p>
<p><strong>耗子 20:39:35</strong></p>
<p>你用javadoc生成文档么</p>
<p><strong>黄朋全 20:39:38</strong></p>
<p>恩</p>
<p><strong>耗子 20:39:59</strong></p>
<p>那说下里面的变量和要求吧<br>大家一起学学</p>
<p><strong>黄朋全 20:39:59</strong></p>
<p>我习惯用小方法组合。</p>
<p><strong>黄朋全 20:40:21</strong></p>
<p>通过方法名自解释</p>
<p><strong>耗子 20:41:23</strong></p>
<p>其实js的注释风格就是从javadoc传承来的</p>
<p><strong>刘林 20:41:40</strong></p>
<p>嗯，都大同小异啊</p>
<p><strong>耗子 20:42:24</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/<span class="keyword">*</span><span class="keyword">*</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@name Uploader</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@class 异步文件上传组件，支持ajax、flash、iframe三种方案</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@constructor</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@extends Base</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@requires UrlsInput</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@requires IframeType</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@requires  AjaxType</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@param {Object} config 组件配置（下面的参数为配置项，配置会写入属性，详细的配置说明请看属性部分）</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@param {Button} config.button *，Button按钮的实例</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@param {Queue} config.queue *，Queue队列的实例</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@param {String|Array} config.type *，采用的上传方案</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@param {Object} config.serverConfig *，服务器端配置</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@param {String} config.urlsInputName *，存储文件路径的隐藏域的name名</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@param {Boolean} config.isAllowUpload 是否允许上传文件</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@param {Boolean} config.autoUpload 是否自动上传</span></div><div class="line">    <span class="keyword">*</span> <span class="comment">@example</span></div><div class="line">    <span class="keyword">*</span> var uploader = new Uploader({button:button,queue:queue,serverConfig:{action:'test.php'}})</div><div class="line">    <span class="keyword">*</span>/</div></pre></td></tr></table></figure>

<p>这里我抠一段代码</p>
<p><strong>耗子 20:42:57</strong></p>
<p>这些@开头的关键字大家有研究没</p>
<p><strong>刘林 20:44:06</strong></p>
<p>看过一些</p>
<p><strong>刘林 20:44:26</strong></p>
<p>猜也能猜个大概</p>
<p><strong>耗子 20:44:51</strong></p>
<p>嗯<br>刘林师兄说说</p>
<p><strong>耗子 20:46:27</strong></p>
<p>@小妹，你们平时要求这么写过注释没</p>
<p><strong>耗子 20:46:43</strong></p>
<p><strong>小妹 20:46:44</strong></p>
<p>没这么要求 但是格式是要这样的</p>
<p><strong>小妹 20:46:55</strong></p>
<p>特别写函数的时候</p>
<p><strong>刘林 20:47:03</strong></p>
<p>param 是参数吧</p>
<p><strong>小妹 20:47:04</strong></p>
<p>参数和返回值等</p>
<p><strong>黄朋全 20:47:08</strong></p>
<p>比较常用的关键字是param return exception</p>
<p><strong>黄朋全 20:47:30</strong></p>
<p>extends在java里好像是不用的。</p>
<p><strong>耗子 20:47:46</strong></p>
<p>dojo的编程风格中把注释直接写在形参后面</p>
<p><strong>刘林 20:47:56</strong></p>
<p>requires 是依赖的包？</p>
<p><strong>黄朋全 20:47:59</strong></p>
<p>恩。</p>
<p><strong>耗子 20:48:14</strong></p>
<p>这段是jsdoc中的语法约定</p>
<p><strong>黄朋全 20:48:18</strong></p>
<p>回答的子豪的问题。</p>
<p><strong>耗子 20:48:53</strong></p>
<p><a href="http://usejsdoc.org上有说" target="_blank" rel="external">http://usejsdoc.org上有说</a></p>
<p><strong>耗子 20:49:31</strong></p>
<p>这段注释一般出现在一个类的开头</p>
<p><strong>耗子 20:49:37</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@name</span> ：类名</div></pre></td></tr></table></figure>

<p><strong>耗子 20:50:12</strong></p>
<p>这完全是为了生成文档用的<br>因为它应该就是方法名</p>
<p><strong>耗子 20:50:24</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@class</span> ：类描述</span></div></pre></td></tr></table></figure>

<p><strong>黄朋全 20:50:42</strong></p>
<p>恩。</p>
<p><strong>耗子 20:50:54</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="function"><span class="keyword">constructor</span> ：表明这是一个构造函数，这个在<span class="title">jsdoc</span>中非常重要，生成文档要用</span></div></pre></td></tr></table></figure>

<p><strong>耗子 20:51:18</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">extends</span> ：声明这个类继承的父类</div></pre></td></tr></table></figure>

<p><strong>刘林 20:51:35</strong></p>
<p>然后</p>
<p><strong>耗子 20:51:38</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@requires</span> ： 声明依赖关系</div></pre></td></tr></table></figure>

<p><strong>刘林 20:51:37</strong></p>
<p>？</p>
<p><strong>刘林 20:51:55</strong></p>
<p>good</p>
<p><strong>耗子 20:52:06</strong></p>
<p>@param ：是参数，这个应该是要求最复杂的一个了</p>
<p><strong>黄朋全 20:52:20</strong></p>
<p>为什么？</p>
<p><strong>耗子 20:52:50</strong></p>
<p>你应该告诉别人每个参数的意义和类型啊</p>
<p><strong>黄朋全 20:53:54</strong></p>
<p>这个不是每个API都应该写的吗</p>
<p><strong>黄朋全 20:54:04</strong></p>
<p>要不然别人怎么用你的api</p>
<p><strong>耗子 20:54:18</strong></p>
<p>嗯<br>对，所以它一般也是注释中的大头</p>
<p><strong>黄朋全 20:54:29</strong></p>
<p>而且这个参数的有效范围也要描述清楚</p>
<p><strong>牛牛 20:54:32</strong></p>
<p>强类型的一般没这个问题…</p>
<p><strong>耗子 20:54:39</strong></p>
<p>js是个弱类型的语言</p>
<p><strong>黄朋全 20:54:57</strong></p>
<p>哦。</p>
<p><strong>耗子 20:55:58</strong></p>
<p>如果是需要写很公用的api，一种是在运行时检测<br>然后抛错，但这会降低程序的性能，也使代码量增加</p>
<p><strong>耗子 20:56:14</strong></p>
<p>像在jq的源码里就有很多这种保护性的代码</p>
<p><strong>耗子 20:56:35</strong></p>
<p>当然另一种哲学就是约定大于配置</p>
<p><strong>耗子 20:57:32</strong></p>
<p>在注释中约定好参数的类型，你不应该乱传</p>
<p><strong>黄朋全 20:57:32</strong></p>
<p>有个疑问。就是js的解释器有报错机制吗</p>
<p><strong>黄朋全 20:57:57</strong></p>
<p>有些错误在js的解释器能不能检查出来</p>
<p><strong>耗子 20:58:23</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">param</span> </span>{<span class="tag">Object</span>} <span class="tag">config</span></div><div class="line"><span class="at_rule">@<span class="keyword">param</span> </span>{<span class="tag">Boolean</span>} <span class="tag">config</span><span class="class">.isAllowUpload</span></div></pre></td></tr></table></figure>

<p>这两句表示param是个对象</p>
<p><strong>耗子 20:58:48</strong></p>
<p>这个对象的形参名叫config</p>
<p><strong>牛牛 20:58:48</strong></p>
<p>浏览器会出个小三角</p>
<p><strong>牛牛 20:59:15</strong></p>
<p>但是不会具体爆出哪里出错吧</p>
<p><strong>耗子 20:59:16</strong></p>
<p>然后其中一个成员叫isAllowUpload ，是个布尔值</p>
<p><strong>黄朋全 20:59:50</strong></p>
<p>这个布尔值也是Object吧</p>
<p><strong>耗子 21:00:36</strong></p>
<p>解释器不一定能报错<br>比如一个函数要比较两个数的大小<br>而你传的是形似数字的字符串，也能比较，但是可能和你的预期不符</p>
<p><strong>小妹 21:01:12</strong></p>
<p>他会进行强制类型转换后再比较</p>
<p><strong>耗子 21:01:20</strong></p>
<p>不是Object</p>
<p>是这样的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">config</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">isAllowUpload </span>:<span class="value"> true</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>耗子 21:01:41</strong></p>
<p>是对象的一个成员</p>
<p><strong>黄朋全 21:01:55</strong></p>
<p>也就是js的错误检查机制建立的约定俗成的基础上的。而不是强制规则上的。对吗</p>
<p><strong>耗子 21:02:30</strong></p>
<p>这是生成的doc，大家可以自己生成一下就会明白这么写的结果了</p>
<p><strong>牛牛 21:02:31</strong></p>
<p>基于标准吧</p>
<p><strong>牛牛 21:02:36</strong></p>
<p>ECMA</p>
<p><strong>黄朋全 21:02:40</strong></p>
<p>包括子豪师兄说的注释的这些约定都是为了规范写法，从而尽可能避免错误的发生。</p>
<p><strong>耗子 21:03:01</strong></p>
<p>嗯<br>是的</p>
<p>约定大于配置嘛</p>
<p><strong>牛牛 21:03:16</strong></p>
<p>标准定义的部分行为是可知的<br>其他的就是未定义的 什么样都有可能。。。</p>
<p><strong>黄朋全 21:03:26</strong></p>
<p>这个标准也仅仅是约定，而不能形成强制约束。对吗</p>
<p><strong>牛牛 21:03:54</strong></p>
<p>嗯</p>
<p><strong>牛牛 21:03:57</strong></p>
<p>话说</p>
<p><strong>牛牛 21:04:08</strong></p>
<p>版权注释大家会写么</p>
<p><strong>耗子 21:04:22</strong></p>
<p>不能强制</p>
<p>如果你需要做很开放的接口，你可能需要考虑更多的复杂情况</p>
<p>内部检查，并将错误抛出来是一种方式</p>
<p><strong>黄朋全 21:04:31</strong></p>
<p>想java这种强类型语言，在编译期就会强制你按照规定去写，不按规定写就进行不下去。</p>
<p><strong>牛牛 21:05:01</strong></p>
<p>另外我发现 androidsdk的源代码 注释比代码还多</p>
<p><strong>黄朋全 21:05:04</strong></p>
<p>@Author @version</p>
<p><strong>牛牛 21:05:11</strong></p>
<p>copyright</p>
<p><strong>耗子 21:05:25</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="keyword">*</span>! jQuery v1.9.1 <span class="string">| (c) 2005, 2012 jQuery Foundation, Inc. | jquery.org/license</span></div></pre></td></tr></table></figure>

<p>这是jq的一段版权注释</p>
<p><strong>黄朋全 21:05:50</strong></p>
<p>恩</p>
<p><strong>耗子 21:05:54</strong></p>
<p>有个特点<br>注释以<br>/*!或者//!开头</p>
<p><strong>耗子 21:06:09</strong></p>
<p>这样压缩工具就不会把这段注释去掉</p>
<p><strong>黄朋全 21:06:17</strong></p>
<p>恩，这是脚本语言的特点。</p>
<p><strong>牛牛 21:06:24</strong></p>
<p>袄 java没看到这个</p>
<p><strong>黄朋全 21:06:27</strong></p>
<p>在编译语言里不是这样。</p>
<p><strong>耗子 21:06:29</strong></p>
<p>应该是行规</p>
<p><strong>耗子 21:06:41</strong></p>
<p>编译语言里怎么做呢？</p>
<p><strong>牛牛 21:06:50</strong></p>
<p>如果是开源的话可能还会标上是哪种license</p>
<p><strong>黄朋全 21:06:52</strong></p>
<p>@Author</p>
<p><strong>黄朋全 21:07:12</strong></p>
<p>@copyright</p>
<p><strong>黄朋全 21:07:17</strong></p>
<p>@version</p>
<p><strong>黄朋全 21:07:23</strong></p>
<p>@ time</p>
<p><strong>耗子 21:07:38</strong></p>
<p>jq的min版把license放在一个链接中了，为了减少字节 jquery.org/license</p>
<p><strong>黄朋全 21:07:46</strong></p>
<p>有专门的注释关键字，在javadoc里</p>
<p><strong>黄朋全 21:08:16</strong></p>
<p>这也是脚本语言的特点，考虑到传输的文件大小。</p>
<p><strong>牛牛 21:08:16</strong></p>
<p>貌似现在很少看到author的了</p>
<p><strong>耗子 21:08:21</strong></p>
<p>嗯</p>
<p><strong>黄朋全 21:08:32</strong></p>
<p>一般也会有</p>
<p><strong>耗子 21:08:38</strong></p>
<p>乌龟书里不提倡写author</p>
<p><strong>黄朋全 21:08:54</strong></p>
<p>修改的话，一般会有modified by **</p>
<p><strong>耗子 21:09:09</strong></p>
<p>作者(很帅)觉得这个可以在版本控制软件里看到，不需要写在代码里</p>
<p><strong>刘林 21:09:12</strong></p>
<p>怕担责任么？</p>
<p><strong>牛牛 21:09:14</strong></p>
<p>对的</p>
<p><strong>牛牛 21:09:15</strong></p>
<p>不是</p>
<p><strong>黄朋全 21:09:19</strong></p>
<p>以前在银行领域开发的时候经常看到。</p>
<p><strong>牛牛 21:09:28</strong></p>
<p>是因为版本控制已经接替这种功能了</p>
<p><strong>耗子 21:10:01</strong></p>
<p>乌龟书的作者认为一个团队的代码应该保持相同的风格<br>不需要区分人</p>
<p><strong>黄朋全 21:10:16</strong></p>
<p>恩。</p>
<p><strong>刘林 21:10:17</strong></p>
<p>有时候我把代码download下来了，但是木有版本信息啊</p>
<p><strong>刘林 21:10:32</strong></p>
<p>此时已经脱离版本控制了</p>
<p><strong>黄朋全 21:10:59</strong></p>
<p>在开源项目的开发里，这个应该还是比较常用的。</p>
<p><strong>牛牛 21:11:02</strong></p>
<p> 介个。。。现在基本下下来 也可以去来源处去查询版本控制</p>
<p><strong>耗子 21:11:15</strong></p>
<p>现在开源代码一般都托管在github或者googlecode这样的协同平台上，都有版本控制的</p>
<p><strong>牛牛 21:11:27</strong></p>
<p>不会自己去写这种修改日志什么的了</p>
<p><strong>刘林 21:11:29</strong></p>
<p>那多麻烦啊，还得找半天</p>
<p><strong>牛牛 21:11:51</strong></p>
<p>现在用惯了版本控制 基本上不会在代码里面写修改日志的了</p>
<p><strong>牛牛 21:11:54</strong></p>
<p>老早还会写</p>
<p><strong>黄朋全 21:12:37</strong></p>
<p>李永刘说的对。我们现在的开发也是，在每次提交的时候，要写清楚修改的哪个bug，做了哪些变更。</p>
<p><strong>牛牛 21:12:55</strong></p>
<p>我们现在逐渐在改进的 我们会加上跟踪tag</p>
<p><strong>牛牛 21:13:08</strong></p>
<p>BUG #xxx 子豪应该也知道的</p>
<p><strong>牛牛 21:13:21</strong></p>
<p>这样需求管理系统能够追踪的到</p>
<p><strong>耗子 21:13:27</strong></p>
<p>日志应该写在commit的注释中<br>这样像禅道这样的工具可以跟踪</p>
<p><strong>牛牛 21:13:32</strong></p>
<p>需求+BUG管理系统</p>
<p><strong>牛牛 21:13:33</strong></p>
<p>嗯</p>
<p><strong>刘林 21:14:20</strong></p>
<p>是啊。 也就是说我看代码的时候必须打开版本控制工具才能明白哪里改了</p>
<p><strong>耗子 21:14:21</strong></p>
<p>jsdoc中还有一种注释标签</p>
<p>我不知道 java中有没有</p>
<p><strong>耗子 21:14:38</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> *<span class="javadoctag"> @name</span> Uploader#success</div><div class="line"> *<span class="javadoctag"> @desc</span>  上传成功后触发</div><div class="line"> *<span class="javadoctag"> @event</span></div><div class="line"> *<span class="javadoctag"> @param</span> {Number} ev.index 上传中的文件在队列中的索引值</div><div class="line"> *<span class="javadoctag"> @param</span> {Object} ev.file 文件数据</div><div class="line"> *<span class="javadoctag"> @param</span> {Object} ev.result 服务器端返回的数据</div><div class="line"> */</div></pre></td></tr></table></figure>

<p><strong>牛牛 21:14:50</strong></p>
<p>哈哈你的编辑器可以集成版本控制插件</p>
<p><strong>牛牛 21:14:53</strong></p>
<p>就很简单的了</p>
<p><strong>耗子 21:15:01</strong></p>
<h1 id="success">success</h1>
<p>表示这是个事件函数</p>
<p><strong>牛牛 21:15:03</strong></p>
<p>至少eclipse都是这样的啦</p>
<p><strong>耗子 21:15:45</strong></p>
<p>@desc ： 事件描述<br>@event ： 表明这段注释目标为事件。非常重要</p>
<p><strong>黄朋全 21:16:01</strong></p>
<p>这个没有。</p>
<p><strong>黄朋全 21:16:17</strong></p>
<p>至少我没见过。</p>
<p><strong>牛牛 21:16:32</strong></p>
<p>额 说javadoc里面还会看到很多种类的标签</p>
<p><strong>黄朋全 21:16:56</strong></p>
<p>恩。不过很多都不怎么用。</p>
<p><strong>牛牛 21:16:57</strong></p>
<p>@hide @link</p>
<p><strong>牛牛 21:17:13</strong></p>
<p>@see</p>
<p><strong>黄朋全 21:17:16</strong></p>
<p>javadoc的东西很多都还不会用</p>
<p><strong>耗子 21:17:20</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">Inline tags</div><div class="line">All about inline tags {<span class="property">@link</span> ...}, {<span class="property">@linkplain</span> ...}, {<span class="property">@linkcode</span> ...}, {<span class="property">@tutorial</span> ...}.</div><div class="line"><span class="property">@abstract</span></div><div class="line">This member must be implemented (<span class="keyword">or</span> overridden) <span class="keyword">by</span> the inheritor.</div><div class="line"><span class="property">@access</span></div><div class="line">Specify the access level <span class="keyword">of</span> <span class="keyword">this</span> member - private, public, <span class="keyword">or</span> protected.</div><div class="line"><span class="property">@alias</span></div><div class="line">Treat a member as <span class="keyword">if</span> it had a different name.</div><div class="line"><span class="property">@augments</span></div><div class="line">This object adds onto a parent object.</div><div class="line"><span class="property">@author</span></div><div class="line">Identify the author <span class="keyword">of</span> an item.</div><div class="line"><span class="property">@borrows</span></div><div class="line">This object uses something from another object.</div><div class="line"><span class="property">@callback</span></div><div class="line">Document a callback <span class="reserved">function</span>.</div><div class="line"><span class="property">@classdesc</span></div><div class="line">Use the following text to describe the entire <span class="class"><span class="keyword">class</span>.</span></div><div class="line"><span class="property">@constant</span></div><div class="line">Document an object as a constant.</div><div class="line"><span class="property">@constructor</span></div><div class="line">This <span class="reserved">function</span> <span class="keyword">is</span> intended to be called <span class="reserved">with</span> the <span class="string">"new"</span> keyword.</div><div class="line"><span class="property">@constructs</span></div><div class="line">This <span class="reserved">function</span> member will be the constructor <span class="keyword">for</span> the previous <span class="class"><span class="keyword">class</span>.</span></div><div class="line"><span class="property">@copyright</span></div><div class="line">Document some copyright information.</div><div class="line"><span class="property">@default</span></div><div class="line">Document the <span class="reserved">default</span> value.</div><div class="line"><span class="property">@deprecated</span></div><div class="line">Document that <span class="keyword">this</span> <span class="keyword">is</span> <span class="literal">no</span> longer the preferred way.</div><div class="line"><span class="property">@desc</span></div><div class="line">Describe a symbol.</div><div class="line"><span class="property">@enum</span></div><div class="line">Document a collection <span class="keyword">of</span> related properties.</div><div class="line"><span class="property">@event</span></div><div class="line">Document an event.</div><div class="line"><span class="property">@example</span></div><div class="line">Provide an example <span class="keyword">of</span> how to use a documented item.</div><div class="line"><span class="property">@exports</span></div><div class="line">Identify the member that <span class="keyword">is</span> exported <span class="keyword">by</span> a JavaScript <span class="built_in">module</span>.</div><div class="line"><span class="property">@external</span></div><div class="line">Document an external <span class="class"><span class="keyword">class</span>/<span class="title">namespace</span>/<span class="title">module</span>.</span></div><div class="line"><span class="property">@file</span></div><div class="line">Describe a file.</div><div class="line"><span class="property">@fires</span></div><div class="line">Describe the events <span class="keyword">this</span> method may fire.</div><div class="line"><span class="property">@global</span></div><div class="line">Document a <span class="built_in">global</span> object.</div><div class="line"><span class="property">@ignore</span></div><div class="line">[todo] Remove <span class="keyword">this</span> from the final output.</div><div class="line"><span class="property">@inner</span></div><div class="line">Document an inner object.</div><div class="line"><span class="property">@instance</span></div><div class="line">Document an instance member.</div><div class="line"><span class="property">@kind</span></div><div class="line">What kind <span class="keyword">of</span> symbol <span class="keyword">is</span> <span class="keyword">this</span>?</div><div class="line"><span class="property">@lends</span></div><div class="line">Document properties <span class="literal">on</span> an object literal as <span class="keyword">if</span> they belonged to a symbol <span class="reserved">with</span> a given name.</div><div class="line"><span class="property">@license</span></div><div class="line">[todo] Document the software license that applies to <span class="keyword">this</span> code.</div><div class="line"><span class="property">@link</span></div><div class="line">Inline tag - create a link.</div><div class="line"><span class="property">@member</span></div><div class="line">Document a member.</div><div class="line"><span class="property">@memberof</span></div><div class="line">This symbol belongs to a parent symbol.</div><div class="line"><span class="property">@method</span></div><div class="line">Describe a method <span class="keyword">or</span> <span class="reserved">function</span>.</div><div class="line"><span class="property">@mixes</span></div><div class="line">This object mixes <span class="keyword">in</span> all the members from another object.</div><div class="line"><span class="property">@mixin</span></div><div class="line">Document a mixin object.</div><div class="line"><span class="property">@module</span></div><div class="line">Document a JavaScript <span class="built_in">module</span>.</div><div class="line"><span class="property">@name</span></div><div class="line">Document the name <span class="keyword">of</span> an object.</div><div class="line"><span class="property">@namespace</span></div><div class="line">Document a namespace object.</div><div class="line"><span class="property">@param</span></div><div class="line">Document the parameter to a <span class="reserved">function</span>.</div><div class="line"><span class="property">@private</span></div><div class="line">This symbol <span class="keyword">is</span> meant to be private.</div><div class="line"><span class="property">@property</span></div><div class="line">Document a property <span class="keyword">of</span> an object.</div><div class="line"><span class="property">@protected</span></div><div class="line">This member <span class="keyword">is</span> meant to be protected.</div><div class="line"><span class="property">@public</span></div><div class="line">This symbol <span class="keyword">is</span> meant to be public.</div><div class="line"><span class="property">@readonly</span></div><div class="line">This symbol <span class="keyword">is</span> meant to be read-only.</div><div class="line"><span class="property">@requires</span></div><div class="line">This file requires a JavaScript <span class="built_in">module</span>.</div><div class="line"><span class="property">@returns</span></div><div class="line">Document the <span class="keyword">return</span> value <span class="keyword">of</span> a <span class="reserved">function</span>.</div><div class="line"><span class="property">@see</span></div><div class="line">Refer to some other documentation <span class="keyword">for</span> more information.</div><div class="line"><span class="property">@since</span></div><div class="line">When was <span class="keyword">this</span> feature added?</div><div class="line"><span class="property">@static</span></div><div class="line">Document a static member.</div><div class="line"><span class="property">@summary</span></div><div class="line">A shorter version <span class="keyword">of</span> the full description.</div><div class="line"><span class="property">@this</span></div><div class="line">What does the <span class="string">'this'</span> keyword refer to here?</div><div class="line"><span class="property">@throws</span></div><div class="line">Describe what errors could be thrown.</div><div class="line"><span class="property">@todo</span></div><div class="line">Document tasks to be completed.</div><div class="line"><span class="property">@tutorial</span></div><div class="line">Insert a link to an included tutorial file.</div><div class="line"><span class="property">@type</span></div><div class="line">Document the type <span class="keyword">of</span> an object.</div><div class="line"><span class="property">@typedef</span></div><div class="line">Document a custom type.</div><div class="line"><span class="property">@variation</span></div><div class="line">Distinguish different objects <span class="reserved">with</span> the same name.</div><div class="line"><span class="property">@version</span></div><div class="line">Documents the version number <span class="keyword">of</span> an item.</div></pre></td></tr></table></figure>

<p><strong>耗子 21:17:47</strong></p>
<p> 刷屏了</p>
<p><strong>牛牛 21:17:49</strong></p>
<p>然后还有 javadoc注释里面可以使用html标签</p>
<p><strong>牛牛 21:17:52</strong></p>
<p>比如</p><p></p>
<p><strong>黄朋全 21:18:02</strong></p>
<p>别刷屏</p>
<p><strong>黄朋全 21:18:08</strong></p>
<p>看起来费劲。</p>
<p><strong>耗子 21:18:19</strong></p>
<p>@牛牛说下这个html标签是怎么用的</p>
<p><strong>牛牛 21:18:27</strong></p>
<p>我也不清楚啊</p>
<p><strong>牛牛 21:18:29</strong></p>
<p>我只是看到</p>
<p><strong>黄朋全 21:18:31</strong></p>
<p>我浏览一下，java里这些都是写到代码里的。</p>
<p><strong>牛牛 21:18:34</strong></p>
<p></p><p>其他的没看到</p>
<p><strong>黄朋全 21:18:40</strong></p>
<p>javadoc能够解析html</p>
<p><strong>黄朋全 21:19:09</strong></p>
<p>所以写javadoc的时候可以用html的格式去写。</p>
<p><strong>耗子 21:19:53</strong></p>
<p>哦</p>
<p><strong>黄朋全 21:20:13</strong></p>
<p>这样输出的javadoc就有样式。</p>
<p><strong>牛牛 21:20:24</strong></p>
<p> 刚才一下刷了好多tag啊</p>
<p><strong>耗子 21:20:51</strong></p>
<p>嗯<br>刚才说到了注释的一些写法<br>主要是为了生成文档</p>
<p><strong>黄朋全 21:20:57</strong></p>
<p>不只是没有区别的文字。加粗，标题，斜体，连接都可以写。</p>
<p><strong>牛牛 21:20:58</strong></p>
<p>在注释里面除了para 最多看到的就是link</p>
<p><strong>牛牛 21:21:12</strong></p>
<p>我们写的注释 几乎没有link</p>
<p><strong>耗子 21:21:17</strong></p>
<p>link一般怎么用呢</p>
<p><strong>黄朋全 21:21:29</strong></p>
<p>用html格式写</p>
<p><strong>黄朋全 21:21:46</strong></p>
<p>html怎么写，输出的文档就带着。</p>
<p><strong>牛牛 21:22:04</strong></p>
<p>就是比如可能用到某个类里面的常数 或调用到某个方法 它会列出来</p>
<p><strong>牛牛 21:22:12</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> /**</div><div class="line">     * Returns a string representation <span class="keyword">of</span> <span class="keyword">this</span> BluetoothDevice.</div><div class="line">     * &lt;p&gt;Currently <span class="keyword">this</span> <span class="keyword">is</span> the Bluetooth hardware address, <span class="keyword">for</span> example</div><div class="line"></div><div class="line"></div><div class="line">**     * <span class="string">"00:11:22**</span></div><div class="line"></div><div class="line">:AA:BB:CC". However, you should always use {<span class="property">@link</span> <span class="comment">#getAddress}</span></div><div class="line">     * <span class="keyword">if</span> you explicitly <span class="built_in">require</span> the Bluetooth hardware address <span class="keyword">in</span> <span class="reserved">case</span> the</div><div class="line">     * {<span class="property">@link</span> <span class="comment">#toString} representation changes in the future.</span></div><div class="line">     * <span class="property">@return</span> string representation <span class="keyword">of</span> <span class="keyword">this</span> BluetoothDevice</div><div class="line">     */</div></pre></td></tr></table></figure>

<p><strong>牛牛 21:22:25</strong></p>
<p>。。。不小心刷屏了</p>
<p><strong>黄朋全 21:22:40</strong></p>
<p>你这不是刷屏</p>
<p><strong>牛牛 21:22:40</strong></p>
<p>可以看到它里面有两个link的方法</p>
<p><strong>耗子 21:22:46</strong></p>
<p>这会生成一个带换行的文档块么</p>
<p><strong>黄朋全 21:22:54</strong></p>
<p>会啊</p>
<p><strong>黄朋全 21:23:24</strong></p>
<p>javadoc是很强大的注释提取工具。</p>
<p><strong>耗子 21:23:32</strong></p>
<p>嗯</p>
<p><strong>牛牛 21:23:56</strong></p>
<p><strong>牛牛 21:24:03</strong></p>
<p>展示的时候就会变成这这样</p>
<p><strong>牛牛 21:24:13</strong></p>
<p>see 关键字在最下面</p>
<p><strong>耗子 21:24:27</strong></p>
<p>哦</p>
<p><strong>黄朋全 21:25:01</strong></p>
<p>子豪师兄是不是受挫了？哈哈</p>
<p><strong>耗子 21:25:07</strong></p>
<p>可能时间不够说第三章了<br>哈哈</p>
<p><strong>黄朋全 21:25:16</strong></p>
<p>别跟强类型语言比。</p>
<p><strong>黄朋全 21:25:47</strong></p>
<p>这个说完了吗</p>
<p><strong>耗子 21:26:04</strong></p>
<p>嗯<br>本来就是和大家多种语言进行比较，好知己知彼</p>
<p><strong>耗子 21:26:33</strong></p>
<p>嗯，一些注意的事项乌龟书上有提</p>
<p><strong>耗子 21:27:07</strong></p>
<p>注释完全是个约定<br>淘宝的开源项目中并不提倡doc风格的注释</p>
<p><strong>耗子 21:27:33</strong></p>
<p>觉得代码应该能自解释才是好代码</p>
<p><strong>黄朋全 21:27:33</strong></p>
<p>哦。这个我不是很清楚</p>
<p><strong>黄朋全 21:27:43</strong></p>
<p>恩，这个是关键。</p>
<p><strong>耗子 21:27:51</strong></p>
<p>只在关键的逻辑地方适当地加一些注释</p>
<p><strong>牛牛 21:27:53</strong></p>
<p>自解释是很好 但是也有问题的 因为所谓自解释 只是自认为的自解释</p>
<p><strong>黄朋全 21:27:55</strong></p>
<p>程序员都很烦补注释的。</p>
<p><strong>黄朋全 21:28:09</strong></p>
<p>这个需要基本功。</p>
<p><strong>黄朋全 21:28:27</strong></p>
<p>初级程序员还是老老实实写注释的好。</p>
<p><strong>牛牛 21:28:27</strong></p>
<p>如果 写代码的人 读代码的人 都是比较高水平的</p>
<p><strong>牛牛 21:28:30</strong></p>
<p>就没有问题了</p>
<p><strong>牛牛 21:29:01</strong></p>
<p>要是代码写的就不规范 还没注释 就不行咯</p>
<p><strong>黄朋全 21:29:13</strong></p>
<p>而且写代码不光是要实现功能，还要时时刻刻考虑要给别人看。</p>
<p><strong>耗子 21:29:14</strong></p>
<p> 其实这本书中很多的建议都是为了让代码能够自解释</p>
<p>如变量的命名就是为了能够自解释</p>
<p><strong>黄朋全 21:29:34</strong></p>
<p>耗子师兄把字体调大一些吧。</p>
<p><strong>耗子 21:29:47</strong></p>
<p> 注释就是给人看的<br>机器直接都无视了</p>
<p><strong>耗子 21:30:23</strong></p>
<p>第三章咱快速过一下吧</p>
<p>本来也没几页</p>
<p><strong>黄朋全 21:30:27</strong></p>
<p>恩。</p>
<p><strong>耗子 21:30:37</strong></p>
<p>第三章 《语句和表达式》</p>
<p><strong>黄朋全 21:30:41</strong></p>
<p>第三章是语句块和表达式对吧</p>
<p><strong>黄朋全 21:31:16</strong></p>
<p>try…catch…finally ，js里也有这东西？？</p>
<p><strong>耗子 21:31:21</strong></p>
<p>主要几点<br>大家都应该能明白<br>1、if的表达式应该包在{}括号里</p>
<p><strong>耗子 21:32:12</strong></p>
<p>2、条件中不应该赋值</p>
<p><strong>耗子 21:32:36</strong></p>
<p>3、花括号的开头写在行末还不是行首</p>
<p><strong>黄朋全 21:33:11</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad, though technically valid JavaScript</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">condition</span>) { doSomething(); }</div></pre></td></tr></table></figure>

<p><strong>耗子 21:33:23</strong></p>
<p>4、switch 这个比较有争议，<br>作者是认为可以case穿透的</p>
<p><strong>黄朋全 21:33:52</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">condition</span>) {</div><div class="line">    doSomething();</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>耗子 21:34:15</strong></p>
<p>default也是可以省略的，但如果不写break或者default应该用注释说明</p>
<p><strong>黄朋全 21:34:36</strong></p>
<p>js里提倡switch语句吗</p>
<p><strong>耗子 21:34:59</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) { <span class="keyword">do</span>Something(); }</div></pre></td></tr></table></figure>

<p>其实对于这种单语句<br>我更喜欢</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">condition && <span class="keyword">do</span>Something();</div></pre></td></tr></table></figure>

<p><strong>耗子 21:35:20</strong></p>
<p>不是很提倡</p>
<p>java中提倡么</p>
<p><strong>耗子 21:35:39</strong></p>
<p>switch天生有不少缺陷</p>
<p><strong>黄朋全 21:35:51</strong></p>
<p>java里尽量少用，因为switch更像一种过程语言的思想，不是对象语言的思想</p>
<p><strong>耗子 21:36:07</strong></p>
<p>比如条件从枚举变成比较，整个代码都得重构了</p>
<p><strong>牛牛 21:36:08</strong></p>
<p>有时候还是会用 哈哈</p>
<p><strong>黄朋全 21:36:38</strong></p>
<p>用的少。</p>
<p><strong>耗子 21:36:55</strong></p>
<p>5、js中不提倡with</p>
<p><strong>黄朋全 21:37:04</strong></p>
<p>在java设计模式里面，有好几种就能够避免使用switch。</p>
<p><strong>耗子 21:37:07</strong></p>
<p>这个在严格模式中已经被k掉了</p>
<p><strong>刘林 21:37:10</strong></p>
<p>with 是什么？</p>
<p><strong>耗子 21:37:26</strong></p>
<p>不知道更好，哈哈</p>
<p><strong>牛牛 21:37:45</strong></p>
<p>嗯 我也不知道这种语句</p>
<p><strong>黄朋全 21:37:55</strong></p>
<p>表示不知道</p>
<p><strong>耗子 21:39:02</strong></p>
<p>6、for循环中的一般用i,j,k作索引<br>但是要注意js的作用域问题，在语句块之外这些值是可以被访问到的</p>
<p><strong>牛牛 21:39:30</strong></p>
<p>偶现在循环也很少用ijk</p>
<p><strong>牛牛 21:39:32</strong></p>
<p>的</p>
<p><strong>耗子 21:39:57</strong></p>
<p>7、数组的循环用for，对象用for in</p>
<p><strong>耗子 21:40:15</strong></p>
<p>ecma5中有了forEach，和php类似</p>
<p><strong>黄朋全 21:40:18</strong></p>
<p>先考虑foreach，然后在for</p>
<p><strong>刘林 21:40:34</strong></p>
<p>有效率差别么</p>
<p><strong>耗子 21:40:44</strong></p>
<p>forEach不是所有的浏览器都支持</p>
<p><strong>黄朋全 21:40:50</strong></p>
<p>至于ijk，在for语句还是常用的。</p>
<p><strong>牛牛 21:40:55</strong></p>
<p>额 是因为for 还要再取长度</p>
<p><strong>黄朋全 21:41:03</strong></p>
<p>java里foreach的效率更高。</p>
<p><strong>黄朋全 21:41:35</strong></p>
<p>如果对序号有要求的话只能用for余洁</p>
<p><strong>牛牛 21:41:37</strong></p>
<p>可能是因为直接的for(;;)这种现在用的少了</p>
<p><strong>黄朋全 21:41:37</strong></p>
<p>语句。</p>
<p><strong>耗子 21:41:44</strong></p>
<p>foreach可以通过扩展原型链的方式让老浏览器支持</p>
<p><strong>刘林 21:41:46</strong></p>
<p>c++ 只有for，不用纠结</p>
<p><strong>耗子 21:42:36</strong></p>
<p>for in循环在js中有个问题，就是会访问从原型链中继承来的属性</p>
<p><strong>黄朋全 21:43:26</strong></p>
<p>这个有什么区别</p>
<p><strong>黄朋全 21:43:34</strong></p>
<p>具体解释一下？</p>
<p><strong>耗子 21:44:16</strong></p>
<p>乌龟书中建议for in时一定要判断</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>( var i <span class="keyword">in</span> o){</div><div class="line">    <span class="keyword">if</span>(o.hasOwnProperty(i)){</div><div class="line">       <span class="keyword">...</span></div><div class="line">   }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>黄朋全 21:45:16</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="built_in">Object</span> a: map) {</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>黄朋全 21:45:42</strong></p>
<p>这时java的写法。和for语句的区别很小。</p>
<p><strong>黄朋全 21:46:08</strong></p>
<p>不明白js里for in语句和for语句有什么大的区别</p>
<p><strong>耗子 21:46:13</strong></p>
<p>这相当于for in吧</p>
<p><strong>黄朋全 21:46:33</strong></p>
<p>他们得到的对象都是一样的。</p>
<p><strong>黄朋全 21:47:07</strong></p>
<p>在真正实现的时候，很好再去访问集合对象。</p>
<p><strong>黄朋全 21:47:09</strong></p>
<p>很少</p>
<p><strong>耗子 21:47:52</strong></p>
<p>这个<br>呵呵<br>说来话长</p>
<p>反正记住一点</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[]数组循环用<span class="keyword">for</span> (var i=<span class="number">0</span>, l = arr.length, i &lt; l; ++i)<span class="keyword">...</span></div><div class="line"></div><div class="line">{}对象 用 <span class="keyword">for</span>(var i <span class="keyword">in</span> obj) {</div><div class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i)) {</div><div class="line">       。。。</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>黄朋全 21:47:55</strong></p>
<p>但是子豪给的例子为什么还会在循环里出现集合对象</p>
<p><strong>黄朋全 21:48:37</strong></p>
<p>在java1.5以后，数组和集合都可以用foreach语句</p>
<p><strong>黄朋全 21:48:59</strong></p>
<p>而且foreach语句的性能还要高一些。</p>
<p><strong>黄朋全 21:49:37</strong></p>
<p>还有对象用for in语句，这个对象如果不是集合对象可以吗？</p>
<p><strong>黄朋全 21:49:42</strong></p>
<p>java是不可以的。</p>
<p><strong>黄朋全 21:50:36</strong></p>
<p>java的foreach语句没有遍历对象的各个成员域的功能。</p>
<p><strong>耗子 21:50:40</strong></p>
<p>不是集合对象也可以用for in<br>但意义不大</p>
<p><strong>黄朋全 21:50:59</strong></p>
<p>js的for in语句可以遍历对象的成员域？</p>
<p><strong>耗子 21:51:01</strong></p>
<p>因为数组的下标都是整型</p>
<p><strong>耗子 21:51:45</strong></p>
<p>会遍历对象的原型链</p>
<p><strong>黄朋全 21:52:22</strong></p>
<p>把对象作为一个树结构或者网结构进行遍历吗？</p>
<p><strong>耗子 21:52:30</strong></p>
<p>8、js里没有goto</p>
<p><strong>黄朋全 21:52:49</strong></p>
<p>goto就算了，这个是恶魔</p>
<p><strong>耗子 21:53:01</strong></p>
<p><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">http://bonsaiden.github.io/JavaScript-Garden/zh/</a></p>
<p>这里有很长的一段讲for和for in</p>
<p><strong>牛牛 21:53:21</strong></p>
<p>在裸奔的语言里面不得已使用goto的</p>
<p><strong>耗子 21:53:45</strong></p>
<p>呵呵<br>今天不展开讲了，得对js的原型继承弄明白了才能很好地理解</p>
<p><strong>耗子 21:54:18</strong></p>
<p>时间不早了</p>
<p><strong>黄朋全 21:54:32</strong></p>
<p>goto在当时写汇编语言的时候用来实现循环。</p>
<p><strong>黄朋全 21:54:53</strong></p>
<p>好像是jump。</p>
<p><strong>耗子 21:55:35</strong></p>
<p>由于时间的关系我们今晚就讨论到这里吧 ：)</p>
]]></content>
    <summary type="html"><![CDATA[<p><strong>耗子 20:21:16</strong></p>
<p>今天准备和大家共修的是乌龟书的第二章和第三章</p>
<p><strong>耗子 20:21:34</strong></p>
<p>第二章主要讲的是注释怎么写</p>
<p><strong>耗子 20:21:54</strong></p>
<p>坑爹啊<br>谁不会写注释呢</p>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[【共学】《编写可维护的javascript》01-基本的格式化]]></title>
    <link href="http://haozi.de/post/01-%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>http://haozi.de/post/01-基本的格式化/</id>
    <published>2013-06-03T15:43:31.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p> 日期: 2013-06-03</p>
<p><strong>耗子20:07:02</strong></p>
<p>今天我们想讨论的是js的一些编程风格上的规范</p>
<p><strong>耗子20:07:48</strong></p>
<p>@张静师兄<br>您公司项目中有对js的编程风格有要求么 ？</p>
<p><strong>刘林-PHP开发20:07:48</strong></p>
<p>具体点呢？</p>
<p><strong>耗子20:08:18</strong></p>
<p>大家都可以谈一谈啊，包括别的语言的一些风格</p>
<p><strong>张静20:08:21</strong></p>
<p>没有，我们公司基本用的都是很简单的JS。</p>
<p><strong>张静20:08:29</strong></p>
<p>比较乱。</p>
<p><strong>耗子20:09:02</strong></p>
<p>@刘林师兄 ?<br><a id="more"></a></p>
<p><strong>耗子20:09:28</strong></p>
<p>@小妹你们公司对这块要求应该很严谨吧</p>
<p><strong>小妹20:10:08</strong></p>
<p>嗯 是有要求的</p>
<p><strong>刘林-PHP开发20:10:17</strong></p>
<p>我算没写js的人了</p>
<p><strong>刘林-PHP开发20:10:27</strong></p>
<p>对规范没啥概念</p>
<p><strong>耗子20:10:35</strong></p>
<h2 id="缩进">缩进</h2>
<p>比如缩进<br>你们是怎么要求的<br>1个tab还是4个空格？</p>
<p><strong>张静20:10:52</strong></p>
<p>其他语言是4个空格</p>
<p><strong>小妹20:10:52</strong></p>
<p>但是像可维护的js里面讲的那么细致的 还是少 总之我们还是没那么完美的</p>
<p><strong>耗子20:10:53</strong></p>
<p>php和java中应该也都有类似的规范的</p>
<p><strong>张静20:11:08</strong></p>
<p>Java是4个空格</p>
<p><strong>耗子20:11:26</strong></p>
<p>一行现在 遵守80个字符么</p>
<p><strong>张静20:11:42</strong></p>
<p>现在屏幕大了，80个字符少了些，呵呵！</p>
<p><strong>小妹20:11:55</strong></p>
<p>80个字符的那个是我看了这本书才知道的 总之我们之前还是不规范</p>
<p><strong>黄朋全20:12:01</strong></p>
<p>js一个tab两个空格</p>
<p><strong>朱雪花20:12:08</strong></p>
<p>80 个是怎么数出来的？</p>
<p><strong>小妹20:12:09</strong></p>
<p>括弧（我们部门不规范）</p>
<p><strong>黄朋全20:12:08</strong></p>
<p>我们部门</p>
<p><strong>刘林-PHP开发20:12:09</strong></p>
<p>是啊，web一般不是120个字符么？</p>
<p><strong>黄朋全20:12:20</strong></p>
<p>800*600屏幕</p>
<p><strong>小妹20:12:21</strong></p>
<p>不是的</p>
<p><strong>小妹20:12:27</strong></p>
<p>70或者80个字符</p>
<p><strong>张静20:12:45</strong></p>
<p>只有不拉左右的滚动条就可以了。</p>
<p><strong>耗子20:12:46</strong></p>
<p>《编写可维护的javascript》(以下简称乌龟书)<br>中提到当换行时应该缩进2个层级</p>
<p><strong>黄朋全20:12:48</strong></p>
<p>原来屏幕小。以800*600为标准，规定的80个字符</p>
<p><strong>黄朋全20:13:11</strong></p>
<p>现在屏幕都大了。这个要求就不怎么试用了。</p>
<p><strong>张静20:13:19</strong></p>
<p>2个层级，是不是4个空格。</p>
<p><strong>小妹20:13:48</strong></p>
<p>字符数跟屏幕大小有关系吗，耗子？</p>
<p><strong>耗子20:13:53</strong></p>
<p>怎么样缩进我觉得需要前后端基本保持一致<br>整个网站可能都在一个ide下开发前后端代码，如果有两套不同的风格人是会抽疯的</p>
<p><strong>刘林-PHP开发20:14:27</strong></p>
<p>这个同意</p>
<p><strong>耗子20:14:28</strong></p>
<p>所以很希望大家聊聊各自工作中的习惯</p>
<p><strong>张静20:14:29</strong></p>
<p>嗯，我们是在eclipse写js的。</p>
<p><strong>黄朋全20:14:44</strong></p>
<p>我是完全的java规范</p>
<p><strong>耗子20:14:52</strong></p>
<p>嗯<br>屏幕大了，一行可以多放些字符</p>
<p><strong>牛牛20:14:57</strong></p>
<p>额 习惯是Ctrl+Shift+f</p>
<p><strong>黄朋全20:15:09</strong></p>
<p>这个可以定制的。</p>
<p><strong>张静20:15:16</strong></p>
<p>呵呵！</p>
<p><strong>耗子20:15:29</strong></p>
<p>貌似4个空格大家用得比较多？</p>
<p><strong>黄朋全20:15:43</strong></p>
<p>空行，空格，字符数都是可以调整的。</p>
<p><strong>牛牛20:15:58</strong></p>
<p>默认</p>
<p><strong>张静20:15:59</strong></p>
<p>嗯，ide会帮忙缩进的。</p>
<p><strong>牛牛20:16:19</strong></p>
<p>我的习惯是能不动就不动。。。懒人原则</p>
<p><strong>牛牛20:16:20</strong></p>
<p>。。。</p>
<p><strong>耗子20:16:26</strong></p>
<p>google的编程风格是约定2个空格<br>我尝试过一段时间，感觉写html这种很容易多级嵌套的还不错，但写js时，感觉缩进有些小，不太舒服</p>
<p><strong>耗子20:17:09</strong></p>
<h2 id="结尾分号">结尾分号</h2>
<p>java和php貌似语句结尾必须要打分号的是么？</p>
<p><strong>张静20:17:20</strong></p>
<p>是的</p>
<p><strong>张静20:17:30</strong></p>
<p>js可以不用</p>
<p><strong>耗子20:17:30</strong></p>
<p>function呢？</p>
<p><strong>张静20:17:46</strong></p>
<p>语句才需要</p>
<p><strong>牛牛20:17:52</strong></p>
<p>方法结尾不需要;</p>
<p><strong>刘林-PHP开发20:17:57</strong></p>
<p>google c++也都缩进2个空格</p>
<p><strong>耗子20:17:58</strong></p>
<p>js有ASI策略(自动补全分号)</p>
<p><strong>耗子20:18:46</strong></p>
<p>但是asi可能造成一些不在预料之中的bug</p>
<p><strong>刘林-PHP开发20:19:02</strong></p>
<p>譬如呢？</p>
<p><strong>小妹20:19:14</strong></p>
<p>是的 我看到的一个例子 ：</p>
<figure class="highlight return"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">aa</span>:<span class="value"><span class="string">"test"</span></span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>刘林-PHP开发20:19:15</strong></p>
<p>自动补全分号是啥意思？</p>
<p><strong>耗子20:19:20</strong></p>
<p>比如function中如果要return一个对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span></div><div class="line">{</div><div class="line">    <span class="keyword">...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>小妹20:19:32</strong></p>
<p>额</p>
<p><strong>小妹20:19:44</strong></p>
<p>会在return后面加分号</p>
<p><strong>耗子20:19:49</strong></p>
<p>会被js引擎解释成</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span>;</div><div class="line">{</div><div class="line">    <span class="keyword">...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>牛牛20:19:56</strong></p>
<p>就是说你没有添加分号的时候 解释器会按照它自己的理解给语句加上分号</p>
<p><strong>耗子20:19:57</strong></p>
<p>嗯<br>小妹说得对</p>
<p><strong>牛牛20:20:13</strong></p>
<p>就跟咱们括号一样</p>
<p><strong>牛牛20:20:28</strong></p>
<p>编译器会按照它自己的优先级来加括号</p>
<p><strong>耗子20:20:29</strong></p>
<p>这会造成整个函数的返回值为undefined而不是期望的对象</p>
<p><strong>耗子20:21:15</strong></p>
<p>牛牛，c++中是不是喜欢函数的左括号另起一行？</p>
<p><strong>黄朋全20:21:29</strong></p>
<p>这个是。</p>
<p><strong>牛牛20:21:30</strong></p>
<p>嗯 默认的风格是这样</p>
<p><strong>张静20:21:34</strong></p>
<p>看来还是自己加分号，比较保险。</p>
<p><strong>刘林-PHP开发20:21:36</strong></p>
<p>编译器做得太多了了吧</p>
<p><strong>小妹20:21:48</strong></p>
<p>因为js太灵活了</p>
<p><strong>耗子20:21:47</strong></p>
<p>这个风格在js里是不赞成的</p>
<p><strong>牛牛20:22:02</strong></p>
<p><strong>牛牛20:22:10</strong></p>
<p>以前我也都用这风格</p>
<p><strong>黄朋全20:22:30</strong></p>
<p>这就是弱类型的特点。强类型语言什么都管。</p>
<p><strong>耗子20:22:39</strong></p>
<p>因为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span></div><div class="line">{</div><div class="line">    <span class="keyword">...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>这种情况就会出bug<br>所以js保持一致性建议将左括号放在行尾</p>
<p><strong>耗子20:23:01</strong></p>
<p>@牛牛 这是C++吧？</p>
<p><strong>牛牛20:23:11</strong></p>
<p>嗯</p>
<p><strong>张静20:23:11</strong></p>
<p>这个倒是和java规定的是一样的。</p>
<p><strong>耗子20:23:33</strong></p>
<p>@张静师兄 java也有这种坑？</p>
<p><strong>牛牛20:23:35</strong></p>
<p>后来改java之后左括号都是不独占一行的了</p>
<p><strong>张静20:23:43</strong></p>
<p>没有呀</p>
<p><strong>牛牛20:23:56</strong></p>
<p>java没有坑 但是编辑器默认就是这风格。。。</p>
<p><strong>张静20:23:59</strong></p>
<p>只是规范{必须放到行尾。</p>
<p><strong>耗子20:24:02</strong></p>
<p>哦</p>
<p><strong>黄朋全20:24:16</strong></p>
<p>java的坑大多是空指针。</p>
<p><strong>牛牛20:24:36</strong></p>
<p>NullPointException</p>
<p><strong>牛牛20:24:37</strong></p>
<p>。。。</p>
<p><strong>张静20:24:38</strong></p>
<p>可以用NullObject模式。</p>
<p><strong>耗子20:24:41</strong></p>
<p>@黄朋全师兄<br>貌似您平时都是左括号行首？</p>
<p><strong>黄朋全20:24:51</strong></p>
<p>不是</p>
<p><strong>黄朋全20:24:54</strong></p>
<p>行尾</p>
<p><strong>耗子20:24:58</strong></p>
<p>哦</p>
<p><strong>黄朋全20:25:02</strong></p>
<p>我是java程序员！！！！</p>
<p><strong>张静20:25:05</strong></p>
<p>呵呵，都是java</p>
<p><strong>耗子20:26:33</strong></p>
<h2 id="换行">换行</h2>
<p>刚说到换行的问题</p>
<p>现在有几种情况</p>
<p>一种比如函数的形参很多，最后一个逗号是否换行呢</p>
<p><strong>牛牛20:27:21</strong></p>
<p>换行</p>
<p><strong>刘林-PHP开发20:27:26</strong></p>
<p>要换行都换行</p>
<p><strong>黄朋全20:27:32</strong></p>
<p>java里不建议传很多参数。如果参数太多的话就直接传对象了。</p>
<p><strong>刘林-PHP开发20:27:41</strong></p>
<p>前面的逗号也换</p>
<p><strong>耗子20:27:42</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">functon (a, b, <span class="built_in">c</span>, d, e,</div><div class="line">        f) {</div><div class="line">   <span class="comment">//这样？</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>张静20:28:19</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">(a,</span></span></div><div class="line">         b,</div><div class="line">         c,</div><div class="line">         d,</div><div class="line">         e,</div><div class="line">         f){</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>黄朋全20:28:20</strong></p>
<p>java这个比较自由，好像都可以。</p>
<p><strong>耗子20:28:22</strong></p>
<p>嗯<br>js中也不建议传太多参，形参有顺序问题，维护和记忆都很累</p>
<p><strong>耗子20:28:43</strong></p>
<p>nodejs风格中是喜欢把逗号写在行首的</p>
<p><strong>耗子20:29:29</strong></p>
<p>如果是私有方法，可以多参，如果是开放出去的api，建议用对象的方式传参</p>
<p><strong>黄朋全20:30:16</strong></p>
<p>恩。这个原则大体都差不多。</p>
<p><strong>牛牛20:30:19</strong></p>
<p>现在android里面intent<br>是都采用键值对来传参</p>
<p><strong>牛牛20:30:24</strong></p>
<p>这样可以解耦</p>
<p><strong>牛牛20:30:44</strong></p>
<p>不过代价是写代码的时候感觉有点啰嗦</p>
<p><strong>耗子20:30:48</strong></p>
<p>为什么能解耦呢？</p>
<p><strong>牛牛20:31:02</strong></p>
<p>因为键值对不是特定的对象</p>
<p><strong>张静20:31:15</strong></p>
<p>是不是Map</p>
<p><strong>黄朋全20:31:30</strong></p>
<p>不是</p>
<p><strong>黄朋全20:31:38</strong></p>
<p>bundle</p>
<p><strong>黄朋全20:31:45</strong></p>
<p>另一种结构对象</p>
<p><strong>张静20:31:59</strong></p>
<p>哦，不是<key, value=""></key,></p>
<p><strong>牛牛20:32:03</strong></p>
<p>访问方式也是keyvalue了 不过是序列化的</p>
<p><strong>黄朋全20:32:23</strong></p>
<p>是key，value，但不是简单的key，value。</p>
<p><strong>张静20:32:44</strong></p>
<p>哦</p>
<p><strong>耗子20:32:57</strong></p>
<p>朋全可以给个示例么<br>什么样的代码格式？</p>
<p><strong>黄朋全20:33:15</strong></p>
<p>Bundle b = new Bundle();</p>
<p><strong>牛牛20:33:36</strong></p>
<p>这样另外一方使用的时候不需要引用这个模块里面的对象结构<br>只要知道那几个参数就好了<br>传对象很恶心 大家都要import同一个包 一改的话容易出问题</p>
<p><strong>黄朋全20:33:38</strong></p>
<p>b.put(“a”, “this”);</p>
<p><strong>黄朋全20:33:49</strong></p>
<p>跟map的用法是一样的。</p>
<p><strong>牛牛20:34:29</strong></p>
<p>get的部分<br><img src="/uploads/default/474/7ae8c91b2d43956e.bmp" width="418" height="104"></p>
<p><strong>牛牛20:34:26</strong></p>
<p><strong>耗子20:34:57</strong></p>
<p>哦，貌似像无序的名值数组</p>
<p><strong>牛牛20:35:09</strong></p>
<p>缺点就是感觉特别繁琐</p>
<p><strong>黄朋全20:35:13</strong></p>
<p>你的代码里太多常量字符串了。</p>
<p><strong>黄朋全20:35:17</strong></p>
<p>容易出问题。</p>
<p><strong>牛牛20:35:21</strong></p>
<p>呵呵是的</p>
<p><strong>牛牛20:35:31</strong></p>
<p>这种写法容易出错</p>
<p><strong>黄朋全20:35:45</strong></p>
<p>提出来，存和取都用同一套就不会出问题了。</p>
<p><strong>牛牛20:36:04</strong></p>
<p>现在都在改</p>
<p><strong>黄朋全20:36:20</strong></p>
<p>咱们好像是在学js</p>
<p><strong>耗子20:36:24</strong></p>
<p>哈哈<br>咱们可以从牛牛的这段示例代码中展开讨论</p>
<p><strong>黄朋全20:36:27</strong></p>
<p>不是Android.</p>
<p><strong>牛牛20:36:44</strong></p>
<p>我有一些把keyvalue改成传N个参数了</p>
<p><strong>牛牛20:36:47</strong></p>
<p><strong>耗子20:36:45</strong></p>
<p>正准备讲js里变量的命名呢</p>
<p><strong>耗子20:37:10</strong></p>
<p>@牛牛的这段代码里命名有什么问题没？</p>
<p><strong>牛牛20:37:17</strong></p>
<p>就是觉得这个方法传多个参数代码行数太多了 啰嗦的一塌糊涂</p>
<p><strong>周娜20:37:38</strong></p>
<p>提出来？不是很明白这意思</p>
<p><strong>牛牛20:37:52</strong></p>
<p>就是不要用 hardcode</p>
<p><strong>牛牛20:37:53</strong></p>
<p>字符串</p>
<p><strong>牛牛20:37:58</strong></p>
<p>“dodododo”</p>
<p><strong>黄朋全20:38:03</strong></p>
<p>把Key值先定义。存和取都用变量名。</p>
<p><strong>小妹20:38:13</strong></p>
<p>写死</p>
<p><strong>牛牛20:38:15</strong></p>
<p>因为字符串是很容易敲错的</p>
<p><strong>黄朋全20:38:30</strong></p>
<p>你key指定义成什么其实不重要，重要的是你认识。</p>
<p><strong>牛牛20:38:32</strong></p>
<p>这个lint都会给提示出来的 其实</p>
<p><strong>小妹20:38:33</strong></p>
<p>可以用config={}来写这些可变的配置变量</p>
<p><strong>耗子20:38:40</strong></p>
<p>乌龟书上对变量的命名有一些约定</p>
<p><strong>牛牛20:38:54</strong></p>
<p>嗯</p>
<p><strong>耗子20:39:00</strong></p>
<p>虽然是立足js<br>但是我想大家都能用</p>
<p><strong>牛牛20:39:16</strong></p>
<p>哎呦 命名上次其实就有讨论的</p>
<p><strong>牛牛20:39:25</strong></p>
<p>同一个名次大家命名不同 比如手机</p>
<p><strong>黄朋全20:39:29</strong></p>
<p>干哪一行，应该守哪一行的规矩。</p>
<p><strong>耗子20:39:33</strong></p>
<h2 id="变量声明">变量声明</h2>
<p>先说下js里的变量声明吧</p>
<p>@小妹，你来说下js里有哪些方式声明变量吧</p>
<p><strong>牛牛20:39:39</strong></p>
<p>有人写Phone 有人写Cell 有人写Mobile</p>
<p><strong>牛牛20:40:02</strong></p>
<p>各种奇形怪状</p>
<p><strong>小妹20:40:03</strong></p>
<p>声明变量的方式是吗？</p>
<p><strong>耗子20:40:06</strong></p>
<p>嗯</p>
<p><strong>小妹20:40:21</strong></p>
<p>不就是var一个变量吗</p>
<p><strong>小妹20:40:28</strong></p>
<p><strong>耗子20:40:27</strong></p>
<p>哈，var是一个</p>
<p><strong>牛牛20:40:40</strong></p>
<p>还有人写handset</p>
<p><strong>黄朋全20:40:41</strong></p>
<p>function</p>
<p><strong>黄朋全20:40:45</strong></p>
<p>是不是？</p>
<p><strong>耗子20:40:55</strong></p>
<p>嗯<br>对<br>具名函数也是</p>
<p><strong>黄朋全20:41:00</strong></p>
<p>对象的声明</p>
<p><strong>小妹20:41:01</strong></p>
<p>然后刚才的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var config </span>=<span class="string">{变量1：“value1”}</span></div></pre></td></tr></table></figure>

<p><strong>耗子20:41:25</strong></p>
<p>另外ecma5中开始有const了</p>
<p><strong>黄朋全20:41:31</strong></p>
<p>还有匿名对象</p>
<p><strong>牛牛20:41:46</strong></p>
<p>额 话说 你们现在说的是命名 还是说声明变量的位置</p>
<p><strong>小妹20:41:47</strong></p>
<p>哦 const我要研究研究</p>
<p><strong>耗子20:41:47</strong></p>
<p>不过const大部分浏览器不不支持</p>
<p><strong>小妹20:41:56</strong></p>
<p>命名吧</p>
<p><strong>小妹20:41:59</strong></p>
<p>回归这个话题</p>
<p><strong>小妹20:42:07</strong></p>
<p>乌龟书上说</p>
<p><strong>小妹20:42:25</strong></p>
<p>变量命名要简洁而有具体的意思</p>
<p><strong>小妹20:42:35</strong></p>
<p>不要命名成foo，tmp等的</p>
<p><strong>牛牛20:42:36</strong></p>
<p>偶们项目里面遇到的命名问题还是挺多的<br>经常出现名字和内容不符合的</p>
<p><strong>耗子20:42:47</strong></p>
<p>正因为js声明变量的方式大部分情况下只能使用var<br>js里之前一直连常量和私有属性都没有</p>
<p><strong>牛牛20:42:53</strong></p>
<p>还有就是名字的含义比较模糊的</p>
<p><strong>小妹20:43:04</strong></p>
<p>像i,j之类的只能放在循环里面</p>
<p><strong>耗子20:43:06</strong></p>
<p>所以更需要在命名上做约定</p>
<p><strong>牛牛20:43:41</strong></p>
<p>乌龟书上讲了一个 namespase</p>
<p><strong>黄朋全20:43:42</strong></p>
<p>java里面局部变量写起来就比较随意。类变量命名特别严格。</p>
<p><strong>牛牛20:43:44</strong></p>
<p>namespace</p>
<p><strong>耗子20:43:42</strong></p>
<p>比如我们会约定<br>var HELLO;为一个常量，使用全大写</p>
<p><strong>小妹20:43:48</strong></p>
<p>像name ，title等命名的变量就肯定是String类型的</p>
<p><strong>耗子20:43:59</strong></p>
<p>其实事实上它还是能被改变的</p>
<p><strong>小妹20:44:05</strong></p>
<p>count等的就肯定是Number类型的</p>
<p><strong>小妹20:44:16</strong></p>
<p>不建议改变类型</p>
<p><strong>耗子20:44:18</strong></p>
<p>嗯</p>
<p><strong>小妹20:44:45</strong></p>
<p>因为这样看代码的人会凌乱的</p>
<p><strong>耗子20:44:56</strong></p>
<p>一般如果看到别人用全大写命名的js变量我们一般是不会去重新给它赋值的</p>
<p><strong>小妹20:45:07</strong></p>
<p>因为代码是写给人看的 只是偶尔让机器运行下罢了</p>
<p><strong>耗子20:45:23</strong></p>
<p>另外会使用_开头的变量命名私有属性</p>
<p><strong>小妹20:45:34</strong></p>
<p>嗯</p>
<p><strong>耗子20:45:52</strong></p>
<p>这种方法外人是不应该调用的<br>虽然js中是能够访问到</p>
<p><strong>小妹20:46:01</strong></p>
<p>函数一般以动词开头 get set等</p>
<p><strong>耗子20:46:11</strong></p>
<p>对<br> 小妹说得很对</p>
<p><strong>小妹20:46:25</strong></p>
<p><strong>周娜20:46:29</strong></p>
<p>额，我能否问个问题，常量的意义是什么呢</p>
<p><strong>小妹20:47:01</strong></p>
<p>我觉得是不能被程序改变的变量</p>
<p><strong>耗子20:46:57</strong></p>
<pre><code>好，那你说下
</code></pre><p><strong>aa</strong>这种变量命名一般是标示什么</p>
<p><strong>耗子20:47:31</strong></p>
<p>常量应该在整个程序的生命周期内值不应该发生变化的量</p>
<p><strong>周娜20:47:41</strong></p>
<p>是不是就和上面说的，比如字符串容易写错，就可以用个常量来代替？</p>
<p><strong>黄朋全20:47:57</strong></p>
<p>字符串本身也是常量。</p>
<p><strong>小妹20:48:27</strong></p>
<p>我是觉得字符串容易因为需求或者其他原因 会手动的改动</p>
<p><strong>黄朋全20:48:36</strong></p>
<p>只是两个地方的都是重复的写。不是一个常量。如果其中有一个字符错了。程序就不能正常运行。</p>
<p><strong>小妹20:48:39</strong></p>
<p>如果一个页面多个地方都要改</p>
<p><strong>耗子20:48:38</strong></p>
<p>比如像配置</p>
<p>一个翻页，要求每页显示20条<br>这个PAGE_NUM我们一般命名成全大写，它是不会随便改变的</p>
<p><strong>小妹20:49:06</strong></p>
<p>那就定义一个变量 一个地方改下 其他地方就全改了</p>
<p><strong>小妹20:49:20</strong></p>
<p>嗯 耗子说的对</p>
<p><strong>黄朋全20:49:25</strong></p>
<p>如果提出来。就算常量的值改变，也不影响程序的正常运行。</p>
<p><strong>耗子20:49:31</strong></p>
<p>对</p>
<p><strong>黄朋全20:49:52</strong></p>
<p>这就提高了程序的健壮性。</p>
<p><strong>周娜20:50:03</strong></p>
<p>哦，明白了</p>
<p><strong>耗子20:50:03</strong></p>
<p>ecma5中有const可以定义真正的常量了</p>
<p><strong>耗子20:50:29</strong></p>
<p>定义后的值用程序是改变不了的，只能改代码才能改变</p>
<p><strong>刘林-PHP开发20:50:40</strong></p>
<p>之前呢？</p>
<p><strong>周娜20:50:48</strong></p>
<p><strong>耗子20:50:53</strong></p>
<p>之前没有啊</p>
<p><strong>周娜20:51:03</strong></p>
<p>之前没有</p>
<p><strong>黄朋全20:51:07</strong></p>
<p>js里定义和赋值可以分开吗</p>
<p><strong>耗子20:51:08</strong></p>
<p>ecma5现在还没普及呢</p>
<p><strong>小妹20:51:14</strong></p>
<p>可以</p>
<p><strong>黄朋全20:51:32</strong></p>
<p>那没有赋值前有没有默认值？</p>
<p><strong>耗子20:51:29</strong></p>
<p>@黄朋全 提得问题很好</p>
<p><strong>小妹20:51:42</strong></p>
<p>undefined</p>
<p><strong>小妹20:51:58</strong></p>
<p>undefined也是js里一种数据类型</p>
<p><strong>黄朋全20:52:01</strong></p>
<p>undefined和null有什么区别？</p>
<p><strong>耗子20:52:07</strong></p>
<p>其实js的最佳实践里是建议声明和赋值分开的</p>
<p><strong>小妹20:52:33</strong></p>
<p>我认为undefined是未定义的变量 null一般是指向对象作用的</p>
<p><strong>刘林-PHP开发20:52:41</strong></p>
<p>为什么？</p>
<p><strong>耗子20:53:13</strong></p>
<p>比如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var <span class="variable">a=</span><span class="variable">b=</span><span class="number">1</span>;</div></pre></td></tr></table></figure>

<p>把声明和赋值放在一起，这就是个坑</p>
<p><strong>小妹20:53:52</strong></p>
<p>第一个等号应该是逗号吧 耗子</p>
<p><strong>黄朋全20:53:55</strong></p>
<p>在Java里，类变量有默认值，所以大多是提倡分开赋值。而局部变量必须声明就复制。要不然编译不过。</p>
<p><strong>刘林-PHP开发20:53:56</strong></p>
<p>明白了</p>
<p><strong>小妹20:54:13</strong></p>
<p>你举的这个例子没错吧？还是我看错了？</p>
<p><strong>刘林-PHP开发20:54:18</strong></p>
<p>全局变量了</p>
<p><strong>黄朋全20:54:22</strong></p>
<p>var a=b=1有什么坑？</p>
<p><strong>耗子20:54:20</strong></p>
<p>反面教材</p>
<p><strong>小妹20:54:33</strong></p>
<p>对啊 啥坑啊</p>
<p><strong>小妹20:54:39</strong></p>
<p>耗子 应该没问题啊</p>
<p><strong>耗子20:54:38</strong></p>
<p>b不小心成了全局变量</p>
<p><strong>小妹20:55:04</strong></p>
<p>哦。。</p>
<p><strong>小妹20:55:07</strong></p>
<p>是的</p>
<p><strong>刘林-PHP开发20:55:11</strong></p>
<p>记得耗子以前跟我讲过</p>
<p><strong>黄朋全20:55:31</strong></p>
<p>哦。java写多了，对全局变量没有概念了。</p>
<p><strong>小妹20:55:34</strong></p>
<p>好记性</p>
<p><strong>耗子20:55:36</strong></p>
<p>js中一种极致的做法是是在function里使用单var的做法</p>
<p><strong>小妹20:55:52</strong></p>
<p>我知道</p>
<p><strong>小妹20:56:01</strong></p>
<p>嘿嘿 我可不可以先说下？</p>
<p><strong>耗子20:55:58</strong></p>
<p>一个函数里只出现一个var，所有的声明放在最前面</p>
<p><strong>耗子20:56:02</strong></p>
<p>好哈</p>
<p><strong>小妹20:56:35</strong></p>
<p>就是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var <span class="variable">aaa =</span> xxx,</div><div class="line">     <span class="variable">bbb =</span> xxx,</div><div class="line">     <span class="variable">ccc =</span> xxx;</div></pre></td></tr></table></figure>

<p><strong>黄朋全20:56:35</strong></p>
<p>没有用到多个变量的时候吗</p>
<p><strong>黄朋全20:56:52</strong></p>
<p>这个好像我们同事也讲过。</p>
<p><strong>耗子20:57:04</strong></p>
<p>就是小妹写的那种<br>一次性var完</p>
<p><strong>刘林-PHP开发20:57:28</strong></p>
<p>就是这样写？</p>
<p><strong>黄朋全20:57:33</strong></p>
<p>为啥后面的不var了？</p>
<p><strong>黄朋全20:57:43</strong></p>
<p>当时听就没听明白。</p>
<p><strong>耗子20:57:44</strong></p>
<p>因为是逗号</p>
<p><strong>小妹20:57:49</strong></p>
<p>每行尾巴是个逗号</p>
<p><strong>黄朋全20:58:00</strong></p>
<p>为啥不用分好</p>
<p><strong>黄朋全20:58:03</strong></p>
<p>分号</p>
<p><strong>小妹20:58:19</strong></p>
<p>那就要写很多个var啦</p>
<p><strong>耗子20:58:35</strong></p>
<p>她这种是把声明和初始赋值放在了一起了<br>coffeejs中更极致<br>编译后的代码是这样的:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">var</span> a,b,c;</div><div class="line"><span class="title">a</span> = <span class="number">1</span>;</div><div class="line"><span class="title">b</span> = <span class="number">2</span>;</div><div class="line"><span class="title">c</span> = <span class="number">3</span>;</div></pre></td></tr></table></figure>

<p><strong>刘林-PHP开发20:59:04</strong></p>
<p>这个和c++做法完全相反啊</p>
<p><strong>黄朋全20:59:24</strong></p>
<p>人家是弱语言。</p>
<p><strong>刘林-PHP开发20:59:27</strong></p>
<p>c++里面提倡声明即初始化</p>
<p><strong>黄朋全20:59:28</strong></p>
<p>不是强语言。</p>
<p><strong>耗子20:59:43</strong></p>
<p>这算是js中的最效率的做法，js的引擎这样解析速度最快<br>但事实上开发时不一定是最好的;<br>我建议一类的变量用一个var</p>
<p><strong>小妹21:00:00</strong></p>
<p>嗯</p>
<p><strong>耗子21:00:19</strong></p>
<p>嗯<br>和c++ php都相反</p>
<p><strong>刘林-PHP开发21:00:29</strong></p>
<p>var a,b,c;<br>这样对各个变量的注释都不好写了</p>
<p><strong>牛牛21:00:30</strong></p>
<p>有时候觉得JS真是变态。。。</p>
<p><strong>耗子21:00:37</strong></p>
<p>php好像也是建议尽可能迟地使用变量是吧</p>
<p><strong>小妹21:00:42</strong></p>
<p>嘿嘿 拿他没办法了吧</p>
<p><strong>小妹21:00:51</strong></p>
<p>他就是这么的灵活</p>
<p><strong>牛牛21:00:55</strong></p>
<p>因为JS解释器的关系把</p>
<p><strong>黄朋全21:01:08</strong></p>
<p>php也是脚本语言</p>
<p><strong>黄朋全21:01:20</strong></p>
<p>也是弱类型</p>
<p><strong>牛牛21:01:25</strong></p>
<p>主要原因是 js的变量不声明的时候也能使用</p>
<p><strong>牛牛21:01:27</strong></p>
<p>所以会出错</p>
<p><strong>小妹21:01:44</strong></p>
<p>其实习惯了就好</p>
<p><strong>张静21:01:45</strong></p>
<p>变量的声明和使用尽可能的接近。</p>
<p><strong>黄朋全21:01:48</strong></p>
<p>都是弱语言的特点。</p>
<p><strong>耗子21:01:45</strong></p>
<p>乌龟书的作者个人是建议一类的变量用一个var声明</p>
<p><strong>小妹21:02:08</strong></p>
<p>张静师兄说的对</p>
<p><strong>黄朋全21:02:11</strong></p>
<p>强语言强制不让你那么些。</p>
<p><strong>耗子21:02:29</strong></p>
<p>另外<br>js里严禁在循环体、条件分支里声明变量</p>
<p><strong>小妹21:02:36</strong></p>
<p>不靠的近的话 读代码的人 还要移开视线到很前面去看声明</p>
<p><strong>牛牛21:02:37</strong></p>
<p>书上那个例子是这样的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=<span class="keyword">value</span>+<span class="number">10</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">value</span>=<span class="number">10</span></div></pre></td></tr></table></figure>

<p>这样也不会报错 然后真正运行的时候 就傻咯</p>
<p><strong>耗子21:02:34</strong></p>
<p>坑很多</p>
<p><strong>黄朋全21:02:53</strong></p>
<p>？</p>
<p><strong>耗子21:02:59</strong></p>
<p>结果是NaN</p>
<p><strong>张静21:03:06</strong></p>
<p>可以先使用，后声明？</p>
<p><strong>小妹21:03:09</strong></p>
<p>对的</p>
<p><strong>牛牛21:03:14</strong></p>
<p>这就是变态的地方。。。</p>
<p><strong>刘林-PHP开发21:03:24</strong></p>
<p><strong>牛牛21:03:28</strong></p>
<p>写错了不知道</p>
<p><strong>黄朋全21:03:29</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span> + <span class="number">10</span> = <span class="literal">NaN</span>?</div></pre></td></tr></table></figure>

<p><strong>耗子21:03:31</strong></p>
<p>昂</p>
<p><strong>刘林-PHP开发21:03:41</strong></p>
<p>这程序不是给人看的啊</p>
<p><strong>小妹21:03:46</strong></p>
<p>他是先</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">value</span>;</div><div class="line"><span class="keyword">var</span> x=<span class="keyword">value</span>+<span class="number">10</span></div><div class="line">然后<span class="keyword">value</span>=<span class="number">10</span></div></pre></td></tr></table></figure>

<p><strong>小妹21:04:01</strong></p>
<p>解析的时候是这样的</p>
<p><strong>小妹21:04:17</strong></p>
<p>所以就成了undefined+10赋给x</p>
<p><strong>耗子21:04:13</strong></p>
<p>所以我在这里和大家一起探讨js编程规范<br>就是要在语言风格上规避一些坑</p>
<p><strong>张静21:04:32</strong></p>
<p>js不需要用编译来检查错误。</p>
<p><strong>耗子21:04:30</strong></p>
<p>小妹说得不对</p>
<p><strong>小妹21:04:54</strong></p>
<p>哪不对？</p>
<p><strong>小妹21:05:20</strong></p>
<p>书上就是这么说的吧</p>
<p><strong>耗子21:05:23</strong></p>
<p>他是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x;</div><div class="line"><span class="keyword">var</span> <span class="keyword">value</span>;</div><div class="line">x=<span class="keyword">value</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">value</span>=<span class="number">10</span></div></pre></td></tr></table></figure>

<p><strong>小妹21:05:39</strong></p>
<p>哦 类似这样啦</p>
<p><strong>小妹21:05:43</strong></p>
<p>没注意x</p>
<p><strong>牛牛21:05:56</strong></p>
<p>耗资 精确</p>
<p><strong>小妹21:05:57</strong></p>
<p>嘿嘿</p>
<p><strong>牛牛21:06:16</strong></p>
<p>不过是不是NaN?</p>
<p><strong>牛牛21:06:20</strong></p>
<p>不记得了</p>
<p><strong>小妹21:06:26</strong></p>
<p>是NaN</p>
<p><strong>耗子21:06:28</strong></p>
<pre><code> 这个有点绕了
</code></pre><p>小妹<br>咱们只聊规范吧</p>
<p>这个估计把各位师兄都忽悠傻了</p>
<p><strong>小妹21:06:41</strong></p>
<p>哦哦</p>
<p><strong>小妹21:06:53</strong></p>
<p>不会的 师兄们很强大的</p>
<p><strong>黄朋全21:06:59</strong></p>
<p>不经过编译的语言坑太多了。</p>
<p><strong>耗子21:07:13</strong></p>
<p>其实有些工具可以实现检查</p>
<p><strong>牛牛21:07:33</strong></p>
<p>JSLint</p>
<p><strong>牛牛21:07:40</strong></p>
<p>JSHint啊是？</p>
<p><strong>小妹21:07:41</strong></p>
<p>我知道有jslint和jshint等的</p>
<p><strong>小妹21:07:59</strong></p>
<p>但是在ide里折腾半天没出来</p>
<p><strong>牛牛21:08:00</strong></p>
<p>但是有人用过么。。。</p>
<p><strong>耗子21:08:08</strong></p>
<p>是的<br>道格拉斯爷爷写的检查工具</p>
<p>下节课可以和大家一起装来玩列</p>
<p><strong>黄朋全21:08:15</strong></p>
<p>好像都听说过。他们js分享的时候都没好好听。哎</p>
<p><strong>牛牛21:08:24</strong></p>
<p>eclipse方便 自己集成Jlint了。。。</p>
<p><strong>小妹21:08:36</strong></p>
<p>但是我的apatana就是基于eclipse啊</p>
<p><strong>小妹21:08:44</strong></p>
<p>但是还是没出来jslint</p>
<p><strong>牛牛21:08:44</strong></p>
<p>Jlint</p>
<p><strong>小妹21:08:57</strong></p>
<p>根据网上的配置已经配了</p>
<p><strong>小妹21:09:11</strong></p>
<p>但是还是不能实现实时监控</p>
<p><strong>牛牛21:09:22</strong></p>
<p>乃们可以自己写一个。。。</p>
<p><strong>牛牛21:09:23</strong></p>
<p>。。。。</p>
<p><strong>牛牛21:09:29</strong></p>
<p>插件</p>
<p><strong>耗子21:09:49</strong></p>
<p>可以在save时做勾子<br>每次save自动检测</p>
<p><strong>牛牛21:10:00</strong></p>
<p>耗子同学配成功了么</p>
<p><strong>小妹21:10:05</strong></p>
<p>哦哦</p>
<p><strong>耗子21:10:10</strong></p>
<p>我用sublime配的</p>
<p><strong>小妹21:10:20</strong></p>
<p>save不是就是ctrl+s</p>
<p><strong>小妹21:10:22</strong></p>
<p>吗</p>
<p><strong>小妹21:10:28</strong></p>
<p>怎么配啊</p>
<p><strong>牛牛21:10:36</strong></p>
<p>袄 也可以链到F5</p>
<p><strong>牛牛21:10:39</strong></p>
<p>。。。</p>
<p><strong>耗子21:10:57</strong></p>
<p>下节课再讲那个了</p>
<p><strong>小妹21:11:08</strong></p>
<p>哦</p>
<p><strong>小妹21:11:15</strong></p>
<p>那就期待下节课啦</p>
<p><strong>耗子21:11:30</strong></p>
<p>@张继霞和@雪花师姐一直没发言哦</p>
<p><strong>牛牛21:12:43</strong></p>
<p>下节讲部署工具？</p>
<p><strong>牛牛21:13:17</strong></p>
<p>话说命名其实我一直在想应该有项目术语词典 统一用词</p>
<p><strong>耗子21:13:28</strong></p>
<p>嗯<br>不部署工具这些都还只是规范<br>用着用着就忘记了</p>
<p><strong>耗子21:14:02</strong></p>
<p>命名我们再讨论下吧</p>
<p>刚说到了js中的一些命名约定</p>
<p><strong>耗子21:15:04</strong></p>
<p>比如全大写+下划线表示常量<br><em>开头表示私有属性<br><em>_开头</em></em>结尾表示私有方法<br>首字母大写表示类/构造函数</p>
<p><strong>小妹21:15:23</strong></p>
<p>嗯</p>
<h2 id="命名">命名</h2>
<p><strong>耗子21:16:07</strong></p>
<p>那么牛牛<br>你们一般是怎么约定命名的呢</p>
<p><strong>牛牛21:16:25</strong></p>
<p>就是几乎没有约束</p>
<p><strong>耗子21:16:19</strong></p>
<p>比如你刚说的phone还是mobile</p>
<p><strong>牛牛21:16:38</strong></p>
<p>所以一会phone 一会mobile</p>
<p><strong>耗子21:16:35</strong></p>
<p>都在自己的命名空间下是吧</p>
<p><strong>牛牛21:16:54</strong></p>
<p>这种名字还好 因为歧义不是很大</p>
<p><strong>耗子21:17:01</strong></p>
<p>这个@黄朋全 师兄应该有经验</p>
<p><strong>刘林-PHP开发21:17:24</strong></p>
<p>go语言有意思，大写的是public的，小写的是private的</p>
<p><strong>黄朋全21:17:28</strong></p>
<p>我命名都是长命名</p>
<p><strong>黄朋全21:17:45</strong></p>
<p>都是几个单词拼写在一块的。</p>
<p><strong>耗子21:17:58</strong></p>
<p>js要考虑字节数<br>不是很建议太长的命名</p>
<p><strong>黄朋全21:18:05</strong></p>
<p>局部变量才会用单个词去命名。</p>
<p><strong>牛牛21:18:11</strong></p>
<p>有一些就会歧义比较多了<br>倒不是长和短了就是同一个东西 会用不同的单词</p>
<p><strong>黄朋全21:18:35</strong></p>
<p>后面一个事名词，前面是形容词。</p>
<p><strong>黄朋全21:18:47</strong></p>
<p>或者是几个名词</p>
<p><strong>牛牛21:18:54</strong></p>
<p>同一个事物 可以用若干种名词来表示</p>
<p><strong>黄朋全21:19:17</strong></p>
<p>这个得看团队。</p>
<p><strong>黄朋全21:19:46</strong></p>
<p>比如说activity，我原来的项目写都是用activity结尾。</p>
<p><strong>牛牛21:19:54</strong></p>
<p>嗯 比如说用户名称 一会是username一会是useracount 一会是userLoginName</p>
<p><strong>黄朋全21:19:55</strong></p>
<p>现在都以screen结尾。</p>
<p><strong>黄朋全21:20:12</strong></p>
<p>是一个人写的吗？</p>
<p><strong>牛牛21:20:16</strong></p>
<p>请忽略大小写问题 不同人</p>
<p><strong>牛牛21:20:25</strong></p>
<p>同一个人一般习惯会比较统一</p>
<p><strong>黄朋全21:20:28</strong></p>
<p>后人要遵循前人写的变量。</p>
<p><strong>黄朋全21:20:52</strong></p>
<p>不能由着自己性子来。这也是依师嘛。</p>
<p><strong>黄朋全21:21:11</strong></p>
<p>这类的命名没办法强制约束。</p>
<p><strong>黄朋全21:21:28</strong></p>
<p>只能后来的人尊重前面的人的命名。</p>
<p><strong>黄朋全21:21:54</strong></p>
<p>只去修改逻辑，不要再改别人的命名。</p>
<p><strong>耗子21:21:49</strong></p>
<p>乌龟书上第11页开始讲了几种命名规定<br>1、普通变量使用小驼峰</p>
<p>2、变量使用名词</p>
<p>3、函数使用动词 大部分用get set开头</p>
<p>4、类使用名词，首字母大写</p>
<p>5、flag使用is can has前缀</p>
<p><strong>牛牛21:22:17</strong></p>
<p>这些约定还是比较好遵守的</p>
<p><strong>小妹21:22:25</strong></p>
<p>嗯</p>
<p><strong>黄朋全21:22:26</strong></p>
<p>java里还有，接口以able结尾。呵呵</p>
<p><strong>耗子21:22:45</strong></p>
<p>@黄朋全 后人要遵循前人写的变量。<br>这在乌龟书第十一章“不是你的对象不要动”里有讲到</p>
<p><strong>小妹21:23:04</strong></p>
<p>嗯</p>
<p><strong>小妹21:23:10</strong></p>
<p>没错</p>
<p><strong>小妹21:23:21</strong></p>
<p>我今天刚好看到第11章</p>
<p><strong>牛牛21:23:35</strong></p>
<p>我们的代码风格里面能找到好多反面教材</p>
<p><strong>牛牛21:23:42</strong></p>
<p>其实就是没风格</p>
<p><strong>耗子21:23:35</strong></p>
<p>小妹很精进哦</p>
<p><strong>牛牛21:23:46</strong></p>
<p>。。。各自为战</p>
<p><strong>黄朋全21:24:05</strong></p>
<p>你把自己的风格写好。大家都喜欢了，自然就会学你的写法。</p>
<p><strong>牛牛21:25:12</strong></p>
<p>偶们的命名 还有拼音</p>
<p><strong>牛牛21:25:16</strong></p>
<p>还有简拼</p>
<p><strong>小妹21:25:25</strong></p>
<p>那会坑死人啊</p>
<p><strong>牛牛21:25:36</strong></p>
<p>还有用数字的</p>
<p><strong>牛牛21:25:42</strong></p>
<p>View1 View2View3</p>
<p><strong>黄朋全21:25:45</strong></p>
<p>简拼还有啊？这个用一下google translate也不麻烦吧？</p>
<p><strong>牛牛21:25:47</strong></p>
<p>坑死人不偿命</p>
<p><strong>黄朋全21:25:56</strong></p>
<p>至于懒到这种程度？</p>
<p><strong>小妹21:26:06</strong></p>
<p>扔在那 让你猜去</p>
<p><strong>牛牛21:26:18</strong></p>
<p>不是懒 这种更麻烦</p>
<p><strong>耗子21:26:24</strong></p>
<p>哈哈</p>
<p>后端有门好，代码写得烂外人不知道<br>前端就是门面<br>你命名得不好整个公司的脸都让你丢了</p>
<p><strong>牛牛21:26:36</strong></p>
<p>看代码都不知道干嘛的 要理解半天</p>
<p><strong>牛牛21:26:48</strong></p>
<p>名字没有任何特征</p>
<p><strong>小妹21:26:49</strong></p>
<p>就是</p>
<p><strong>牛牛21:26:49</strong></p>
<p>。。。</p>
<p><strong>牛牛21:26:56</strong></p>
<p>还好不是前端</p>
<p><strong>牛牛21:27:05</strong></p>
<p>还有更变态的</p>
<p><strong>小妹21:27:11</strong></p>
<p>前端是公司的形象代言人</p>
<p><strong>黄朋全21:27:13</strong></p>
<p>你可以给大家分享啊</p>
<p><strong>牛牛21:27:27</strong></p>
<p>用一个通用数组把所有对象都放在里面</p>
<p><strong>牛牛21:27:49</strong></p>
<p>然后访问的时候something[1] something[2]</p>
<p><strong>牛牛21:27:55</strong></p>
<p>更看不懂</p>
<p><strong>黄朋全21:28:08</strong></p>
<p>这个……，就先别观过了。太伤心神。</p>
<p><strong>小妹21:28:15</strong></p>
<p>所以嘛 代码就是给人看的</p>
<p><strong>牛牛21:28:19</strong></p>
<p>不过理解的</p>
<p><strong>黄朋全21:28:23</strong></p>
<p>还是努力把自己代码写好吧。</p>
<p><strong>耗子21:28:16</strong></p>
<p>这在js里叫单例模式<br>jq ext这些库都是严格的单例模式<br>只会暴露一个全局变量</p>
<p><strong>牛牛21:28:34</strong></p>
<p>这个是一个过程</p>
<p><strong>牛牛21:28:48</strong></p>
<p>它这么写 是考虑到了某些方面的</p>
<p><strong>牛牛21:28:55</strong></p>
<p>所以忽略了命名</p>
<p><strong>耗子21:28:57</strong></p>
<p>时间不早了<br>第一章的内容基本今晚串完了</p>
<p><strong>小妹21:29:29</strong></p>
<p><strong>耗子21:29:21</strong></p>
<p>建议大家课后看下书哈<br>书上讲得更细心</p>
<p><strong>耗子 22:21:45</strong></p>
<p>结论还是乌龟书上的建议</p>
<p><strong>江天 22:22:09</strong></p>
<p>恩。</p>
<h2 id="总结">总结</h2>
<p><strong>耗子 22:22:18</strong><br>我们来总结一下吧：</p>
<p>1、一套风格应该尽可能地统一<br>不应该有三个以上的特例</p>
<p><strong>江天 22:22:41</strong></p>
<p>and ?</p>
<p><strong>耗子 22:22:54</strong></p>
<p>2、尽量前后端保持一致，使学习成本减少<br>也方便ide统一配置</p>
<p><strong>耗子 22:23:20</strong></p>
<p>今天和大家一起，也让我到了别的语言中的一些行规</p>
<p><strong>耗子 22:24:09</strong></p>
<p>3、通过编程规范绕过语言一些不为人知的坑</p>
<p><strong>耗子 22:25:10</strong></p>
<p>4、光有规范不够，需要有工具来强制实施<br>人记不住所有的规则</p>
<p><strong>江天 22:26:10</strong></p>
<p>恩。 一共4条？</p>
<p><strong>牛牛 22:26:22</strong></p>
<p>还有尽量都用统一的IDE</p>
<p><strong>牛牛 22:26:25</strong></p>
<p><strong>耗子 22:26:15</strong></p>
<p>憋不出来了</p>
<p><strong>江天 22:26:46</strong></p>
<p>够可以的了。</p>
<p>具体到一个项目时，可能前后端还得根据乌龟书上的原则，具体商定该项目的编码规范及使用的工具。</p>
]]></content>
    <summary type="html"><![CDATA[<p> 日期: 2013-06-03</p>
<p><strong>耗子20:07:02</strong></p>
<p>今天我们想讨论的是js的一些编程风格上的规范</p>
<p><strong>耗子20:07:48</strong></p>
<p>@张静师兄<br>您公司项目中有对js的编程风格有要求么 ？</p>
<p><strong>刘林-PHP开发20:07:48</strong></p>
<p>具体点呢？</p>
<p><strong>耗子20:08:18</strong></p>
<p>大家都可以谈一谈啊，包括别的语言的一些风格</p>
<p><strong>张静20:08:21</strong></p>
<p>没有，我们公司基本用的都是很简单的JS。</p>
<p><strong>张静20:08:29</strong></p>
<p>比较乱。</p>
<p><strong>耗子20:09:02</strong></p>
<p>@刘林师兄 ?<br>]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[【共学】《编写可维护的javascript》01-基本的格式化]]></title>
    <link href="http://haozi.de/post/01-%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%20(%E5%A4%8D%E4%BB%B6)/"/>
    <id>http://haozi.de/post/01-基本的格式化 (复件)/</id>
    <published>2013-06-03T15:43:31.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p> 日期: 2013-06-03</p>
<p><strong>耗子20:07:02</strong></p>
<p>今天我们想讨论的是js的一些编程风格上的规范</p>
<p><strong>耗子20:07:48</strong></p>
<p>@张静师兄<br>您公司项目中有对js的编程风格有要求么 ？</p>
<p><strong>刘林-PHP开发20:07:48</strong></p>
<p>具体点呢？</p>
<p><strong>耗子20:08:18</strong></p>
<p>大家都可以谈一谈啊，包括别的语言的一些风格</p>
<p><strong>张静20:08:21</strong></p>
<p>没有，我们公司基本用的都是很简单的JS。</p>
<p><strong>张静20:08:29</strong></p>
<p>比较乱。</p>
<p><strong>耗子20:09:02</strong></p>
<p>@刘林师兄 ?<br><a id="more"></a></p>
<p><strong>耗子20:09:28</strong></p>
<p>@小妹你们公司对这块要求应该很严谨吧</p>
<p><strong>小妹20:10:08</strong></p>
<p>嗯 是有要求的</p>
<p><strong>刘林-PHP开发20:10:17</strong></p>
<p>我算没写js的人了</p>
<p><strong>刘林-PHP开发20:10:27</strong></p>
<p>对规范没啥概念</p>
<p><strong>耗子20:10:35</strong></p>
<h2 id="缩进">缩进</h2>
<p>比如缩进<br>你们是怎么要求的<br>1个tab还是4个空格？</p>
<p><strong>张静20:10:52</strong></p>
<p>其他语言是4个空格</p>
<p><strong>小妹20:10:52</strong></p>
<p>但是像可维护的js里面讲的那么细致的 还是少 总之我们还是没那么完美的</p>
<p><strong>耗子20:10:53</strong></p>
<p>php和java中应该也都有类似的规范的</p>
<p><strong>张静20:11:08</strong></p>
<p>Java是4个空格</p>
<p><strong>耗子20:11:26</strong></p>
<p>一行现在 遵守80个字符么</p>
<p><strong>张静20:11:42</strong></p>
<p>现在屏幕大了，80个字符少了些，呵呵！</p>
<p><strong>小妹20:11:55</strong></p>
<p>80个字符的那个是我看了这本书才知道的 总之我们之前还是不规范</p>
<p><strong>黄朋全20:12:01</strong></p>
<p>js一个tab两个空格</p>
<p><strong>朱雪花20:12:08</strong></p>
<p>80 个是怎么数出来的？</p>
<p><strong>小妹20:12:09</strong></p>
<p>括弧（我们部门不规范）</p>
<p><strong>黄朋全20:12:08</strong></p>
<p>我们部门</p>
<p><strong>刘林-PHP开发20:12:09</strong></p>
<p>是啊，web一般不是120个字符么？</p>
<p><strong>黄朋全20:12:20</strong></p>
<p>800*600屏幕</p>
<p><strong>小妹20:12:21</strong></p>
<p>不是的</p>
<p><strong>小妹20:12:27</strong></p>
<p>70或者80个字符</p>
<p><strong>张静20:12:45</strong></p>
<p>只有不拉左右的滚动条就可以了。</p>
<p><strong>耗子20:12:46</strong></p>
<p>《编写可维护的javascript》(以下简称乌龟书)<br>中提到当换行时应该缩进2个层级</p>
<p><strong>黄朋全20:12:48</strong></p>
<p>原来屏幕小。以800*600为标准，规定的80个字符</p>
<p><strong>黄朋全20:13:11</strong></p>
<p>现在屏幕都大了。这个要求就不怎么试用了。</p>
<p><strong>张静20:13:19</strong></p>
<p>2个层级，是不是4个空格。</p>
<p><strong>小妹20:13:48</strong></p>
<p>字符数跟屏幕大小有关系吗，耗子？</p>
<p><strong>耗子20:13:53</strong></p>
<p>怎么样缩进我觉得需要前后端基本保持一致<br>整个网站可能都在一个ide下开发前后端代码，如果有两套不同的风格人是会抽疯的</p>
<p><strong>刘林-PHP开发20:14:27</strong></p>
<p>这个同意</p>
<p><strong>耗子20:14:28</strong></p>
<p>所以很希望大家聊聊各自工作中的习惯</p>
<p><strong>张静20:14:29</strong></p>
<p>嗯，我们是在eclipse写js的。</p>
<p><strong>黄朋全20:14:44</strong></p>
<p>我是完全的java规范</p>
<p><strong>耗子20:14:52</strong></p>
<p>嗯<br>屏幕大了，一行可以多放些字符</p>
<p><strong>牛牛20:14:57</strong></p>
<p>额 习惯是Ctrl+Shift+f</p>
<p><strong>黄朋全20:15:09</strong></p>
<p>这个可以定制的。</p>
<p><strong>张静20:15:16</strong></p>
<p>呵呵！</p>
<p><strong>耗子20:15:29</strong></p>
<p>貌似4个空格大家用得比较多？</p>
<p><strong>黄朋全20:15:43</strong></p>
<p>空行，空格，字符数都是可以调整的。</p>
<p><strong>牛牛20:15:58</strong></p>
<p>默认</p>
<p><strong>张静20:15:59</strong></p>
<p>嗯，ide会帮忙缩进的。</p>
<p><strong>牛牛20:16:19</strong></p>
<p>我的习惯是能不动就不动。。。懒人原则</p>
<p><strong>牛牛20:16:20</strong></p>
<p>。。。</p>
<p><strong>耗子20:16:26</strong></p>
<p>google的编程风格是约定2个空格<br>我尝试过一段时间，感觉写html这种很容易多级嵌套的还不错，但写js时，感觉缩进有些小，不太舒服</p>
<p><strong>耗子20:17:09</strong></p>
<h2 id="结尾分号">结尾分号</h2>
<p>java和php貌似语句结尾必须要打分号的是么？</p>
<p><strong>张静20:17:20</strong></p>
<p>是的</p>
<p><strong>张静20:17:30</strong></p>
<p>js可以不用</p>
<p><strong>耗子20:17:30</strong></p>
<p>function呢？</p>
<p><strong>张静20:17:46</strong></p>
<p>语句才需要</p>
<p><strong>牛牛20:17:52</strong></p>
<p>方法结尾不需要;</p>
<p><strong>刘林-PHP开发20:17:57</strong></p>
<p>google c++也都缩进2个空格</p>
<p><strong>耗子20:17:58</strong></p>
<p>js有ASI策略(自动补全分号)</p>
<p><strong>耗子20:18:46</strong></p>
<p>但是asi可能造成一些不在预料之中的bug</p>
<p><strong>刘林-PHP开发20:19:02</strong></p>
<p>譬如呢？</p>
<p><strong>小妹20:19:14</strong></p>
<p>是的 我看到的一个例子 ：</p>
<figure class="highlight return"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">aa</span>:<span class="value"><span class="string">"test"</span></span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>刘林-PHP开发20:19:15</strong></p>
<p>自动补全分号是啥意思？</p>
<p><strong>耗子20:19:20</strong></p>
<p>比如function中如果要return一个对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span></div><div class="line">{</div><div class="line">    <span class="keyword">...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>小妹20:19:32</strong></p>
<p>额</p>
<p><strong>小妹20:19:44</strong></p>
<p>会在return后面加分号</p>
<p><strong>耗子20:19:49</strong></p>
<p>会被js引擎解释成</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span>;</div><div class="line">{</div><div class="line">    <span class="keyword">...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>牛牛20:19:56</strong></p>
<p>就是说你没有添加分号的时候 解释器会按照它自己的理解给语句加上分号</p>
<p><strong>耗子20:19:57</strong></p>
<p>嗯<br>小妹说得对</p>
<p><strong>牛牛20:20:13</strong></p>
<p>就跟咱们括号一样</p>
<p><strong>牛牛20:20:28</strong></p>
<p>编译器会按照它自己的优先级来加括号</p>
<p><strong>耗子20:20:29</strong></p>
<p>这会造成整个函数的返回值为undefined而不是期望的对象</p>
<p><strong>耗子20:21:15</strong></p>
<p>牛牛，c++中是不是喜欢函数的左括号另起一行？</p>
<p><strong>黄朋全20:21:29</strong></p>
<p>这个是。</p>
<p><strong>牛牛20:21:30</strong></p>
<p>嗯 默认的风格是这样</p>
<p><strong>张静20:21:34</strong></p>
<p>看来还是自己加分号，比较保险。</p>
<p><strong>刘林-PHP开发20:21:36</strong></p>
<p>编译器做得太多了了吧</p>
<p><strong>小妹20:21:48</strong></p>
<p>因为js太灵活了</p>
<p><strong>耗子20:21:47</strong></p>
<p>这个风格在js里是不赞成的</p>
<p><strong>牛牛20:22:02</strong></p>
<p><strong>牛牛20:22:10</strong></p>
<p>以前我也都用这风格</p>
<p><strong>黄朋全20:22:30</strong></p>
<p>这就是弱类型的特点。强类型语言什么都管。</p>
<p><strong>耗子20:22:39</strong></p>
<p>因为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span></div><div class="line">{</div><div class="line">    <span class="keyword">...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>这种情况就会出bug<br>所以js保持一致性建议将左括号放在行尾</p>
<p><strong>耗子20:23:01</strong></p>
<p>@牛牛 这是C++吧？</p>
<p><strong>牛牛20:23:11</strong></p>
<p>嗯</p>
<p><strong>张静20:23:11</strong></p>
<p>这个倒是和java规定的是一样的。</p>
<p><strong>耗子20:23:33</strong></p>
<p>@张静师兄 java也有这种坑？</p>
<p><strong>牛牛20:23:35</strong></p>
<p>后来改java之后左括号都是不独占一行的了</p>
<p><strong>张静20:23:43</strong></p>
<p>没有呀</p>
<p><strong>牛牛20:23:56</strong></p>
<p>java没有坑 但是编辑器默认就是这风格。。。</p>
<p><strong>张静20:23:59</strong></p>
<p>只是规范{必须放到行尾。</p>
<p><strong>耗子20:24:02</strong></p>
<p>哦</p>
<p><strong>黄朋全20:24:16</strong></p>
<p>java的坑大多是空指针。</p>
<p><strong>牛牛20:24:36</strong></p>
<p>NullPointException</p>
<p><strong>牛牛20:24:37</strong></p>
<p>。。。</p>
<p><strong>张静20:24:38</strong></p>
<p>可以用NullObject模式。</p>
<p><strong>耗子20:24:41</strong></p>
<p>@黄朋全师兄<br>貌似您平时都是左括号行首？</p>
<p><strong>黄朋全20:24:51</strong></p>
<p>不是</p>
<p><strong>黄朋全20:24:54</strong></p>
<p>行尾</p>
<p><strong>耗子20:24:58</strong></p>
<p>哦</p>
<p><strong>黄朋全20:25:02</strong></p>
<p>我是java程序员！！！！</p>
<p><strong>张静20:25:05</strong></p>
<p>呵呵，都是java</p>
<p><strong>耗子20:26:33</strong></p>
<h2 id="换行">换行</h2>
<p>刚说到换行的问题</p>
<p>现在有几种情况</p>
<p>一种比如函数的形参很多，最后一个逗号是否换行呢</p>
<p><strong>牛牛20:27:21</strong></p>
<p>换行</p>
<p><strong>刘林-PHP开发20:27:26</strong></p>
<p>要换行都换行</p>
<p><strong>黄朋全20:27:32</strong></p>
<p>java里不建议传很多参数。如果参数太多的话就直接传对象了。</p>
<p><strong>刘林-PHP开发20:27:41</strong></p>
<p>前面的逗号也换</p>
<p><strong>耗子20:27:42</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">functon (a, b, <span class="built_in">c</span>, d, e,</div><div class="line">        f) {</div><div class="line">   <span class="comment">//这样？</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>张静20:28:19</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">(a,</span></span></div><div class="line">         b,</div><div class="line">         c,</div><div class="line">         d,</div><div class="line">         e,</div><div class="line">         f){</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>黄朋全20:28:20</strong></p>
<p>java这个比较自由，好像都可以。</p>
<p><strong>耗子20:28:22</strong></p>
<p>嗯<br>js中也不建议传太多参，形参有顺序问题，维护和记忆都很累</p>
<p><strong>耗子20:28:43</strong></p>
<p>nodejs风格中是喜欢把逗号写在行首的</p>
<p><strong>耗子20:29:29</strong></p>
<p>如果是私有方法，可以多参，如果是开放出去的api，建议用对象的方式传参</p>
<p><strong>黄朋全20:30:16</strong></p>
<p>恩。这个原则大体都差不多。</p>
<p><strong>牛牛20:30:19</strong></p>
<p>现在android里面intent<br>是都采用键值对来传参</p>
<p><strong>牛牛20:30:24</strong></p>
<p>这样可以解耦</p>
<p><strong>牛牛20:30:44</strong></p>
<p>不过代价是写代码的时候感觉有点啰嗦</p>
<p><strong>耗子20:30:48</strong></p>
<p>为什么能解耦呢？</p>
<p><strong>牛牛20:31:02</strong></p>
<p>因为键值对不是特定的对象</p>
<p><strong>张静20:31:15</strong></p>
<p>是不是Map</p>
<p><strong>黄朋全20:31:30</strong></p>
<p>不是</p>
<p><strong>黄朋全20:31:38</strong></p>
<p>bundle</p>
<p><strong>黄朋全20:31:45</strong></p>
<p>另一种结构对象</p>
<p><strong>张静20:31:59</strong></p>
<p>哦，不是<key, value=""></key,></p>
<p><strong>牛牛20:32:03</strong></p>
<p>访问方式也是keyvalue了 不过是序列化的</p>
<p><strong>黄朋全20:32:23</strong></p>
<p>是key，value，但不是简单的key，value。</p>
<p><strong>张静20:32:44</strong></p>
<p>哦</p>
<p><strong>耗子20:32:57</strong></p>
<p>朋全可以给个示例么<br>什么样的代码格式？</p>
<p><strong>黄朋全20:33:15</strong></p>
<p>Bundle b = new Bundle();</p>
<p><strong>牛牛20:33:36</strong></p>
<p>这样另外一方使用的时候不需要引用这个模块里面的对象结构<br>只要知道那几个参数就好了<br>传对象很恶心 大家都要import同一个包 一改的话容易出问题</p>
<p><strong>黄朋全20:33:38</strong></p>
<p>b.put(“a”, “this”);</p>
<p><strong>黄朋全20:33:49</strong></p>
<p>跟map的用法是一样的。</p>
<p><strong>牛牛20:34:29</strong></p>
<p>get的部分<br><img src="/uploads/default/474/7ae8c91b2d43956e.bmp" width="418" height="104"></p>
<p><strong>牛牛20:34:26</strong></p>
<p><strong>耗子20:34:57</strong></p>
<p>哦，貌似像无序的名值数组</p>
<p><strong>牛牛20:35:09</strong></p>
<p>缺点就是感觉特别繁琐</p>
<p><strong>黄朋全20:35:13</strong></p>
<p>你的代码里太多常量字符串了。</p>
<p><strong>黄朋全20:35:17</strong></p>
<p>容易出问题。</p>
<p><strong>牛牛20:35:21</strong></p>
<p>呵呵是的</p>
<p><strong>牛牛20:35:31</strong></p>
<p>这种写法容易出错</p>
<p><strong>黄朋全20:35:45</strong></p>
<p>提出来，存和取都用同一套就不会出问题了。</p>
<p><strong>牛牛20:36:04</strong></p>
<p>现在都在改</p>
<p><strong>黄朋全20:36:20</strong></p>
<p>咱们好像是在学js</p>
<p><strong>耗子20:36:24</strong></p>
<p>哈哈<br>咱们可以从牛牛的这段示例代码中展开讨论</p>
<p><strong>黄朋全20:36:27</strong></p>
<p>不是Android.</p>
<p><strong>牛牛20:36:44</strong></p>
<p>我有一些把keyvalue改成传N个参数了</p>
<p><strong>牛牛20:36:47</strong></p>
<p><strong>耗子20:36:45</strong></p>
<p>正准备讲js里变量的命名呢</p>
<p><strong>耗子20:37:10</strong></p>
<p>@牛牛的这段代码里命名有什么问题没？</p>
<p><strong>牛牛20:37:17</strong></p>
<p>就是觉得这个方法传多个参数代码行数太多了 啰嗦的一塌糊涂</p>
<p><strong>周娜20:37:38</strong></p>
<p>提出来？不是很明白这意思</p>
<p><strong>牛牛20:37:52</strong></p>
<p>就是不要用 hardcode</p>
<p><strong>牛牛20:37:53</strong></p>
<p>字符串</p>
<p><strong>牛牛20:37:58</strong></p>
<p>“dodododo”</p>
<p><strong>黄朋全20:38:03</strong></p>
<p>把Key值先定义。存和取都用变量名。</p>
<p><strong>小妹20:38:13</strong></p>
<p>写死</p>
<p><strong>牛牛20:38:15</strong></p>
<p>因为字符串是很容易敲错的</p>
<p><strong>黄朋全20:38:30</strong></p>
<p>你key指定义成什么其实不重要，重要的是你认识。</p>
<p><strong>牛牛20:38:32</strong></p>
<p>这个lint都会给提示出来的 其实</p>
<p><strong>小妹20:38:33</strong></p>
<p>可以用config={}来写这些可变的配置变量</p>
<p><strong>耗子20:38:40</strong></p>
<p>乌龟书上对变量的命名有一些约定</p>
<p><strong>牛牛20:38:54</strong></p>
<p>嗯</p>
<p><strong>耗子20:39:00</strong></p>
<p>虽然是立足js<br>但是我想大家都能用</p>
<p><strong>牛牛20:39:16</strong></p>
<p>哎呦 命名上次其实就有讨论的</p>
<p><strong>牛牛20:39:25</strong></p>
<p>同一个名次大家命名不同 比如手机</p>
<p><strong>黄朋全20:39:29</strong></p>
<p>干哪一行，应该守哪一行的规矩。</p>
<p><strong>耗子20:39:33</strong></p>
<h2 id="变量声明">变量声明</h2>
<p>先说下js里的变量声明吧</p>
<p>@小妹，你来说下js里有哪些方式声明变量吧</p>
<p><strong>牛牛20:39:39</strong></p>
<p>有人写Phone 有人写Cell 有人写Mobile</p>
<p><strong>牛牛20:40:02</strong></p>
<p>各种奇形怪状</p>
<p><strong>小妹20:40:03</strong></p>
<p>声明变量的方式是吗？</p>
<p><strong>耗子20:40:06</strong></p>
<p>嗯</p>
<p><strong>小妹20:40:21</strong></p>
<p>不就是var一个变量吗</p>
<p><strong>小妹20:40:28</strong></p>
<p><strong>耗子20:40:27</strong></p>
<p>哈，var是一个</p>
<p><strong>牛牛20:40:40</strong></p>
<p>还有人写handset</p>
<p><strong>黄朋全20:40:41</strong></p>
<p>function</p>
<p><strong>黄朋全20:40:45</strong></p>
<p>是不是？</p>
<p><strong>耗子20:40:55</strong></p>
<p>嗯<br>对<br>具名函数也是</p>
<p><strong>黄朋全20:41:00</strong></p>
<p>对象的声明</p>
<p><strong>小妹20:41:01</strong></p>
<p>然后刚才的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var config </span>=<span class="string">{变量1：“value1”}</span></div></pre></td></tr></table></figure>

<p><strong>耗子20:41:25</strong></p>
<p>另外ecma5中开始有const了</p>
<p><strong>黄朋全20:41:31</strong></p>
<p>还有匿名对象</p>
<p><strong>牛牛20:41:46</strong></p>
<p>额 话说 你们现在说的是命名 还是说声明变量的位置</p>
<p><strong>小妹20:41:47</strong></p>
<p>哦 const我要研究研究</p>
<p><strong>耗子20:41:47</strong></p>
<p>不过const大部分浏览器不不支持</p>
<p><strong>小妹20:41:56</strong></p>
<p>命名吧</p>
<p><strong>小妹20:41:59</strong></p>
<p>回归这个话题</p>
<p><strong>小妹20:42:07</strong></p>
<p>乌龟书上说</p>
<p><strong>小妹20:42:25</strong></p>
<p>变量命名要简洁而有具体的意思</p>
<p><strong>小妹20:42:35</strong></p>
<p>不要命名成foo，tmp等的</p>
<p><strong>牛牛20:42:36</strong></p>
<p>偶们项目里面遇到的命名问题还是挺多的<br>经常出现名字和内容不符合的</p>
<p><strong>耗子20:42:47</strong></p>
<p>正因为js声明变量的方式大部分情况下只能使用var<br>js里之前一直连常量和私有属性都没有</p>
<p><strong>牛牛20:42:53</strong></p>
<p>还有就是名字的含义比较模糊的</p>
<p><strong>小妹20:43:04</strong></p>
<p>像i,j之类的只能放在循环里面</p>
<p><strong>耗子20:43:06</strong></p>
<p>所以更需要在命名上做约定</p>
<p><strong>牛牛20:43:41</strong></p>
<p>乌龟书上讲了一个 namespase</p>
<p><strong>黄朋全20:43:42</strong></p>
<p>java里面局部变量写起来就比较随意。类变量命名特别严格。</p>
<p><strong>牛牛20:43:44</strong></p>
<p>namespace</p>
<p><strong>耗子20:43:42</strong></p>
<p>比如我们会约定<br>var HELLO;为一个常量，使用全大写</p>
<p><strong>小妹20:43:48</strong></p>
<p>像name ，title等命名的变量就肯定是String类型的</p>
<p><strong>耗子20:43:59</strong></p>
<p>其实事实上它还是能被改变的</p>
<p><strong>小妹20:44:05</strong></p>
<p>count等的就肯定是Number类型的</p>
<p><strong>小妹20:44:16</strong></p>
<p>不建议改变类型</p>
<p><strong>耗子20:44:18</strong></p>
<p>嗯</p>
<p><strong>小妹20:44:45</strong></p>
<p>因为这样看代码的人会凌乱的</p>
<p><strong>耗子20:44:56</strong></p>
<p>一般如果看到别人用全大写命名的js变量我们一般是不会去重新给它赋值的</p>
<p><strong>小妹20:45:07</strong></p>
<p>因为代码是写给人看的 只是偶尔让机器运行下罢了</p>
<p><strong>耗子20:45:23</strong></p>
<p>另外会使用_开头的变量命名私有属性</p>
<p><strong>小妹20:45:34</strong></p>
<p>嗯</p>
<p><strong>耗子20:45:52</strong></p>
<p>这种方法外人是不应该调用的<br>虽然js中是能够访问到</p>
<p><strong>小妹20:46:01</strong></p>
<p>函数一般以动词开头 get set等</p>
<p><strong>耗子20:46:11</strong></p>
<p>对<br> 小妹说得很对</p>
<p><strong>小妹20:46:25</strong></p>
<p><strong>周娜20:46:29</strong></p>
<p>额，我能否问个问题，常量的意义是什么呢</p>
<p><strong>小妹20:47:01</strong></p>
<p>我觉得是不能被程序改变的变量</p>
<p><strong>耗子20:46:57</strong></p>
<pre><code>好，那你说下
</code></pre><p><strong>aa</strong>这种变量命名一般是标示什么</p>
<p><strong>耗子20:47:31</strong></p>
<p>常量应该在整个程序的生命周期内值不应该发生变化的量</p>
<p><strong>周娜20:47:41</strong></p>
<p>是不是就和上面说的，比如字符串容易写错，就可以用个常量来代替？</p>
<p><strong>黄朋全20:47:57</strong></p>
<p>字符串本身也是常量。</p>
<p><strong>小妹20:48:27</strong></p>
<p>我是觉得字符串容易因为需求或者其他原因 会手动的改动</p>
<p><strong>黄朋全20:48:36</strong></p>
<p>只是两个地方的都是重复的写。不是一个常量。如果其中有一个字符错了。程序就不能正常运行。</p>
<p><strong>小妹20:48:39</strong></p>
<p>如果一个页面多个地方都要改</p>
<p><strong>耗子20:48:38</strong></p>
<p>比如像配置</p>
<p>一个翻页，要求每页显示20条<br>这个PAGE_NUM我们一般命名成全大写，它是不会随便改变的</p>
<p><strong>小妹20:49:06</strong></p>
<p>那就定义一个变量 一个地方改下 其他地方就全改了</p>
<p><strong>小妹20:49:20</strong></p>
<p>嗯 耗子说的对</p>
<p><strong>黄朋全20:49:25</strong></p>
<p>如果提出来。就算常量的值改变，也不影响程序的正常运行。</p>
<p><strong>耗子20:49:31</strong></p>
<p>对</p>
<p><strong>黄朋全20:49:52</strong></p>
<p>这就提高了程序的健壮性。</p>
<p><strong>周娜20:50:03</strong></p>
<p>哦，明白了</p>
<p><strong>耗子20:50:03</strong></p>
<p>ecma5中有const可以定义真正的常量了</p>
<p><strong>耗子20:50:29</strong></p>
<p>定义后的值用程序是改变不了的，只能改代码才能改变</p>
<p><strong>刘林-PHP开发20:50:40</strong></p>
<p>之前呢？</p>
<p><strong>周娜20:50:48</strong></p>
<p><strong>耗子20:50:53</strong></p>
<p>之前没有啊</p>
<p><strong>周娜20:51:03</strong></p>
<p>之前没有</p>
<p><strong>黄朋全20:51:07</strong></p>
<p>js里定义和赋值可以分开吗</p>
<p><strong>耗子20:51:08</strong></p>
<p>ecma5现在还没普及呢</p>
<p><strong>小妹20:51:14</strong></p>
<p>可以</p>
<p><strong>黄朋全20:51:32</strong></p>
<p>那没有赋值前有没有默认值？</p>
<p><strong>耗子20:51:29</strong></p>
<p>@黄朋全 提得问题很好</p>
<p><strong>小妹20:51:42</strong></p>
<p>undefined</p>
<p><strong>小妹20:51:58</strong></p>
<p>undefined也是js里一种数据类型</p>
<p><strong>黄朋全20:52:01</strong></p>
<p>undefined和null有什么区别？</p>
<p><strong>耗子20:52:07</strong></p>
<p>其实js的最佳实践里是建议声明和赋值分开的</p>
<p><strong>小妹20:52:33</strong></p>
<p>我认为undefined是未定义的变量 null一般是指向对象作用的</p>
<p><strong>刘林-PHP开发20:52:41</strong></p>
<p>为什么？</p>
<p><strong>耗子20:53:13</strong></p>
<p>比如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var <span class="variable">a=</span><span class="variable">b=</span><span class="number">1</span>;</div></pre></td></tr></table></figure>

<p>把声明和赋值放在一起，这就是个坑</p>
<p><strong>小妹20:53:52</strong></p>
<p>第一个等号应该是逗号吧 耗子</p>
<p><strong>黄朋全20:53:55</strong></p>
<p>在Java里，类变量有默认值，所以大多是提倡分开赋值。而局部变量必须声明就复制。要不然编译不过。</p>
<p><strong>刘林-PHP开发20:53:56</strong></p>
<p>明白了</p>
<p><strong>小妹20:54:13</strong></p>
<p>你举的这个例子没错吧？还是我看错了？</p>
<p><strong>刘林-PHP开发20:54:18</strong></p>
<p>全局变量了</p>
<p><strong>黄朋全20:54:22</strong></p>
<p>var a=b=1有什么坑？</p>
<p><strong>耗子20:54:20</strong></p>
<p>反面教材</p>
<p><strong>小妹20:54:33</strong></p>
<p>对啊 啥坑啊</p>
<p><strong>小妹20:54:39</strong></p>
<p>耗子 应该没问题啊</p>
<p><strong>耗子20:54:38</strong></p>
<p>b不小心成了全局变量</p>
<p><strong>小妹20:55:04</strong></p>
<p>哦。。</p>
<p><strong>小妹20:55:07</strong></p>
<p>是的</p>
<p><strong>刘林-PHP开发20:55:11</strong></p>
<p>记得耗子以前跟我讲过</p>
<p><strong>黄朋全20:55:31</strong></p>
<p>哦。java写多了，对全局变量没有概念了。</p>
<p><strong>小妹20:55:34</strong></p>
<p>好记性</p>
<p><strong>耗子20:55:36</strong></p>
<p>js中一种极致的做法是是在function里使用单var的做法</p>
<p><strong>小妹20:55:52</strong></p>
<p>我知道</p>
<p><strong>小妹20:56:01</strong></p>
<p>嘿嘿 我可不可以先说下？</p>
<p><strong>耗子20:55:58</strong></p>
<p>一个函数里只出现一个var，所有的声明放在最前面</p>
<p><strong>耗子20:56:02</strong></p>
<p>好哈</p>
<p><strong>小妹20:56:35</strong></p>
<p>就是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var <span class="variable">aaa =</span> xxx,</div><div class="line">     <span class="variable">bbb =</span> xxx,</div><div class="line">     <span class="variable">ccc =</span> xxx;</div></pre></td></tr></table></figure>

<p><strong>黄朋全20:56:35</strong></p>
<p>没有用到多个变量的时候吗</p>
<p><strong>黄朋全20:56:52</strong></p>
<p>这个好像我们同事也讲过。</p>
<p><strong>耗子20:57:04</strong></p>
<p>就是小妹写的那种<br>一次性var完</p>
<p><strong>刘林-PHP开发20:57:28</strong></p>
<p>就是这样写？</p>
<p><strong>黄朋全20:57:33</strong></p>
<p>为啥后面的不var了？</p>
<p><strong>黄朋全20:57:43</strong></p>
<p>当时听就没听明白。</p>
<p><strong>耗子20:57:44</strong></p>
<p>因为是逗号</p>
<p><strong>小妹20:57:49</strong></p>
<p>每行尾巴是个逗号</p>
<p><strong>黄朋全20:58:00</strong></p>
<p>为啥不用分好</p>
<p><strong>黄朋全20:58:03</strong></p>
<p>分号</p>
<p><strong>小妹20:58:19</strong></p>
<p>那就要写很多个var啦</p>
<p><strong>耗子20:58:35</strong></p>
<p>她这种是把声明和初始赋值放在了一起了<br>coffeejs中更极致<br>编译后的代码是这样的:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">var</span> a,b,c;</div><div class="line"><span class="title">a</span> = <span class="number">1</span>;</div><div class="line"><span class="title">b</span> = <span class="number">2</span>;</div><div class="line"><span class="title">c</span> = <span class="number">3</span>;</div></pre></td></tr></table></figure>

<p><strong>刘林-PHP开发20:59:04</strong></p>
<p>这个和c++做法完全相反啊</p>
<p><strong>黄朋全20:59:24</strong></p>
<p>人家是弱语言。</p>
<p><strong>刘林-PHP开发20:59:27</strong></p>
<p>c++里面提倡声明即初始化</p>
<p><strong>黄朋全20:59:28</strong></p>
<p>不是强语言。</p>
<p><strong>耗子20:59:43</strong></p>
<p>这算是js中的最效率的做法，js的引擎这样解析速度最快<br>但事实上开发时不一定是最好的;<br>我建议一类的变量用一个var</p>
<p><strong>小妹21:00:00</strong></p>
<p>嗯</p>
<p><strong>耗子21:00:19</strong></p>
<p>嗯<br>和c++ php都相反</p>
<p><strong>刘林-PHP开发21:00:29</strong></p>
<p>var a,b,c;<br>这样对各个变量的注释都不好写了</p>
<p><strong>牛牛21:00:30</strong></p>
<p>有时候觉得JS真是变态。。。</p>
<p><strong>耗子21:00:37</strong></p>
<p>php好像也是建议尽可能迟地使用变量是吧</p>
<p><strong>小妹21:00:42</strong></p>
<p>嘿嘿 拿他没办法了吧</p>
<p><strong>小妹21:00:51</strong></p>
<p>他就是这么的灵活</p>
<p><strong>牛牛21:00:55</strong></p>
<p>因为JS解释器的关系把</p>
<p><strong>黄朋全21:01:08</strong></p>
<p>php也是脚本语言</p>
<p><strong>黄朋全21:01:20</strong></p>
<p>也是弱类型</p>
<p><strong>牛牛21:01:25</strong></p>
<p>主要原因是 js的变量不声明的时候也能使用</p>
<p><strong>牛牛21:01:27</strong></p>
<p>所以会出错</p>
<p><strong>小妹21:01:44</strong></p>
<p>其实习惯了就好</p>
<p><strong>张静21:01:45</strong></p>
<p>变量的声明和使用尽可能的接近。</p>
<p><strong>黄朋全21:01:48</strong></p>
<p>都是弱语言的特点。</p>
<p><strong>耗子21:01:45</strong></p>
<p>乌龟书的作者个人是建议一类的变量用一个var声明</p>
<p><strong>小妹21:02:08</strong></p>
<p>张静师兄说的对</p>
<p><strong>黄朋全21:02:11</strong></p>
<p>强语言强制不让你那么些。</p>
<p><strong>耗子21:02:29</strong></p>
<p>另外<br>js里严禁在循环体、条件分支里声明变量</p>
<p><strong>小妹21:02:36</strong></p>
<p>不靠的近的话 读代码的人 还要移开视线到很前面去看声明</p>
<p><strong>牛牛21:02:37</strong></p>
<p>书上那个例子是这样的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=<span class="keyword">value</span>+<span class="number">10</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">value</span>=<span class="number">10</span></div></pre></td></tr></table></figure>

<p>这样也不会报错 然后真正运行的时候 就傻咯</p>
<p><strong>耗子21:02:34</strong></p>
<p>坑很多</p>
<p><strong>黄朋全21:02:53</strong></p>
<p>？</p>
<p><strong>耗子21:02:59</strong></p>
<p>结果是NaN</p>
<p><strong>张静21:03:06</strong></p>
<p>可以先使用，后声明？</p>
<p><strong>小妹21:03:09</strong></p>
<p>对的</p>
<p><strong>牛牛21:03:14</strong></p>
<p>这就是变态的地方。。。</p>
<p><strong>刘林-PHP开发21:03:24</strong></p>
<p><strong>牛牛21:03:28</strong></p>
<p>写错了不知道</p>
<p><strong>黄朋全21:03:29</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span> + <span class="number">10</span> = <span class="literal">NaN</span>?</div></pre></td></tr></table></figure>

<p><strong>耗子21:03:31</strong></p>
<p>昂</p>
<p><strong>刘林-PHP开发21:03:41</strong></p>
<p>这程序不是给人看的啊</p>
<p><strong>小妹21:03:46</strong></p>
<p>他是先</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">value</span>;</div><div class="line"><span class="keyword">var</span> x=<span class="keyword">value</span>+<span class="number">10</span></div><div class="line">然后<span class="keyword">value</span>=<span class="number">10</span></div></pre></td></tr></table></figure>

<p><strong>小妹21:04:01</strong></p>
<p>解析的时候是这样的</p>
<p><strong>小妹21:04:17</strong></p>
<p>所以就成了undefined+10赋给x</p>
<p><strong>耗子21:04:13</strong></p>
<p>所以我在这里和大家一起探讨js编程规范<br>就是要在语言风格上规避一些坑</p>
<p><strong>张静21:04:32</strong></p>
<p>js不需要用编译来检查错误。</p>
<p><strong>耗子21:04:30</strong></p>
<p>小妹说得不对</p>
<p><strong>小妹21:04:54</strong></p>
<p>哪不对？</p>
<p><strong>小妹21:05:20</strong></p>
<p>书上就是这么说的吧</p>
<p><strong>耗子21:05:23</strong></p>
<p>他是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x;</div><div class="line"><span class="keyword">var</span> <span class="keyword">value</span>;</div><div class="line">x=<span class="keyword">value</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">value</span>=<span class="number">10</span></div></pre></td></tr></table></figure>

<p><strong>小妹21:05:39</strong></p>
<p>哦 类似这样啦</p>
<p><strong>小妹21:05:43</strong></p>
<p>没注意x</p>
<p><strong>牛牛21:05:56</strong></p>
<p>耗资 精确</p>
<p><strong>小妹21:05:57</strong></p>
<p>嘿嘿</p>
<p><strong>牛牛21:06:16</strong></p>
<p>不过是不是NaN?</p>
<p><strong>牛牛21:06:20</strong></p>
<p>不记得了</p>
<p><strong>小妹21:06:26</strong></p>
<p>是NaN</p>
<p><strong>耗子21:06:28</strong></p>
<pre><code> 这个有点绕了
</code></pre><p>小妹<br>咱们只聊规范吧</p>
<p>这个估计把各位师兄都忽悠傻了</p>
<p><strong>小妹21:06:41</strong></p>
<p>哦哦</p>
<p><strong>小妹21:06:53</strong></p>
<p>不会的 师兄们很强大的</p>
<p><strong>黄朋全21:06:59</strong></p>
<p>不经过编译的语言坑太多了。</p>
<p><strong>耗子21:07:13</strong></p>
<p>其实有些工具可以实现检查</p>
<p><strong>牛牛21:07:33</strong></p>
<p>JSLint</p>
<p><strong>牛牛21:07:40</strong></p>
<p>JSHint啊是？</p>
<p><strong>小妹21:07:41</strong></p>
<p>我知道有jslint和jshint等的</p>
<p><strong>小妹21:07:59</strong></p>
<p>但是在ide里折腾半天没出来</p>
<p><strong>牛牛21:08:00</strong></p>
<p>但是有人用过么。。。</p>
<p><strong>耗子21:08:08</strong></p>
<p>是的<br>道格拉斯爷爷写的检查工具</p>
<p>下节课可以和大家一起装来玩列</p>
<p><strong>黄朋全21:08:15</strong></p>
<p>好像都听说过。他们js分享的时候都没好好听。哎</p>
<p><strong>牛牛21:08:24</strong></p>
<p>eclipse方便 自己集成Jlint了。。。</p>
<p><strong>小妹21:08:36</strong></p>
<p>但是我的apatana就是基于eclipse啊</p>
<p><strong>小妹21:08:44</strong></p>
<p>但是还是没出来jslint</p>
<p><strong>牛牛21:08:44</strong></p>
<p>Jlint</p>
<p><strong>小妹21:08:57</strong></p>
<p>根据网上的配置已经配了</p>
<p><strong>小妹21:09:11</strong></p>
<p>但是还是不能实现实时监控</p>
<p><strong>牛牛21:09:22</strong></p>
<p>乃们可以自己写一个。。。</p>
<p><strong>牛牛21:09:23</strong></p>
<p>。。。。</p>
<p><strong>牛牛21:09:29</strong></p>
<p>插件</p>
<p><strong>耗子21:09:49</strong></p>
<p>可以在save时做勾子<br>每次save自动检测</p>
<p><strong>牛牛21:10:00</strong></p>
<p>耗子同学配成功了么</p>
<p><strong>小妹21:10:05</strong></p>
<p>哦哦</p>
<p><strong>耗子21:10:10</strong></p>
<p>我用sublime配的</p>
<p><strong>小妹21:10:20</strong></p>
<p>save不是就是ctrl+s</p>
<p><strong>小妹21:10:22</strong></p>
<p>吗</p>
<p><strong>小妹21:10:28</strong></p>
<p>怎么配啊</p>
<p><strong>牛牛21:10:36</strong></p>
<p>袄 也可以链到F5</p>
<p><strong>牛牛21:10:39</strong></p>
<p>。。。</p>
<p><strong>耗子21:10:57</strong></p>
<p>下节课再讲那个了</p>
<p><strong>小妹21:11:08</strong></p>
<p>哦</p>
<p><strong>小妹21:11:15</strong></p>
<p>那就期待下节课啦</p>
<p><strong>耗子21:11:30</strong></p>
<p>@张继霞和@雪花师姐一直没发言哦</p>
<p><strong>牛牛21:12:43</strong></p>
<p>下节讲部署工具？</p>
<p><strong>牛牛21:13:17</strong></p>
<p>话说命名其实我一直在想应该有项目术语词典 统一用词</p>
<p><strong>耗子21:13:28</strong></p>
<p>嗯<br>不部署工具这些都还只是规范<br>用着用着就忘记了</p>
<p><strong>耗子21:14:02</strong></p>
<p>命名我们再讨论下吧</p>
<p>刚说到了js中的一些命名约定</p>
<p><strong>耗子21:15:04</strong></p>
<p>比如全大写+下划线表示常量<br><em>开头表示私有属性<br><em>_开头</em></em>结尾表示私有方法<br>首字母大写表示类/构造函数</p>
<p><strong>小妹21:15:23</strong></p>
<p>嗯</p>
<h2 id="命名">命名</h2>
<p><strong>耗子21:16:07</strong></p>
<p>那么牛牛<br>你们一般是怎么约定命名的呢</p>
<p><strong>牛牛21:16:25</strong></p>
<p>就是几乎没有约束</p>
<p><strong>耗子21:16:19</strong></p>
<p>比如你刚说的phone还是mobile</p>
<p><strong>牛牛21:16:38</strong></p>
<p>所以一会phone 一会mobile</p>
<p><strong>耗子21:16:35</strong></p>
<p>都在自己的命名空间下是吧</p>
<p><strong>牛牛21:16:54</strong></p>
<p>这种名字还好 因为歧义不是很大</p>
<p><strong>耗子21:17:01</strong></p>
<p>这个@黄朋全 师兄应该有经验</p>
<p><strong>刘林-PHP开发21:17:24</strong></p>
<p>go语言有意思，大写的是public的，小写的是private的</p>
<p><strong>黄朋全21:17:28</strong></p>
<p>我命名都是长命名</p>
<p><strong>黄朋全21:17:45</strong></p>
<p>都是几个单词拼写在一块的。</p>
<p><strong>耗子21:17:58</strong></p>
<p>js要考虑字节数<br>不是很建议太长的命名</p>
<p><strong>黄朋全21:18:05</strong></p>
<p>局部变量才会用单个词去命名。</p>
<p><strong>牛牛21:18:11</strong></p>
<p>有一些就会歧义比较多了<br>倒不是长和短了就是同一个东西 会用不同的单词</p>
<p><strong>黄朋全21:18:35</strong></p>
<p>后面一个事名词，前面是形容词。</p>
<p><strong>黄朋全21:18:47</strong></p>
<p>或者是几个名词</p>
<p><strong>牛牛21:18:54</strong></p>
<p>同一个事物 可以用若干种名词来表示</p>
<p><strong>黄朋全21:19:17</strong></p>
<p>这个得看团队。</p>
<p><strong>黄朋全21:19:46</strong></p>
<p>比如说activity，我原来的项目写都是用activity结尾。</p>
<p><strong>牛牛21:19:54</strong></p>
<p>嗯 比如说用户名称 一会是username一会是useracount 一会是userLoginName</p>
<p><strong>黄朋全21:19:55</strong></p>
<p>现在都以screen结尾。</p>
<p><strong>黄朋全21:20:12</strong></p>
<p>是一个人写的吗？</p>
<p><strong>牛牛21:20:16</strong></p>
<p>请忽略大小写问题 不同人</p>
<p><strong>牛牛21:20:25</strong></p>
<p>同一个人一般习惯会比较统一</p>
<p><strong>黄朋全21:20:28</strong></p>
<p>后人要遵循前人写的变量。</p>
<p><strong>黄朋全21:20:52</strong></p>
<p>不能由着自己性子来。这也是依师嘛。</p>
<p><strong>黄朋全21:21:11</strong></p>
<p>这类的命名没办法强制约束。</p>
<p><strong>黄朋全21:21:28</strong></p>
<p>只能后来的人尊重前面的人的命名。</p>
<p><strong>黄朋全21:21:54</strong></p>
<p>只去修改逻辑，不要再改别人的命名。</p>
<p><strong>耗子21:21:49</strong></p>
<p>乌龟书上第11页开始讲了几种命名规定<br>1、普通变量使用小驼峰</p>
<p>2、变量使用名词</p>
<p>3、函数使用动词 大部分用get set开头</p>
<p>4、类使用名词，首字母大写</p>
<p>5、flag使用is can has前缀</p>
<p><strong>牛牛21:22:17</strong></p>
<p>这些约定还是比较好遵守的</p>
<p><strong>小妹21:22:25</strong></p>
<p>嗯</p>
<p><strong>黄朋全21:22:26</strong></p>
<p>java里还有，接口以able结尾。呵呵</p>
<p><strong>耗子21:22:45</strong></p>
<p>@黄朋全 后人要遵循前人写的变量。<br>这在乌龟书第十一章“不是你的对象不要动”里有讲到</p>
<p><strong>小妹21:23:04</strong></p>
<p>嗯</p>
<p><strong>小妹21:23:10</strong></p>
<p>没错</p>
<p><strong>小妹21:23:21</strong></p>
<p>我今天刚好看到第11章</p>
<p><strong>牛牛21:23:35</strong></p>
<p>我们的代码风格里面能找到好多反面教材</p>
<p><strong>牛牛21:23:42</strong></p>
<p>其实就是没风格</p>
<p><strong>耗子21:23:35</strong></p>
<p>小妹很精进哦</p>
<p><strong>牛牛21:23:46</strong></p>
<p>。。。各自为战</p>
<p><strong>黄朋全21:24:05</strong></p>
<p>你把自己的风格写好。大家都喜欢了，自然就会学你的写法。</p>
<p><strong>牛牛21:25:12</strong></p>
<p>偶们的命名 还有拼音</p>
<p><strong>牛牛21:25:16</strong></p>
<p>还有简拼</p>
<p><strong>小妹21:25:25</strong></p>
<p>那会坑死人啊</p>
<p><strong>牛牛21:25:36</strong></p>
<p>还有用数字的</p>
<p><strong>牛牛21:25:42</strong></p>
<p>View1 View2View3</p>
<p><strong>黄朋全21:25:45</strong></p>
<p>简拼还有啊？这个用一下google translate也不麻烦吧？</p>
<p><strong>牛牛21:25:47</strong></p>
<p>坑死人不偿命</p>
<p><strong>黄朋全21:25:56</strong></p>
<p>至于懒到这种程度？</p>
<p><strong>小妹21:26:06</strong></p>
<p>扔在那 让你猜去</p>
<p><strong>牛牛21:26:18</strong></p>
<p>不是懒 这种更麻烦</p>
<p><strong>耗子21:26:24</strong></p>
<p>哈哈</p>
<p>后端有门好，代码写得烂外人不知道<br>前端就是门面<br>你命名得不好整个公司的脸都让你丢了</p>
<p><strong>牛牛21:26:36</strong></p>
<p>看代码都不知道干嘛的 要理解半天</p>
<p><strong>牛牛21:26:48</strong></p>
<p>名字没有任何特征</p>
<p><strong>小妹21:26:49</strong></p>
<p>就是</p>
<p><strong>牛牛21:26:49</strong></p>
<p>。。。</p>
<p><strong>牛牛21:26:56</strong></p>
<p>还好不是前端</p>
<p><strong>牛牛21:27:05</strong></p>
<p>还有更变态的</p>
<p><strong>小妹21:27:11</strong></p>
<p>前端是公司的形象代言人</p>
<p><strong>黄朋全21:27:13</strong></p>
<p>你可以给大家分享啊</p>
<p><strong>牛牛21:27:27</strong></p>
<p>用一个通用数组把所有对象都放在里面</p>
<p><strong>牛牛21:27:49</strong></p>
<p>然后访问的时候something[1] something[2]</p>
<p><strong>牛牛21:27:55</strong></p>
<p>更看不懂</p>
<p><strong>黄朋全21:28:08</strong></p>
<p>这个……，就先别观过了。太伤心神。</p>
<p><strong>小妹21:28:15</strong></p>
<p>所以嘛 代码就是给人看的</p>
<p><strong>牛牛21:28:19</strong></p>
<p>不过理解的</p>
<p><strong>黄朋全21:28:23</strong></p>
<p>还是努力把自己代码写好吧。</p>
<p><strong>耗子21:28:16</strong></p>
<p>这在js里叫单例模式<br>jq ext这些库都是严格的单例模式<br>只会暴露一个全局变量</p>
<p><strong>牛牛21:28:34</strong></p>
<p>这个是一个过程</p>
<p><strong>牛牛21:28:48</strong></p>
<p>它这么写 是考虑到了某些方面的</p>
<p><strong>牛牛21:28:55</strong></p>
<p>所以忽略了命名</p>
<p><strong>耗子21:28:57</strong></p>
<p>时间不早了<br>第一章的内容基本今晚串完了</p>
<p><strong>小妹21:29:29</strong></p>
<p><strong>耗子21:29:21</strong></p>
<p>建议大家课后看下书哈<br>书上讲得更细心</p>
<p><strong>耗子 22:21:45</strong></p>
<p>结论还是乌龟书上的建议</p>
<p><strong>江天 22:22:09</strong></p>
<p>恩。</p>
<h2 id="总结">总结</h2>
<p><strong>耗子 22:22:18</strong><br>我们来总结一下吧：</p>
<p>1、一套风格应该尽可能地统一<br>不应该有三个以上的特例</p>
<p><strong>江天 22:22:41</strong></p>
<p>and ?</p>
<p><strong>耗子 22:22:54</strong></p>
<p>2、尽量前后端保持一致，使学习成本减少<br>也方便ide统一配置</p>
<p><strong>耗子 22:23:20</strong></p>
<p>今天和大家一起，也让我到了别的语言中的一些行规</p>
<p><strong>耗子 22:24:09</strong></p>
<p>3、通过编程规范绕过语言一些不为人知的坑</p>
<p><strong>耗子 22:25:10</strong></p>
<p>4、光有规范不够，需要有工具来强制实施<br>人记不住所有的规则</p>
<p><strong>江天 22:26:10</strong></p>
<p>恩。 一共4条？</p>
<p><strong>牛牛 22:26:22</strong></p>
<p>还有尽量都用统一的IDE</p>
<p><strong>牛牛 22:26:25</strong></p>
<p><strong>耗子 22:26:15</strong></p>
<p>憋不出来了</p>
<p><strong>江天 22:26:46</strong></p>
<p>够可以的了。</p>
<p>具体到一个项目时，可能前后端还得根据乌龟书上的原则，具体商定该项目的编码规范及使用的工具。</p>
]]></content>
    <summary type="html"><![CDATA[<p> 日期: 2013-06-03</p>
<p><strong>耗子20:07:02</strong></p>
<p>今天我们想讨论的是js的一些编程风格上的规范</p>
<p><strong>耗子20:07:48</strong></p>
<p>@张静师兄<br>您公司项目中有对js的编程风格有要求么 ？</p>
<p><strong>刘林-PHP开发20:07:48</strong></p>
<p>具体点呢？</p>
<p><strong>耗子20:08:18</strong></p>
<p>大家都可以谈一谈啊，包括别的语言的一些风格</p>
<p><strong>张静20:08:21</strong></p>
<p>没有，我们公司基本用的都是很简单的JS。</p>
<p><strong>张静20:08:29</strong></p>
<p>比较乱。</p>
<p><strong>耗子20:09:02</strong></p>
<p>@刘林师兄 ?<br>]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[chrome解除跨域限制]]></title>
    <link href="http://haozi.de/post/chrome%E8%A7%A3%E9%99%A4%E8%B7%A8%E5%9F%9F%E9%99%90%E5%88%B6/"/>
    <id>http://haozi.de/post/chrome解除跨域限制/</id>
    <published>2012-06-15T07:15:27.000Z</published>
    <updated>2014-10-10T06:54:53.000Z</updated>
    <content type="html"><![CDATA[<p>启动时加参数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"...chrome.exe"</span> <span class="comment">--disable-web-security</span></div></pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
</feed>
